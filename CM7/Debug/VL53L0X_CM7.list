
VL53L0X_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c210  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800c4b0  0800c4b0  0000d4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c544  0800c544  0000e320  2**0
                  CONTENTS
  4 .ARM          00000008  0800c544  0800c544  0000d544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c54c  0800c54c  0000e320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c54c  0800c54c  0000d54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c550  0800c550  0000d550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000320  24000000  0800c554  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  24000320  0800c874  0000e320  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240007f0  0800c874  0000e7f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e320  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022eb1  00000000  00000000  0000e34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a39  00000000  00000000  000311ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001968  00000000  00000000  00034c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013cf  00000000  00000000  000365a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cbfc  00000000  00000000  0003796f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002270e  00000000  00000000  0007456b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018ccc7  00000000  00000000  00096c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00223940  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071b0  00000000  00000000  00223984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0022ab34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000320 	.word	0x24000320
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c498 	.word	0x0800c498

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000324 	.word	0x24000324
 80002dc:	0800c498 	.word	0x0800c498

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b49      	ldr	r3, [pc, #292]	@ (800079c <SystemInit+0x12c>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a48      	ldr	r2, [pc, #288]	@ (800079c <SystemInit+0x12c>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b45      	ldr	r3, [pc, #276]	@ (800079c <SystemInit+0x12c>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a44      	ldr	r2, [pc, #272]	@ (800079c <SystemInit+0x12c>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b43      	ldr	r3, [pc, #268]	@ (80007a0 <SystemInit+0x130>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b40      	ldr	r3, [pc, #256]	@ (80007a0 <SystemInit+0x130>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a3e      	ldr	r2, [pc, #248]	@ (80007a0 <SystemInit+0x130>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b3d      	ldr	r3, [pc, #244]	@ (80007a4 <SystemInit+0x134>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a3c      	ldr	r2, [pc, #240]	@ (80007a4 <SystemInit+0x134>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b3a      	ldr	r3, [pc, #232]	@ (80007a4 <SystemInit+0x134>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b39      	ldr	r3, [pc, #228]	@ (80007a4 <SystemInit+0x134>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4938      	ldr	r1, [pc, #224]	@ (80007a4 <SystemInit+0x134>)
 80006c4:	4b38      	ldr	r3, [pc, #224]	@ (80007a8 <SystemInit+0x138>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b35      	ldr	r3, [pc, #212]	@ (80007a0 <SystemInit+0x130>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b32      	ldr	r3, [pc, #200]	@ (80007a0 <SystemInit+0x130>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a30      	ldr	r2, [pc, #192]	@ (80007a0 <SystemInit+0x130>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b2f      	ldr	r3, [pc, #188]	@ (80007a4 <SystemInit+0x134>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <SystemInit+0x134>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b2c      	ldr	r3, [pc, #176]	@ (80007a4 <SystemInit+0x134>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <SystemInit+0x134>)
 80006fa:	4a2c      	ldr	r2, [pc, #176]	@ (80007ac <SystemInit+0x13c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <SystemInit+0x134>)
 8000700:	4a2b      	ldr	r2, [pc, #172]	@ (80007b0 <SystemInit+0x140>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <SystemInit+0x134>)
 8000706:	4a2b      	ldr	r2, [pc, #172]	@ (80007b4 <SystemInit+0x144>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <SystemInit+0x134>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <SystemInit+0x134>)
 8000712:	4a28      	ldr	r2, [pc, #160]	@ (80007b4 <SystemInit+0x144>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <SystemInit+0x134>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b21      	ldr	r3, [pc, #132]	@ (80007a4 <SystemInit+0x134>)
 800071e:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <SystemInit+0x144>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <SystemInit+0x134>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a1d      	ldr	r2, [pc, #116]	@ (80007a4 <SystemInit+0x134>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <SystemInit+0x134>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <SystemInit+0x148>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a1e      	ldr	r2, [pc, #120]	@ (80007b8 <SystemInit+0x148>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <SystemInit+0x14c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <SystemInit+0x150>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <SystemInit+0x154>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <SystemInit+0x134>)
 800075c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000764:	2b00      	cmp	r3, #0
 8000766:	d113      	bne.n	8000790 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000768:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <SystemInit+0x134>)
 800076a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800076e:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <SystemInit+0x134>)
 8000770:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000774:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <SystemInit+0x158>)
 800077a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800077e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <SystemInit+0x134>)
 8000782:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000786:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <SystemInit+0x134>)
 8000788:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800078c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	52002000 	.word	0x52002000
 80007a4:	58024400 	.word	0x58024400
 80007a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007ac:	02020200 	.word	0x02020200
 80007b0:	01ff0000 	.word	0x01ff0000
 80007b4:	01010280 	.word	0x01010280
 80007b8:	580000c0 	.word	0x580000c0
 80007bc:	5c001000 	.word	0x5c001000
 80007c0:	ffff0000 	.word	0xffff0000
 80007c4:	51008108 	.word	0x51008108
 80007c8:	52004000 	.word	0x52004000

080007cc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <ExitRun0Mode+0x30>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	f023 0306 	bic.w	r3, r3, #6
 80007d8:	4a08      	ldr	r2, [pc, #32]	@ (80007fc <ExitRun0Mode+0x30>)
 80007da:	f043 0302 	orr.w	r3, r3, #2
 80007de:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80007e0:	bf00      	nop
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <ExitRun0Mode+0x30>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d0f9      	beq.n	80007e2 <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	58024800 	.word	0x58024800

08000800 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	@ 0x30
 8000804:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b47      	ldr	r3, [pc, #284]	@ (8000924 <MX_GPIO_Init+0x124>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800080c:	4a45      	ldr	r2, [pc, #276]	@ (8000924 <MX_GPIO_Init+0x124>)
 800080e:	f043 0302 	orr.w	r3, r3, #2
 8000812:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000816:	4b43      	ldr	r3, [pc, #268]	@ (8000924 <MX_GPIO_Init+0x124>)
 8000818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800081c:	f003 0302 	and.w	r3, r3, #2
 8000820:	61bb      	str	r3, [r7, #24]
 8000822:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000824:	4b3f      	ldr	r3, [pc, #252]	@ (8000924 <MX_GPIO_Init+0x124>)
 8000826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800082a:	4a3e      	ldr	r2, [pc, #248]	@ (8000924 <MX_GPIO_Init+0x124>)
 800082c:	f043 0308 	orr.w	r3, r3, #8
 8000830:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000834:	4b3b      	ldr	r3, [pc, #236]	@ (8000924 <MX_GPIO_Init+0x124>)
 8000836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697b      	ldr	r3, [r7, #20]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	4b34      	ldr	r3, [pc, #208]	@ (8000924 <MX_GPIO_Init+0x124>)
 8000854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000858:	4a32      	ldr	r2, [pc, #200]	@ (8000924 <MX_GPIO_Init+0x124>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000862:	4b30      	ldr	r3, [pc, #192]	@ (8000924 <MX_GPIO_Init+0x124>)
 8000864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000868:	f003 0304 	and.w	r3, r3, #4
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000870:	4b2c      	ldr	r3, [pc, #176]	@ (8000924 <MX_GPIO_Init+0x124>)
 8000872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000876:	4a2b      	ldr	r2, [pc, #172]	@ (8000924 <MX_GPIO_Init+0x124>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800087c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000880:	4b28      	ldr	r3, [pc, #160]	@ (8000924 <MX_GPIO_Init+0x124>)
 8000882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <MX_GPIO_Init+0x124>)
 8000890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000894:	4a23      	ldr	r2, [pc, #140]	@ (8000924 <MX_GPIO_Init+0x124>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800089e:	4b21      	ldr	r3, [pc, #132]	@ (8000924 <MX_GPIO_Init+0x124>)
 80008a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000924 <MX_GPIO_Init+0x124>)
 80008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000924 <MX_GPIO_Init+0x124>)
 80008b4:	f043 0310 	orr.w	r3, r3, #16
 80008b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008bc:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <MX_GPIO_Init+0x124>)
 80008be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c2:	f003 0310 	and.w	r3, r3, #16
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  //HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008d0:	4815      	ldr	r0, [pc, #84]	@ (8000928 <MX_GPIO_Init+0x128>)
 80008d2:	f001 f82f 	bl	8001934 <HAL_GPIO_WritePin>
  /*Configure GPIO pin : PtPin */
  //GPIO_InitStruct.Pin = LED_Pin;
  //GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  //GPIO_InitStruct.Pull = GPIO_NOPULL;
  //GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4813      	ldr	r0, [pc, #76]	@ (800092c <MX_GPIO_Init+0x12c>)
 80008de:	f000 fe79 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_XSHUT_Pin;
 80008e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TOF_XSHUT_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	480b      	ldr	r0, [pc, #44]	@ (8000928 <MX_GPIO_Init+0x128>)
 80008fc:	f000 fe6a 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_INT_Pin;
 8000900:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TOF_INT_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4804      	ldr	r0, [pc, #16]	@ (8000928 <MX_GPIO_Init+0x128>)
 8000916:	f000 fe5d 	bl	80015d4 <HAL_GPIO_Init>
}
 800091a:	bf00      	nop
 800091c:	3730      	adds	r7, #48	@ 0x30
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	58024400 	.word	0x58024400
 8000928:	58021000 	.word	0x58021000
 800092c:	58020800 	.word	0x58020800

08000930 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000934:	4b1b      	ldr	r3, [pc, #108]	@ (80009a4 <MX_I2C2_Init+0x74>)
 8000936:	4a1c      	ldr	r2, [pc, #112]	@ (80009a8 <MX_I2C2_Init+0x78>)
 8000938:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909BEB;
 800093a:	4b1a      	ldr	r3, [pc, #104]	@ (80009a4 <MX_I2C2_Init+0x74>)
 800093c:	4a1b      	ldr	r2, [pc, #108]	@ (80009ac <MX_I2C2_Init+0x7c>)
 800093e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000940:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <MX_I2C2_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000946:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <MX_I2C2_Init+0x74>)
 8000948:	2201      	movs	r2, #1
 800094a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094c:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <MX_I2C2_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000952:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_I2C2_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <MX_I2C2_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_I2C2_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000964:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <MX_I2C2_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800096a:	480e      	ldr	r0, [pc, #56]	@ (80009a4 <MX_I2C2_Init+0x74>)
 800096c:	f001 f82a 	bl	80019c4 <HAL_I2C_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000976:	f000 fa31 	bl	8000ddc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800097a:	2100      	movs	r1, #0
 800097c:	4809      	ldr	r0, [pc, #36]	@ (80009a4 <MX_I2C2_Init+0x74>)
 800097e:	f001 fd71 	bl	8002464 <HAL_I2CEx_ConfigAnalogFilter>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000988:	f000 fa28 	bl	8000ddc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800098c:	2100      	movs	r1, #0
 800098e:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <MX_I2C2_Init+0x74>)
 8000990:	f001 fdb3 	bl	80024fa <HAL_I2CEx_ConfigDigitalFilter>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800099a:	f000 fa1f 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2400033c 	.word	0x2400033c
 80009a8:	40005800 	.word	0x40005800
 80009ac:	00909beb 	.word	0x00909beb

080009b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0ba      	sub	sp, #232	@ 0xe8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	22c0      	movs	r2, #192	@ 0xc0
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f00b f8d9 	bl	800bb88 <memset>
  if(i2cHandle->Instance==I2C2)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a27      	ldr	r2, [pc, #156]	@ (8000a78 <HAL_I2C_MspInit+0xc8>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d146      	bne.n	8000a6e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80009e0:	f04f 0208 	mov.w	r2, #8
 80009e4:	f04f 0300 	mov.w	r3, #0
 80009e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	4618      	mov	r0, r3
 80009f8:	f002 fe0c 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000a02:	f000 f9eb 	bl	8000ddc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <HAL_I2C_MspInit+0xcc>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a7c <HAL_I2C_MspInit+0xcc>)
 8000a0e:	f043 0302 	orr.w	r3, r3, #2
 8000a12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a16:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <HAL_I2C_MspInit+0xcc>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a24:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2c:	2312      	movs	r3, #18
 8000a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a44:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <HAL_I2C_MspInit+0xd0>)
 8000a4c:	f000 fdc2 	bl	80015d4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a50:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <HAL_I2C_MspInit+0xcc>)
 8000a52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a56:	4a09      	ldr	r2, [pc, #36]	@ (8000a7c <HAL_I2C_MspInit+0xcc>)
 8000a58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a5c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <HAL_I2C_MspInit+0xcc>)
 8000a62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a6e:	bf00      	nop
 8000a70:	37e8      	adds	r7, #232	@ 0xe8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40005800 	.word	0x40005800
 8000a7c:	58024400 	.word	0x58024400
 8000a80:	58020400 	.word	0x58020400

08000a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a8a:	f000 f97b 	bl	8000d84 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000a8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a92:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000a94:	bf00      	nop
 8000a96:	4b73      	ldr	r3, [pc, #460]	@ (8000c64 <main+0x1e0>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d004      	beq.n	8000aac <main+0x28>
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	1e5a      	subs	r2, r3, #1
 8000aa6:	60fa      	str	r2, [r7, #12]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	dcf4      	bgt.n	8000a96 <main+0x12>
  if ( timeout < 0 )
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	da01      	bge.n	8000ab6 <main+0x32>
  {
  Error_Handler();
 8000ab2:	f000 f993 	bl	8000ddc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab6:	f000 fb6f 	bl	8001198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aba:	f000 f8e7 	bl	8000c8c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000abe:	4b69      	ldr	r3, [pc, #420]	@ (8000c64 <main+0x1e0>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac4:	4a67      	ldr	r2, [pc, #412]	@ (8000c64 <main+0x1e0>)
 8000ac6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ace:	4b65      	ldr	r3, [pc, #404]	@ (8000c64 <main+0x1e0>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f000 ff43 	bl	8001968 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f000 ff59 	bl	800199c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000aea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000aee:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000af0:	bf00      	nop
 8000af2:	4b5c      	ldr	r3, [pc, #368]	@ (8000c64 <main+0x1e0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d104      	bne.n	8000b08 <main+0x84>
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	1e5a      	subs	r2, r3, #1
 8000b02:	60fa      	str	r2, [r7, #12]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	dcf4      	bgt.n	8000af2 <main+0x6e>
if ( timeout < 0 )
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	da01      	bge.n	8000b12 <main+0x8e>
{
Error_Handler();
 8000b0e:	f000 f965 	bl	8000ddc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b12:	f7ff fe75 	bl	8000800 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000b16:	f7ff ff0b 	bl	8000930 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000b1a:	f000 f9e5 	bl	8000ee8 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000b1e:	f000 fa59 	bl	8000fd4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  MessageLen = sprintf((char*)Message, "VL53L0X test\n\r");
 8000b22:	4951      	ldr	r1, [pc, #324]	@ (8000c68 <main+0x1e4>)
 8000b24:	4851      	ldr	r0, [pc, #324]	@ (8000c6c <main+0x1e8>)
 8000b26:	f00b f80f 	bl	800bb48 <siprintf>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4b50      	ldr	r3, [pc, #320]	@ (8000c70 <main+0x1ec>)
 8000b30:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart3, Message, MessageLen, 100);
 8000b32:	4b4f      	ldr	r3, [pc, #316]	@ (8000c70 <main+0x1ec>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	2364      	movs	r3, #100	@ 0x64
 8000b3a:	494c      	ldr	r1, [pc, #304]	@ (8000c6c <main+0x1e8>)
 8000b3c:	484d      	ldr	r0, [pc, #308]	@ (8000c74 <main+0x1f0>)
 8000b3e:	f004 ff01 	bl	8005944 <HAL_UART_Transmit>

  Dev->I2cHandle = &hi2c2;
 8000b42:	4b4d      	ldr	r3, [pc, #308]	@ (8000c78 <main+0x1f4>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a4d      	ldr	r2, [pc, #308]	@ (8000c7c <main+0x1f8>)
 8000b48:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  Dev->I2cDevAddr = 0x52;
 8000b4c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c78 <main+0x1f4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2252      	movs	r2, #82	@ 0x52
 8000b52:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET); // Disable XSHUT
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b5c:	4848      	ldr	r0, [pc, #288]	@ (8000c80 <main+0x1fc>)
 8000b5e:	f000 fee9 	bl	8001934 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8000b62:	2014      	movs	r0, #20
 8000b64:	f000 fbaa 	bl	80012bc <HAL_Delay>
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET); // Enable XSHUT
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b6e:	4844      	ldr	r0, [pc, #272]	@ (8000c80 <main+0x1fc>)
 8000b70:	f000 fee0 	bl	8001934 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8000b74:	2014      	movs	r0, #20
 8000b76:	f000 fba1 	bl	80012bc <HAL_Delay>

  //
  // VL53L0X init for Single Measurement
  //

  VL53L0X_WaitDeviceBooted( Dev );
 8000b7a:	4b3f      	ldr	r3, [pc, #252]	@ (8000c78 <main+0x1f4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f006 faf2 	bl	8007168 <VL53L0X_WaitDeviceBooted>
  VL53L0X_DataInit( Dev );
 8000b84:	4b3c      	ldr	r3, [pc, #240]	@ (8000c78 <main+0x1f4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f006 f809 	bl	8006ba0 <VL53L0X_DataInit>
  VL53L0X_StaticInit( Dev );
 8000b8e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c78 <main+0x1f4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f006 f968 	bl	8006e68 <VL53L0X_StaticInit>
  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000b98:	4b37      	ldr	r3, [pc, #220]	@ (8000c78 <main+0x1f4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	1d7a      	adds	r2, r7, #5
 8000b9e:	1db9      	adds	r1, r7, #6
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f006 ffff 	bl	8007ba4 <VL53L0X_PerformRefCalibration>
  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000ba6:	4b34      	ldr	r3, [pc, #208]	@ (8000c78 <main+0x1f4>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	1dfa      	adds	r2, r7, #7
 8000bac:	f107 0108 	add.w	r1, r7, #8
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f007 fc79 	bl	80084a8 <VL53L0X_PerformRefSpadManagement>
  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000bb6:	4b30      	ldr	r3, [pc, #192]	@ (8000c78 <main+0x1f4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f006 fb71 	bl	80072a4 <VL53L0X_SetDeviceMode>

  // Enable/Disable Sigma and Signal check
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c78 <main+0x1f4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f006 fde4 	bl	8007798 <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8000bd0:	4b29      	ldr	r3, [pc, #164]	@ (8000c78 <main+0x1f4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f006 fddd 	bl	8007798 <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000bde:	4b26      	ldr	r3, [pc, #152]	@ (8000c78 <main+0x1f4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f641 1299 	movw	r2, #6553	@ 0x1999
 8000be6:	2101      	movs	r1, #1
 8000be8:	4618      	mov	r0, r3
 8000bea:	f006 fe85 	bl	80078f8 <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8000bee:	4b22      	ldr	r3, [pc, #136]	@ (8000c78 <main+0x1f4>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f006 fe7d 	bl	80078f8 <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <main+0x1f4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f248 01e8 	movw	r1, #33000	@ 0x80e8
 8000c06:	4618      	mov	r0, r3
 8000c08:	f006 fbaa 	bl	8007360 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <main+0x1f4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2212      	movs	r2, #18
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f006 fbc9 	bl	80073ac <VL53L0X_SetVcselPulsePeriod>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8000c1a:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <main+0x1f4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	220e      	movs	r2, #14
 8000c20:	2101      	movs	r1, #1
 8000c22:	4618      	mov	r0, r3
 8000c24:	f006 fbc2 	bl	80073ac <VL53L0X_SetVcselPulsePeriod>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8000c28:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <main+0x1f4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4915      	ldr	r1, [pc, #84]	@ (8000c84 <main+0x200>)
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f007 fa52 	bl	80080d8 <VL53L0X_PerformSingleRangingMeasurement>

	  if(RangingData.RangeStatus == 0)
 8000c34:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <main+0x200>)
 8000c36:	7e1b      	ldrb	r3, [r3, #24]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1f5      	bne.n	8000c28 <main+0x1a4>
	  {
		  MessageLen = sprintf((char*)Message, "Measured distance: %i\n\r", RangingData.RangeMilliMeter);
 8000c3c:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <main+0x200>)
 8000c3e:	891b      	ldrh	r3, [r3, #8]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4911      	ldr	r1, [pc, #68]	@ (8000c88 <main+0x204>)
 8000c44:	4809      	ldr	r0, [pc, #36]	@ (8000c6c <main+0x1e8>)
 8000c46:	f00a ff7f 	bl	800bb48 <siprintf>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <main+0x1ec>)
 8000c50:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, Message, MessageLen, 100);
 8000c52:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <main+0x1ec>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	2364      	movs	r3, #100	@ 0x64
 8000c5a:	4904      	ldr	r1, [pc, #16]	@ (8000c6c <main+0x1e8>)
 8000c5c:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <main+0x1f0>)
 8000c5e:	f004 fe71 	bl	8005944 <HAL_UART_Transmit>
	  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8000c62:	e7e1      	b.n	8000c28 <main+0x1a4>
 8000c64:	58024400 	.word	0x58024400
 8000c68:	0800c4b0 	.word	0x0800c4b0
 8000c6c:	24000390 	.word	0x24000390
 8000c70:	240003d0 	.word	0x240003d0
 8000c74:	240005d0 	.word	0x240005d0
 8000c78:	24000008 	.word	0x24000008
 8000c7c:	2400033c 	.word	0x2400033c
 8000c80:	58021000 	.word	0x58021000
 8000c84:	240003d4 	.word	0x240003d4
 8000c88:	0800c4c0 	.word	0x0800c4c0

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b09c      	sub	sp, #112	@ 0x70
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c96:	224c      	movs	r2, #76	@ 0x4c
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f00a ff74 	bl	800bb88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2220      	movs	r2, #32
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f00a ff6e 	bl	800bb88 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cac:	2004      	movs	r0, #4
 8000cae:	f001 fc71 	bl	8002594 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	4b31      	ldr	r3, [pc, #196]	@ (8000d7c <SystemClock_Config+0xf0>)
 8000cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cba:	4a30      	ldr	r2, [pc, #192]	@ (8000d7c <SystemClock_Config+0xf0>)
 8000cbc:	f023 0301 	bic.w	r3, r3, #1
 8000cc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cc2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d7c <SystemClock_Config+0xf0>)
 8000cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d80 <SystemClock_Config+0xf4>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8000d80 <SystemClock_Config+0xf4>)
 8000cd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b28      	ldr	r3, [pc, #160]	@ (8000d80 <SystemClock_Config+0xf4>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce8:	bf00      	nop
 8000cea:	4b25      	ldr	r3, [pc, #148]	@ (8000d80 <SystemClock_Config+0xf4>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cf6:	d1f8      	bne.n	8000cea <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d00:	2340      	movs	r3, #64	@ 0x40
 8000d02:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d04:	2302      	movs	r3, #2
 8000d06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d10:	230a      	movs	r3, #10
 8000d12:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d20:	230c      	movs	r3, #12
 8000d22:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000d24:	2302      	movs	r3, #2
 8000d26:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 fc89 	bl	8002648 <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d3c:	f000 f84e 	bl	8000ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d40:	233f      	movs	r3, #63	@ 0x3f
 8000d42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d44:	2303      	movs	r3, #3
 8000d46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d54:	2340      	movs	r3, #64	@ 0x40
 8000d56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2101      	movs	r1, #1
 8000d64:	4618      	mov	r0, r3
 8000d66:	f002 f8c9 	bl	8002efc <HAL_RCC_ClockConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000d70:	f000 f834 	bl	8000ddc <Error_Handler>
  }
}
 8000d74:	bf00      	nop
 8000d76:	3770      	adds	r7, #112	@ 0x70
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	58000400 	.word	0x58000400
 8000d80:	58024800 	.word	0x58024800

08000d84 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d96:	f000 fba5 	bl	80014e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000da6:	231f      	movs	r3, #31
 8000da8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000daa:	2387      	movs	r3, #135	@ 0x87
 8000dac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000db2:	2300      	movs	r3, #0
 8000db4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000db6:	2301      	movs	r3, #1
 8000db8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 fbc3 	bl	8001554 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000dce:	2004      	movs	r0, #4
 8000dd0:	f000 fba0 	bl	8001514 <HAL_MPU_Enable>

}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <Error_Handler+0x8>

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <HAL_MspInit+0x30>)
 8000df0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000df4:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <HAL_MspInit+0x30>)
 8000df6:	f043 0302 	orr.w	r3, r3, #2
 8000dfa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_MspInit+0x30>)
 8000e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	58024400 	.word	0x58024400

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <NMI_Handler+0x4>

08000e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <MemManage_Handler+0x4>

08000e34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e72:	f000 fa03 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e84:	4a14      	ldr	r2, [pc, #80]	@ (8000ed8 <_sbrk+0x5c>)
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <_sbrk+0x60>)
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e90:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e98:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <_sbrk+0x64>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ee4 <_sbrk+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d207      	bcs.n	8000ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eac:	f00a fe74 	bl	800bb98 <__errno>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	e009      	b.n	8000ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a05      	ldr	r2, [pc, #20]	@ (8000ee0 <_sbrk+0x64>)
 8000ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	24080000 	.word	0x24080000
 8000edc:	00000400 	.word	0x00000400
 8000ee0:	24000580 	.word	0x24000580
 8000ee4:	240007f0 	.word	0x240007f0

08000ee8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <MX_TIM1_Init+0xa0>)
 8000f08:	4a20      	ldr	r2, [pc, #128]	@ (8000f8c <MX_TIM1_Init+0xa4>)
 8000f0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <MX_TIM1_Init+0xa0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f12:	4b1d      	ldr	r3, [pc, #116]	@ (8000f88 <MX_TIM1_Init+0xa0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <MX_TIM1_Init+0xa0>)
 8000f1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f20:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <MX_TIM1_Init+0xa0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f26:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <MX_TIM1_Init+0xa0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2c:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <MX_TIM1_Init+0xa0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f32:	4815      	ldr	r0, [pc, #84]	@ (8000f88 <MX_TIM1_Init+0xa0>)
 8000f34:	f004 f99a 	bl	800526c <HAL_TIM_Base_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f3e:	f7ff ff4d 	bl	8000ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480e      	ldr	r0, [pc, #56]	@ (8000f88 <MX_TIM1_Init+0xa0>)
 8000f50:	f004 f9e4 	bl	800531c <HAL_TIM_ConfigClockSource>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f5a:	f7ff ff3f 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	@ (8000f88 <MX_TIM1_Init+0xa0>)
 8000f70:	f004 fc0a 	bl	8005788 <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f7a:	f7ff ff2f 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3720      	adds	r7, #32
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	24000584 	.word	0x24000584
 8000f8c:	40010000 	.word	0x40010000

08000f90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <HAL_TIM_Base_MspInit+0x3c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d10e      	bne.n	8000fc0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x40>)
 8000fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fa8:	4a09      	ldr	r2, [pc, #36]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x40>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000fb2:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x40>)
 8000fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	40010000 	.word	0x40010000
 8000fd0:	58024400 	.word	0x58024400

08000fd4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fd8:	4b22      	ldr	r3, [pc, #136]	@ (8001064 <MX_USART3_UART_Init+0x90>)
 8000fda:	4a23      	ldr	r2, [pc, #140]	@ (8001068 <MX_USART3_UART_Init+0x94>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fde:	4b21      	ldr	r3, [pc, #132]	@ (8001064 <MX_USART3_UART_Init+0x90>)
 8000fe0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fe4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8001064 <MX_USART3_UART_Init+0x90>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	@ (8001064 <MX_USART3_UART_Init+0x90>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8001064 <MX_USART3_UART_Init+0x90>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <MX_USART3_UART_Init+0x90>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	@ (8001064 <MX_USART3_UART_Init+0x90>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <MX_USART3_UART_Init+0x90>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800100a:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <MX_USART3_UART_Init+0x90>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001010:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <MX_USART3_UART_Init+0x90>)
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001016:	4b13      	ldr	r3, [pc, #76]	@ (8001064 <MX_USART3_UART_Init+0x90>)
 8001018:	2200      	movs	r2, #0
 800101a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800101c:	4811      	ldr	r0, [pc, #68]	@ (8001064 <MX_USART3_UART_Init+0x90>)
 800101e:	f004 fc41 	bl	80058a4 <HAL_UART_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001028:	f7ff fed8 	bl	8000ddc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800102c:	2100      	movs	r1, #0
 800102e:	480d      	ldr	r0, [pc, #52]	@ (8001064 <MX_USART3_UART_Init+0x90>)
 8001030:	f005 fcd7 	bl	80069e2 <HAL_UARTEx_SetTxFifoThreshold>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800103a:	f7ff fecf 	bl	8000ddc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800103e:	2100      	movs	r1, #0
 8001040:	4808      	ldr	r0, [pc, #32]	@ (8001064 <MX_USART3_UART_Init+0x90>)
 8001042:	f005 fd0c 	bl	8006a5e <HAL_UARTEx_SetRxFifoThreshold>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800104c:	f7ff fec6 	bl	8000ddc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001050:	4804      	ldr	r0, [pc, #16]	@ (8001064 <MX_USART3_UART_Init+0x90>)
 8001052:	f005 fc8d 	bl	8006970 <HAL_UARTEx_DisableFifoMode>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800105c:	f7ff febe 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	240005d0 	.word	0x240005d0
 8001068:	40004800 	.word	0x40004800

0800106c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b0ba      	sub	sp, #232	@ 0xe8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	22c0      	movs	r2, #192	@ 0xc0
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f00a fd7b 	bl	800bb88 <memset>
  if(uartHandle->Instance==USART3)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a27      	ldr	r2, [pc, #156]	@ (8001134 <HAL_UART_MspInit+0xc8>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d146      	bne.n	800112a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800109c:	f04f 0202 	mov.w	r2, #2
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 faae 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010be:	f7ff fe8d 	bl	8000ddc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <HAL_UART_MspInit+0xcc>)
 80010c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001138 <HAL_UART_MspInit+0xcc>)
 80010ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010d2:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <HAL_UART_MspInit+0xcc>)
 80010d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e0:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <HAL_UART_MspInit+0xcc>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e6:	4a14      	ldr	r2, [pc, #80]	@ (8001138 <HAL_UART_MspInit+0xcc>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f0:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <HAL_UART_MspInit+0xcc>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001102:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001118:	2307      	movs	r3, #7
 800111a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	@ (800113c <HAL_UART_MspInit+0xd0>)
 8001126:	f000 fa55 	bl	80015d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800112a:	bf00      	nop
 800112c:	37e8      	adds	r7, #232	@ 0xe8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40004800 	.word	0x40004800
 8001138:	58024400 	.word	0x58024400
 800113c:	58020c00 	.word	0x58020c00

08001140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001140:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800117c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001144:	f7ff fb42 	bl	80007cc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001148:	f7ff fa92 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800114c:	480c      	ldr	r0, [pc, #48]	@ (8001180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800114e:	490d      	ldr	r1, [pc, #52]	@ (8001184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001150:	4a0d      	ldr	r2, [pc, #52]	@ (8001188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001164:	4c0a      	ldr	r4, [pc, #40]	@ (8001190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001172:	f00a fd17 	bl	800bba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001176:	f7ff fc85 	bl	8000a84 <main>
  bx  lr
 800117a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800117c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001180:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001184:	24000320 	.word	0x24000320
  ldr r2, =_sidata
 8001188:	0800c554 	.word	0x0800c554
  ldr r2, =_sbss
 800118c:	24000320 	.word	0x24000320
  ldr r4, =_ebss
 8001190:	240007f0 	.word	0x240007f0

08001194 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC3_IRQHandler>
	...

08001198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119e:	2003      	movs	r0, #3
 80011a0:	f000 f96e 	bl	8001480 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011a4:	f002 f860 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 80011a8:	4602      	mov	r2, r0
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <HAL_Init+0x68>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	0a1b      	lsrs	r3, r3, #8
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	4913      	ldr	r1, [pc, #76]	@ (8001204 <HAL_Init+0x6c>)
 80011b6:	5ccb      	ldrb	r3, [r1, r3]
 80011b8:	f003 031f 	and.w	r3, r3, #31
 80011bc:	fa22 f303 	lsr.w	r3, r2, r3
 80011c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <HAL_Init+0x68>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <HAL_Init+0x6c>)
 80011cc:	5cd3      	ldrb	r3, [r2, r3]
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	fa22 f303 	lsr.w	r3, r2, r3
 80011d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001208 <HAL_Init+0x70>)
 80011da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011dc:	4a0b      	ldr	r2, [pc, #44]	@ (800120c <HAL_Init+0x74>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e2:	200f      	movs	r0, #15
 80011e4:	f000 f814 	bl	8001210 <HAL_InitTick>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e002      	b.n	80011f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011f2:	f7ff fdf9 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	58024400 	.word	0x58024400
 8001204:	0800c4d8 	.word	0x0800c4d8
 8001208:	24000004 	.word	0x24000004
 800120c:	24000000 	.word	0x24000000

08001210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001218:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <HAL_InitTick+0x60>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e021      	b.n	8001268 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001224:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <HAL_InitTick+0x64>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <HAL_InitTick+0x60>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001232:	fbb3 f3f1 	udiv	r3, r3, r1
 8001236:	fbb2 f3f3 	udiv	r3, r2, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f945 	bl	80014ca <HAL_SYSTICK_Config>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e00e      	b.n	8001268 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0f      	cmp	r3, #15
 800124e:	d80a      	bhi.n	8001266 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001250:	2200      	movs	r2, #0
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f000 f91d 	bl	8001496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800125c:	4a06      	ldr	r2, [pc, #24]	@ (8001278 <HAL_InitTick+0x68>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e000      	b.n	8001268 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	24000010 	.word	0x24000010
 8001274:	24000000 	.word	0x24000000
 8001278:	2400000c 	.word	0x2400000c

0800127c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_IncTick+0x20>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_IncTick+0x24>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4413      	add	r3, r2
 800128c:	4a04      	ldr	r2, [pc, #16]	@ (80012a0 <HAL_IncTick+0x24>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	24000010 	.word	0x24000010
 80012a0:	24000664 	.word	0x24000664

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b03      	ldr	r3, [pc, #12]	@ (80012b8 <HAL_GetTick+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	24000664 	.word	0x24000664

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff ffee 	bl	80012a4 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d005      	beq.n	80012e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <HAL_Delay+0x44>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e2:	bf00      	nop
 80012e4:	f7ff ffde 	bl	80012a4 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d8f7      	bhi.n	80012e4 <HAL_Delay+0x28>
  {
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	24000010 	.word	0x24000010

08001304 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001308:	4b03      	ldr	r3, [pc, #12]	@ (8001318 <HAL_GetREVID+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	0c1b      	lsrs	r3, r3, #16
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	5c001000 	.word	0x5c001000

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <__NVIC_SetPriorityGrouping+0x40>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001346:	4313      	orrs	r3, r2
 8001348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134a:	4a04      	ldr	r2, [pc, #16]	@ (800135c <__NVIC_SetPriorityGrouping+0x40>)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	60d3      	str	r3, [r2, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00
 8001360:	05fa0000 	.word	0x05fa0000

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	@ (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800138c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001390:	2b00      	cmp	r3, #0
 8001392:	db0a      	blt.n	80013aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	490c      	ldr	r1, [pc, #48]	@ (80013cc <__NVIC_SetPriority+0x4c>)
 800139a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139e:	0112      	lsls	r2, r2, #4
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	440b      	add	r3, r1
 80013a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a8:	e00a      	b.n	80013c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4908      	ldr	r1, [pc, #32]	@ (80013d0 <__NVIC_SetPriority+0x50>)
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	3b04      	subs	r3, #4
 80013b8:	0112      	lsls	r2, r2, #4
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	440b      	add	r3, r1
 80013be:	761a      	strb	r2, [r3, #24]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000e100 	.word	0xe000e100
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	@ 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f1c3 0307 	rsb	r3, r3, #7
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	bf28      	it	cs
 80013f2:	2304      	movcs	r3, #4
 80013f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3304      	adds	r3, #4
 80013fa:	2b06      	cmp	r3, #6
 80013fc:	d902      	bls.n	8001404 <NVIC_EncodePriority+0x30>
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3b03      	subs	r3, #3
 8001402:	e000      	b.n	8001406 <NVIC_EncodePriority+0x32>
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	f04f 32ff 	mov.w	r2, #4294967295
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43da      	mvns	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	401a      	ands	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800141c:	f04f 31ff 	mov.w	r1, #4294967295
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43d9      	mvns	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	4313      	orrs	r3, r2
         );
}
 800142e:	4618      	mov	r0, r3
 8001430:	3724      	adds	r7, #36	@ 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800144c:	d301      	bcc.n	8001452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144e:	2301      	movs	r3, #1
 8001450:	e00f      	b.n	8001472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001452:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <SysTick_Config+0x40>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145a:	210f      	movs	r1, #15
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f7ff ff8e 	bl	8001380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001464:	4b05      	ldr	r3, [pc, #20]	@ (800147c <SysTick_Config+0x40>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146a:	4b04      	ldr	r3, [pc, #16]	@ (800147c <SysTick_Config+0x40>)
 800146c:	2207      	movs	r2, #7
 800146e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	e000e010 	.word	0xe000e010

08001480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff47 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014a4:	f7ff ff5e 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f7ff ff90 	bl	80013d4 <NVIC_EncodePriority>
 80014b4:	4602      	mov	r2, r0
 80014b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff5f 	bl	8001380 <__NVIC_SetPriority>
}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffb2 	bl	800143c <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80014e8:	f3bf 8f5f 	dmb	sy
}
 80014ec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80014ee:	4b07      	ldr	r3, [pc, #28]	@ (800150c <HAL_MPU_Disable+0x28>)
 80014f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f2:	4a06      	ldr	r2, [pc, #24]	@ (800150c <HAL_MPU_Disable+0x28>)
 80014f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014f8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80014fa:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <HAL_MPU_Disable+0x2c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	e000ed90 	.word	0xe000ed90

08001514 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800151c:	4a0b      	ldr	r2, [pc, #44]	@ (800154c <HAL_MPU_Enable+0x38>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001526:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <HAL_MPU_Enable+0x3c>)
 8001528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152a:	4a09      	ldr	r2, [pc, #36]	@ (8001550 <HAL_MPU_Enable+0x3c>)
 800152c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001530:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001532:	f3bf 8f4f 	dsb	sy
}
 8001536:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001538:	f3bf 8f6f 	isb	sy
}
 800153c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed90 	.word	0xe000ed90
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	785a      	ldrb	r2, [r3, #1]
 8001560:	4b1b      	ldr	r3, [pc, #108]	@ (80015d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001562:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001564:	4b1a      	ldr	r3, [pc, #104]	@ (80015d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	4a19      	ldr	r2, [pc, #100]	@ (80015d0 <HAL_MPU_ConfigRegion+0x7c>)
 800156a:	f023 0301 	bic.w	r3, r3, #1
 800156e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001570:	4a17      	ldr	r2, [pc, #92]	@ (80015d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7b1b      	ldrb	r3, [r3, #12]
 800157c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7adb      	ldrb	r3, [r3, #11]
 8001582:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001584:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7a9b      	ldrb	r3, [r3, #10]
 800158a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800158c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7b5b      	ldrb	r3, [r3, #13]
 8001592:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001594:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7b9b      	ldrb	r3, [r3, #14]
 800159a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800159c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7bdb      	ldrb	r3, [r3, #15]
 80015a2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	7a5b      	ldrb	r3, [r3, #9]
 80015aa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	7a1b      	ldrb	r3, [r3, #8]
 80015b2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015b4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	7812      	ldrb	r2, [r2, #0]
 80015ba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015bc:	4a04      	ldr	r2, [pc, #16]	@ (80015d0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015be:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015c0:	6113      	str	r3, [r2, #16]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed90 	.word	0xe000ed90

080015d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	@ 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80015e2:	4b89      	ldr	r3, [pc, #548]	@ (8001808 <HAL_GPIO_Init+0x234>)
 80015e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015e6:	e194      	b.n	8001912 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8186 	beq.w	800190c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b01      	cmp	r3, #1
 800160a:	d005      	beq.n	8001618 <HAL_GPIO_Init+0x44>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d130      	bne.n	800167a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800164e:	2201      	movs	r2, #1
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	f003 0201 	and.w	r2, r3, #1
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b03      	cmp	r3, #3
 8001684:	d017      	beq.n	80016b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	2203      	movs	r2, #3
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d123      	bne.n	800170a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	220f      	movs	r2, #15
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3208      	adds	r2, #8
 8001704:	69b9      	ldr	r1, [r7, #24]
 8001706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	2203      	movs	r2, #3
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0203 	and.w	r2, r3, #3
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80e0 	beq.w	800190c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174c:	4b2f      	ldr	r3, [pc, #188]	@ (800180c <HAL_GPIO_Init+0x238>)
 800174e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001752:	4a2e      	ldr	r2, [pc, #184]	@ (800180c <HAL_GPIO_Init+0x238>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800175c:	4b2b      	ldr	r3, [pc, #172]	@ (800180c <HAL_GPIO_Init+0x238>)
 800175e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800176a:	4a29      	ldr	r2, [pc, #164]	@ (8001810 <HAL_GPIO_Init+0x23c>)
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	3302      	adds	r3, #2
 8001772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	220f      	movs	r2, #15
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a20      	ldr	r2, [pc, #128]	@ (8001814 <HAL_GPIO_Init+0x240>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d052      	beq.n	800183c <HAL_GPIO_Init+0x268>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a1f      	ldr	r2, [pc, #124]	@ (8001818 <HAL_GPIO_Init+0x244>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d031      	beq.n	8001802 <HAL_GPIO_Init+0x22e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a1e      	ldr	r2, [pc, #120]	@ (800181c <HAL_GPIO_Init+0x248>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d02b      	beq.n	80017fe <HAL_GPIO_Init+0x22a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001820 <HAL_GPIO_Init+0x24c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d025      	beq.n	80017fa <HAL_GPIO_Init+0x226>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001824 <HAL_GPIO_Init+0x250>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d01f      	beq.n	80017f6 <HAL_GPIO_Init+0x222>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001828 <HAL_GPIO_Init+0x254>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d019      	beq.n	80017f2 <HAL_GPIO_Init+0x21e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a1a      	ldr	r2, [pc, #104]	@ (800182c <HAL_GPIO_Init+0x258>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_GPIO_Init+0x21a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a19      	ldr	r2, [pc, #100]	@ (8001830 <HAL_GPIO_Init+0x25c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00d      	beq.n	80017ea <HAL_GPIO_Init+0x216>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a18      	ldr	r2, [pc, #96]	@ (8001834 <HAL_GPIO_Init+0x260>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d007      	beq.n	80017e6 <HAL_GPIO_Init+0x212>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a17      	ldr	r2, [pc, #92]	@ (8001838 <HAL_GPIO_Init+0x264>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d101      	bne.n	80017e2 <HAL_GPIO_Init+0x20e>
 80017de:	2309      	movs	r3, #9
 80017e0:	e02d      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017e2:	230a      	movs	r3, #10
 80017e4:	e02b      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017e6:	2308      	movs	r3, #8
 80017e8:	e029      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017ea:	2307      	movs	r3, #7
 80017ec:	e027      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017ee:	2306      	movs	r3, #6
 80017f0:	e025      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017f2:	2305      	movs	r3, #5
 80017f4:	e023      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017f6:	2304      	movs	r3, #4
 80017f8:	e021      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017fa:	2303      	movs	r3, #3
 80017fc:	e01f      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017fe:	2302      	movs	r3, #2
 8001800:	e01d      	b.n	800183e <HAL_GPIO_Init+0x26a>
 8001802:	2301      	movs	r3, #1
 8001804:	e01b      	b.n	800183e <HAL_GPIO_Init+0x26a>
 8001806:	bf00      	nop
 8001808:	58000080 	.word	0x58000080
 800180c:	58024400 	.word	0x58024400
 8001810:	58000400 	.word	0x58000400
 8001814:	58020000 	.word	0x58020000
 8001818:	58020400 	.word	0x58020400
 800181c:	58020800 	.word	0x58020800
 8001820:	58020c00 	.word	0x58020c00
 8001824:	58021000 	.word	0x58021000
 8001828:	58021400 	.word	0x58021400
 800182c:	58021800 	.word	0x58021800
 8001830:	58021c00 	.word	0x58021c00
 8001834:	58022000 	.word	0x58022000
 8001838:	58022400 	.word	0x58022400
 800183c:	2300      	movs	r3, #0
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	f002 0203 	and.w	r2, r2, #3
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	4093      	lsls	r3, r2
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800184e:	4938      	ldr	r1, [pc, #224]	@ (8001930 <HAL_GPIO_Init+0x35c>)
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3302      	adds	r3, #2
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800185c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001882:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80018b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	3301      	adds	r3, #1
 8001910:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	f47f ae63 	bne.w	80015e8 <HAL_GPIO_Init+0x14>
  }
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	3724      	adds	r7, #36	@ 0x24
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	58000400 	.word	0x58000400

08001934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
 8001940:	4613      	mov	r3, r2
 8001942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001944:	787b      	ldrb	r3, [r7, #1]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194a:	887a      	ldrh	r2, [r7, #2]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001950:	e003      	b.n	800195a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	041a      	lsls	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	619a      	str	r2, [r3, #24]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001970:	4a08      	ldr	r2, [pc, #32]	@ (8001994 <HAL_HSEM_FastTake+0x2c>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3320      	adds	r3, #32
 8001976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197a:	4a07      	ldr	r2, [pc, #28]	@ (8001998 <HAL_HSEM_FastTake+0x30>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	e000      	b.n	8001986 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	58026400 	.word	0x58026400
 8001998:	80000300 	.word	0x80000300

0800199c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80019a6:	4906      	ldr	r1, [pc, #24]	@ (80019c0 <HAL_HSEM_Release+0x24>)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	58026400 	.word	0x58026400

080019c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e08b      	b.n	8001aee <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7fe ffe0 	bl	80009b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2224      	movs	r2, #36	@ 0x24
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d107      	bne.n	8001a3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	e006      	b.n	8001a4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001a4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d108      	bne.n	8001a66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	e007      	b.n	8001a76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6859      	ldr	r1, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b1d      	ldr	r3, [pc, #116]	@ (8001af8 <HAL_I2C_Init+0x134>)
 8001a82:	430b      	orrs	r3, r1
 8001a84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691a      	ldr	r2, [r3, #16]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69d9      	ldr	r1, [r3, #28]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1a      	ldr	r2, [r3, #32]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0201 	orr.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	02008000 	.word	0x02008000

08001afc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	461a      	mov	r2, r3
 8001b08:	460b      	mov	r3, r1
 8001b0a:	817b      	strh	r3, [r7, #10]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b20      	cmp	r3, #32
 8001b1a:	f040 80fd 	bne.w	8001d18 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_I2C_Master_Transmit+0x30>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e0f6      	b.n	8001d1a <HAL_I2C_Master_Transmit+0x21e>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b34:	f7ff fbb6 	bl	80012a4 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2319      	movs	r3, #25
 8001b40:	2201      	movs	r2, #1
 8001b42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fa0a 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e0e1      	b.n	8001d1a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2221      	movs	r2, #33	@ 0x21
 8001b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2210      	movs	r2, #16
 8001b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	893a      	ldrh	r2, [r7, #8]
 8001b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	2bff      	cmp	r3, #255	@ 0xff
 8001b86:	d906      	bls.n	8001b96 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	22ff      	movs	r2, #255	@ 0xff
 8001b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001b8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	e007      	b.n	8001ba6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001ba0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ba4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d024      	beq.n	8001bf8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	3301      	adds	r3, #1
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	8979      	ldrh	r1, [r7, #10]
 8001bea:	4b4e      	ldr	r3, [pc, #312]	@ (8001d24 <HAL_I2C_Master_Transmit+0x228>)
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 fc05 	bl	8002400 <I2C_TransferConfig>
 8001bf6:	e066      	b.n	8001cc6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	8979      	ldrh	r1, [r7, #10]
 8001c00:	4b48      	ldr	r3, [pc, #288]	@ (8001d24 <HAL_I2C_Master_Transmit+0x228>)
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 fbfa 	bl	8002400 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001c0c:	e05b      	b.n	8001cc6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	6a39      	ldr	r1, [r7, #32]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f9fd 	bl	8002012 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e07b      	b.n	8001d1a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c26:	781a      	ldrb	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d034      	beq.n	8001cc6 <HAL_I2C_Master_Transmit+0x1ca>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d130      	bne.n	8001cc6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2180      	movs	r1, #128	@ 0x80
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 f976 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e04d      	b.n	8001d1a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	2bff      	cmp	r3, #255	@ 0xff
 8001c86:	d90e      	bls.n	8001ca6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	22ff      	movs	r2, #255	@ 0xff
 8001c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	8979      	ldrh	r1, [r7, #10]
 8001c96:	2300      	movs	r3, #0
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 fbae 	bl	8002400 <I2C_TransferConfig>
 8001ca4:	e00f      	b.n	8001cc6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	8979      	ldrh	r1, [r7, #10]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 fb9d 	bl	8002400 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d19e      	bne.n	8001c0e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	6a39      	ldr	r1, [r7, #32]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 f9e3 	bl	80020a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e01a      	b.n	8001d1a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6859      	ldr	r1, [r3, #4]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <HAL_I2C_Master_Transmit+0x22c>)
 8001cf8:	400b      	ands	r3, r1
 8001cfa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e000      	b.n	8001d1a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001d18:	2302      	movs	r3, #2
  }
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	80002000 	.word	0x80002000
 8001d28:	fe00e800 	.word	0xfe00e800

08001d2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	461a      	mov	r2, r3
 8001d38:	460b      	mov	r3, r1
 8001d3a:	817b      	strh	r3, [r7, #10]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b20      	cmp	r3, #32
 8001d4a:	f040 80db 	bne.w	8001f04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_I2C_Master_Receive+0x30>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e0d4      	b.n	8001f06 <HAL_I2C_Master_Receive+0x1da>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d64:	f7ff fa9e 	bl	80012a4 <HAL_GetTick>
 8001d68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2319      	movs	r3, #25
 8001d70:	2201      	movs	r2, #1
 8001d72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 f8f2 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0bf      	b.n	8001f06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2222      	movs	r2, #34	@ 0x22
 8001d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2210      	movs	r2, #16
 8001d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	893a      	ldrh	r2, [r7, #8]
 8001da6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	2bff      	cmp	r3, #255	@ 0xff
 8001db6:	d90e      	bls.n	8001dd6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	22ff      	movs	r2, #255	@ 0xff
 8001dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	8979      	ldrh	r1, [r7, #10]
 8001dc6:	4b52      	ldr	r3, [pc, #328]	@ (8001f10 <HAL_I2C_Master_Receive+0x1e4>)
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 fb16 	bl	8002400 <I2C_TransferConfig>
 8001dd4:	e06d      	b.n	8001eb2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	8979      	ldrh	r1, [r7, #10]
 8001de8:	4b49      	ldr	r3, [pc, #292]	@ (8001f10 <HAL_I2C_Master_Receive+0x1e4>)
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 fb05 	bl	8002400 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001df6:	e05c      	b.n	8001eb2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	6a39      	ldr	r1, [r7, #32]
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 f993 	bl	8002128 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e07c      	b.n	8001f06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d034      	beq.n	8001eb2 <HAL_I2C_Master_Receive+0x186>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d130      	bne.n	8001eb2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	2200      	movs	r2, #0
 8001e58:	2180      	movs	r1, #128	@ 0x80
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 f880 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e04d      	b.n	8001f06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2bff      	cmp	r3, #255	@ 0xff
 8001e72:	d90e      	bls.n	8001e92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	22ff      	movs	r2, #255	@ 0xff
 8001e78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	8979      	ldrh	r1, [r7, #10]
 8001e82:	2300      	movs	r3, #0
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 fab8 	bl	8002400 <I2C_TransferConfig>
 8001e90:	e00f      	b.n	8001eb2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	8979      	ldrh	r1, [r7, #10]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 faa7 	bl	8002400 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d19d      	bne.n	8001df8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	6a39      	ldr	r1, [r7, #32]
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 f8ed 	bl	80020a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e01a      	b.n	8001f06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6859      	ldr	r1, [r3, #4]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <HAL_I2C_Master_Receive+0x1e8>)
 8001ee4:	400b      	ands	r3, r1
 8001ee6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e000      	b.n	8001f06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001f04:	2302      	movs	r3, #2
  }
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	80002400 	.word	0x80002400
 8001f14:	fe00e800 	.word	0xfe00e800

08001f18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d103      	bne.n	8001f36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2200      	movs	r2, #0
 8001f34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d007      	beq.n	8001f54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699a      	ldr	r2, [r3, #24]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	619a      	str	r2, [r3, #24]
  }
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f70:	e03b      	b.n	8001fea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	6839      	ldr	r1, [r7, #0]
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 f962 	bl	8002240 <I2C_IsErrorOccurred>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e041      	b.n	800200a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8c:	d02d      	beq.n	8001fea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f8e:	f7ff f989 	bl	80012a4 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d302      	bcc.n	8001fa4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d122      	bne.n	8001fea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699a      	ldr	r2, [r3, #24]
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	4013      	ands	r3, r2
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d113      	bne.n	8001fea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	f043 0220 	orr.w	r2, r3, #32
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00f      	b.n	800200a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699a      	ldr	r2, [r3, #24]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	bf0c      	ite	eq
 8001ffa:	2301      	moveq	r3, #1
 8001ffc:	2300      	movne	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	429a      	cmp	r2, r3
 8002006:	d0b4      	beq.n	8001f72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b084      	sub	sp, #16
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800201e:	e033      	b.n	8002088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	68b9      	ldr	r1, [r7, #8]
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 f90b 	bl	8002240 <I2C_IsErrorOccurred>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e031      	b.n	8002098 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203a:	d025      	beq.n	8002088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800203c:	f7ff f932 	bl	80012a4 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	429a      	cmp	r2, r3
 800204a:	d302      	bcc.n	8002052 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d11a      	bne.n	8002088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b02      	cmp	r3, #2
 800205e:	d013      	beq.n	8002088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002064:	f043 0220 	orr.w	r2, r3, #32
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e007      	b.n	8002098 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b02      	cmp	r3, #2
 8002094:	d1c4      	bne.n	8002020 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ac:	e02f      	b.n	800210e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f8c4 	bl	8002240 <I2C_IsErrorOccurred>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e02d      	b.n	800211e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c2:	f7ff f8ef 	bl	80012a4 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d302      	bcc.n	80020d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d11a      	bne.n	800210e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	d013      	beq.n	800210e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ea:	f043 0220 	orr.w	r2, r3, #32
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e007      	b.n	800211e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b20      	cmp	r3, #32
 800211a:	d1c8      	bne.n	80020ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002138:	e071      	b.n	800221e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f87e 	bl	8002240 <I2C_IsErrorOccurred>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b20      	cmp	r3, #32
 800215a:	d13b      	bne.n	80021d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d138      	bne.n	80021d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b04      	cmp	r3, #4
 800216e:	d105      	bne.n	800217c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b10      	cmp	r3, #16
 8002188:	d121      	bne.n	80021ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2210      	movs	r2, #16
 8002190:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2204      	movs	r2, #4
 8002196:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2220      	movs	r2, #32
 800219e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6859      	ldr	r1, [r3, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4b24      	ldr	r3, [pc, #144]	@ (800223c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80021ac:	400b      	ands	r3, r1
 80021ae:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	75fb      	strb	r3, [r7, #23]
 80021cc:	e002      	b.n	80021d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80021d4:	f7ff f866 	bl	80012a4 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d302      	bcc.n	80021ea <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d119      	bne.n	800221e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80021ea:	7dfb      	ldrb	r3, [r7, #23]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d116      	bne.n	800221e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d00f      	beq.n	800221e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002202:	f043 0220 	orr.w	r2, r3, #32
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2220      	movs	r2, #32
 800220e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b04      	cmp	r3, #4
 800222a:	d002      	beq.n	8002232 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d083      	beq.n	800213a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002232:	7dfb      	ldrb	r3, [r7, #23]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	fe00e800 	.word	0xfe00e800

08002240 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	@ 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	d068      	beq.n	800233e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2210      	movs	r2, #16
 8002272:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002274:	e049      	b.n	800230a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d045      	beq.n	800230a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800227e:	f7ff f811 	bl	80012a4 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	429a      	cmp	r2, r3
 800228c:	d302      	bcc.n	8002294 <I2C_IsErrorOccurred+0x54>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d13a      	bne.n	800230a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800229e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022b6:	d121      	bne.n	80022fc <I2C_IsErrorOccurred+0xbc>
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022be:	d01d      	beq.n	80022fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80022c0:	7cfb      	ldrb	r3, [r7, #19]
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d01a      	beq.n	80022fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80022d6:	f7fe ffe5 	bl	80012a4 <HAL_GetTick>
 80022da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022dc:	e00e      	b.n	80022fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80022de:	f7fe ffe1 	bl	80012a4 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b19      	cmp	r3, #25
 80022ea:	d907      	bls.n	80022fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	f043 0320 	orr.w	r3, r3, #32
 80022f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80022fa:	e006      	b.n	800230a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b20      	cmp	r3, #32
 8002308:	d1e9      	bne.n	80022de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b20      	cmp	r3, #32
 8002316:	d003      	beq.n	8002320 <I2C_IsErrorOccurred+0xe0>
 8002318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0aa      	beq.n	8002276 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002324:	2b00      	cmp	r3, #0
 8002326:	d103      	bne.n	8002330 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2220      	movs	r2, #32
 800232e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00b      	beq.n	8002368 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002360:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	f043 0308 	orr.w	r3, r3, #8
 8002378:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002382:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00b      	beq.n	80023ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	f043 0302 	orr.w	r3, r3, #2
 800239a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80023ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01c      	beq.n	80023ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f7ff fdaf 	bl	8001f18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b0d      	ldr	r3, [pc, #52]	@ (80023fc <I2C_IsErrorOccurred+0x1bc>)
 80023c6:	400b      	ands	r3, r1
 80023c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80023ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3728      	adds	r7, #40	@ 0x28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	fe00e800 	.word	0xfe00e800

08002400 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	607b      	str	r3, [r7, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	817b      	strh	r3, [r7, #10]
 800240e:	4613      	mov	r3, r2
 8002410:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002412:	897b      	ldrh	r3, [r7, #10]
 8002414:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002418:	7a7b      	ldrb	r3, [r7, #9]
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002420:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	4313      	orrs	r3, r2
 800242a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800242e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	0d5b      	lsrs	r3, r3, #21
 800243a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800243e:	4b08      	ldr	r3, [pc, #32]	@ (8002460 <I2C_TransferConfig+0x60>)
 8002440:	430b      	orrs	r3, r1
 8002442:	43db      	mvns	r3, r3
 8002444:	ea02 0103 	and.w	r1, r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002452:	bf00      	nop
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	03ff63ff 	.word	0x03ff63ff

08002464 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b20      	cmp	r3, #32
 8002478:	d138      	bne.n	80024ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002484:	2302      	movs	r3, #2
 8002486:	e032      	b.n	80024ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2224      	movs	r2, #36	@ 0x24
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6819      	ldr	r1, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e000      	b.n	80024ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024ec:	2302      	movs	r3, #2
  }
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b085      	sub	sp, #20
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b20      	cmp	r3, #32
 800250e:	d139      	bne.n	8002584 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800251a:	2302      	movs	r3, #2
 800251c:	e033      	b.n	8002586 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2224      	movs	r2, #36	@ 0x24
 800252a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0201 	bic.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800254c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	e000      	b.n	8002586 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002584:	2302      	movs	r3, #2
  }
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800259c:	4b29      	ldr	r3, [pc, #164]	@ (8002644 <HAL_PWREx_ConfigSupply+0xb0>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	2b06      	cmp	r3, #6
 80025a6:	d00a      	beq.n	80025be <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025a8:	4b26      	ldr	r3, [pc, #152]	@ (8002644 <HAL_PWREx_ConfigSupply+0xb0>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d001      	beq.n	80025ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e040      	b.n	800263c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e03e      	b.n	800263c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025be:	4b21      	ldr	r3, [pc, #132]	@ (8002644 <HAL_PWREx_ConfigSupply+0xb0>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80025c6:	491f      	ldr	r1, [pc, #124]	@ (8002644 <HAL_PWREx_ConfigSupply+0xb0>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025ce:	f7fe fe69 	bl	80012a4 <HAL_GetTick>
 80025d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025d4:	e009      	b.n	80025ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025d6:	f7fe fe65 	bl	80012a4 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025e4:	d901      	bls.n	80025ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e028      	b.n	800263c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025ea:	4b16      	ldr	r3, [pc, #88]	@ (8002644 <HAL_PWREx_ConfigSupply+0xb0>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025f6:	d1ee      	bne.n	80025d6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b1e      	cmp	r3, #30
 80025fc:	d008      	beq.n	8002610 <HAL_PWREx_ConfigSupply+0x7c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b2e      	cmp	r3, #46	@ 0x2e
 8002602:	d005      	beq.n	8002610 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b1d      	cmp	r3, #29
 8002608:	d002      	beq.n	8002610 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b2d      	cmp	r3, #45	@ 0x2d
 800260e:	d114      	bne.n	800263a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002610:	f7fe fe48 	bl	80012a4 <HAL_GetTick>
 8002614:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002616:	e009      	b.n	800262c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002618:	f7fe fe44 	bl	80012a4 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002626:	d901      	bls.n	800262c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e007      	b.n	800263c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800262c:	4b05      	ldr	r3, [pc, #20]	@ (8002644 <HAL_PWREx_ConfigSupply+0xb0>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002638:	d1ee      	bne.n	8002618 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	58024800 	.word	0x58024800

08002648 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08c      	sub	sp, #48	@ 0x30
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d102      	bne.n	800265c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	f000 bc48 	b.w	8002eec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8088 	beq.w	800277a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800266a:	4b99      	ldr	r3, [pc, #612]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002672:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002674:	4b96      	ldr	r3, [pc, #600]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 8002676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002678:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800267a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800267c:	2b10      	cmp	r3, #16
 800267e:	d007      	beq.n	8002690 <HAL_RCC_OscConfig+0x48>
 8002680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002682:	2b18      	cmp	r3, #24
 8002684:	d111      	bne.n	80026aa <HAL_RCC_OscConfig+0x62>
 8002686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d10c      	bne.n	80026aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	4b8f      	ldr	r3, [pc, #572]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d06d      	beq.n	8002778 <HAL_RCC_OscConfig+0x130>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d169      	bne.n	8002778 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	f000 bc21 	b.w	8002eec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b2:	d106      	bne.n	80026c2 <HAL_RCC_OscConfig+0x7a>
 80026b4:	4b86      	ldr	r3, [pc, #536]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a85      	ldr	r2, [pc, #532]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	e02e      	b.n	8002720 <HAL_RCC_OscConfig+0xd8>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x9c>
 80026ca:	4b81      	ldr	r3, [pc, #516]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a80      	ldr	r2, [pc, #512]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 80026d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b7e      	ldr	r3, [pc, #504]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a7d      	ldr	r2, [pc, #500]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 80026dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e01d      	b.n	8002720 <HAL_RCC_OscConfig+0xd8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0xc0>
 80026ee:	4b78      	ldr	r3, [pc, #480]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a77      	ldr	r2, [pc, #476]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 80026f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b75      	ldr	r3, [pc, #468]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a74      	ldr	r2, [pc, #464]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0xd8>
 8002708:	4b71      	ldr	r3, [pc, #452]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a70      	ldr	r2, [pc, #448]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 800270e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b6e      	ldr	r3, [pc, #440]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a6d      	ldr	r2, [pc, #436]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 800271a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800271e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe fdbc 	bl	80012a4 <HAL_GetTick>
 800272c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002730:	f7fe fdb8 	bl	80012a4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	@ 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e3d4      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002742:	4b63      	ldr	r3, [pc, #396]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0xe8>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe fda8 	bl	80012a4 <HAL_GetTick>
 8002754:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002758:	f7fe fda4 	bl	80012a4 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	@ 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e3c0      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800276a:	4b59      	ldr	r3, [pc, #356]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x110>
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 80ca 	beq.w	800291c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002788:	4b51      	ldr	r3, [pc, #324]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002790:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002792:	4b4f      	ldr	r3, [pc, #316]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 8002794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002796:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d007      	beq.n	80027ae <HAL_RCC_OscConfig+0x166>
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	2b18      	cmp	r3, #24
 80027a2:	d156      	bne.n	8002852 <HAL_RCC_OscConfig+0x20a>
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d151      	bne.n	8002852 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ae:	4b48      	ldr	r3, [pc, #288]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_RCC_OscConfig+0x17e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e392      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027c6:	4b42      	ldr	r3, [pc, #264]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 0219 	bic.w	r2, r3, #25
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	493f      	ldr	r1, [pc, #252]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe fd64 	bl	80012a4 <HAL_GetTick>
 80027dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e0:	f7fe fd60 	bl	80012a4 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e37c      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f2:	4b37      	ldr	r3, [pc, #220]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fe:	f7fe fd81 	bl	8001304 <HAL_GetREVID>
 8002802:	4603      	mov	r3, r0
 8002804:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002808:	4293      	cmp	r3, r2
 800280a:	d817      	bhi.n	800283c <HAL_RCC_OscConfig+0x1f4>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	2b40      	cmp	r3, #64	@ 0x40
 8002812:	d108      	bne.n	8002826 <HAL_RCC_OscConfig+0x1de>
 8002814:	4b2e      	ldr	r3, [pc, #184]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800281c:	4a2c      	ldr	r2, [pc, #176]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 800281e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002822:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002824:	e07a      	b.n	800291c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002826:	4b2a      	ldr	r3, [pc, #168]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	031b      	lsls	r3, r3, #12
 8002834:	4926      	ldr	r1, [pc, #152]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283a:	e06f      	b.n	800291c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b24      	ldr	r3, [pc, #144]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	4921      	ldr	r1, [pc, #132]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002850:	e064      	b.n	800291c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d047      	beq.n	80028ea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800285a:	4b1d      	ldr	r3, [pc, #116]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 0219 	bic.w	r2, r3, #25
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	491a      	ldr	r1, [pc, #104]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 8002868:	4313      	orrs	r3, r2
 800286a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe fd1a 	bl	80012a4 <HAL_GetTick>
 8002870:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002874:	f7fe fd16 	bl	80012a4 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e332      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002886:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	f7fe fd37 	bl	8001304 <HAL_GetREVID>
 8002896:	4603      	mov	r3, r0
 8002898:	f241 0203 	movw	r2, #4099	@ 0x1003
 800289c:	4293      	cmp	r3, r2
 800289e:	d819      	bhi.n	80028d4 <HAL_RCC_OscConfig+0x28c>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b40      	cmp	r3, #64	@ 0x40
 80028a6:	d108      	bne.n	80028ba <HAL_RCC_OscConfig+0x272>
 80028a8:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80028b0:	4a07      	ldr	r2, [pc, #28]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 80028b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028b6:	6053      	str	r3, [r2, #4]
 80028b8:	e030      	b.n	800291c <HAL_RCC_OscConfig+0x2d4>
 80028ba:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	031b      	lsls	r3, r3, #12
 80028c8:	4901      	ldr	r1, [pc, #4]	@ (80028d0 <HAL_RCC_OscConfig+0x288>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
 80028ce:	e025      	b.n	800291c <HAL_RCC_OscConfig+0x2d4>
 80028d0:	58024400 	.word	0x58024400
 80028d4:	4b9a      	ldr	r3, [pc, #616]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	061b      	lsls	r3, r3, #24
 80028e2:	4997      	ldr	r1, [pc, #604]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
 80028e8:	e018      	b.n	800291c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ea:	4b95      	ldr	r3, [pc, #596]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a94      	ldr	r2, [pc, #592]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7fe fcd5 	bl	80012a4 <HAL_GetTick>
 80028fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028fe:	f7fe fcd1 	bl	80012a4 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e2ed      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002910:	4b8b      	ldr	r3, [pc, #556]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80a9 	beq.w	8002a7c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800292a:	4b85      	ldr	r3, [pc, #532]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002932:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002934:	4b82      	ldr	r3, [pc, #520]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002938:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b08      	cmp	r3, #8
 800293e:	d007      	beq.n	8002950 <HAL_RCC_OscConfig+0x308>
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b18      	cmp	r3, #24
 8002944:	d13a      	bne.n	80029bc <HAL_RCC_OscConfig+0x374>
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	2b01      	cmp	r3, #1
 800294e:	d135      	bne.n	80029bc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002950:	4b7b      	ldr	r3, [pc, #492]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_OscConfig+0x320>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	2b80      	cmp	r3, #128	@ 0x80
 8002962:	d001      	beq.n	8002968 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e2c1      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002968:	f7fe fccc 	bl	8001304 <HAL_GetREVID>
 800296c:	4603      	mov	r3, r0
 800296e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002972:	4293      	cmp	r3, r2
 8002974:	d817      	bhi.n	80029a6 <HAL_RCC_OscConfig+0x35e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	2b20      	cmp	r3, #32
 800297c:	d108      	bne.n	8002990 <HAL_RCC_OscConfig+0x348>
 800297e:	4b70      	ldr	r3, [pc, #448]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002986:	4a6e      	ldr	r2, [pc, #440]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002988:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800298c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800298e:	e075      	b.n	8002a7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002990:	4b6b      	ldr	r3, [pc, #428]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	069b      	lsls	r3, r3, #26
 800299e:	4968      	ldr	r1, [pc, #416]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029a4:	e06a      	b.n	8002a7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029a6:	4b66      	ldr	r3, [pc, #408]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	061b      	lsls	r3, r3, #24
 80029b4:	4962      	ldr	r1, [pc, #392]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029ba:	e05f      	b.n	8002a7c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d042      	beq.n	8002a4a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 80029ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7fe fc68 	bl	80012a4 <HAL_GetTick>
 80029d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029d8:	f7fe fc64 	bl	80012a4 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e280      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029ea:	4b55      	ldr	r3, [pc, #340]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029f6:	f7fe fc85 	bl	8001304 <HAL_GetREVID>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d817      	bhi.n	8002a34 <HAL_RCC_OscConfig+0x3ec>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d108      	bne.n	8002a1e <HAL_RCC_OscConfig+0x3d6>
 8002a0c:	4b4c      	ldr	r3, [pc, #304]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a14:	4a4a      	ldr	r2, [pc, #296]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002a16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a1a:	6053      	str	r3, [r2, #4]
 8002a1c:	e02e      	b.n	8002a7c <HAL_RCC_OscConfig+0x434>
 8002a1e:	4b48      	ldr	r3, [pc, #288]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	069b      	lsls	r3, r3, #26
 8002a2c:	4944      	ldr	r1, [pc, #272]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
 8002a32:	e023      	b.n	8002a7c <HAL_RCC_OscConfig+0x434>
 8002a34:	4b42      	ldr	r3, [pc, #264]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	061b      	lsls	r3, r3, #24
 8002a42:	493f      	ldr	r1, [pc, #252]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60cb      	str	r3, [r1, #12]
 8002a48:	e018      	b.n	8002a7c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a3c      	ldr	r2, [pc, #240]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002a50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a56:	f7fe fc25 	bl	80012a4 <HAL_GetTick>
 8002a5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a5e:	f7fe fc21 	bl	80012a4 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e23d      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a70:	4b33      	ldr	r3, [pc, #204]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f0      	bne.n	8002a5e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d036      	beq.n	8002af6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d019      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a90:	4b2b      	ldr	r3, [pc, #172]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a94:	4a2a      	ldr	r2, [pc, #168]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7fe fc02 	bl	80012a4 <HAL_GetTick>
 8002aa0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa4:	f7fe fbfe 	bl	80012a4 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e21a      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ab6:	4b22      	ldr	r3, [pc, #136]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x45c>
 8002ac2:	e018      	b.n	8002af6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad0:	f7fe fbe8 	bl	80012a4 <HAL_GetTick>
 8002ad4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad8:	f7fe fbe4 	bl	80012a4 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e200      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aea:	4b15      	ldr	r3, [pc, #84]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d039      	beq.n	8002b76 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d01c      	beq.n	8002b44 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002b10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b16:	f7fe fbc5 	bl	80012a4 <HAL_GetTick>
 8002b1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b1e:	f7fe fbc1 	bl	80012a4 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e1dd      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b30:	4b03      	ldr	r3, [pc, #12]	@ (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x4d6>
 8002b3c:	e01b      	b.n	8002b76 <HAL_RCC_OscConfig+0x52e>
 8002b3e:	bf00      	nop
 8002b40:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b44:	4b9b      	ldr	r3, [pc, #620]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a9a      	ldr	r2, [pc, #616]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002b4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b50:	f7fe fba8 	bl	80012a4 <HAL_GetTick>
 8002b54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b58:	f7fe fba4 	bl	80012a4 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e1c0      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b6a:	4b92      	ldr	r3, [pc, #584]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 8081 	beq.w	8002c86 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b84:	4b8c      	ldr	r3, [pc, #560]	@ (8002db8 <HAL_RCC_OscConfig+0x770>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a8b      	ldr	r2, [pc, #556]	@ (8002db8 <HAL_RCC_OscConfig+0x770>)
 8002b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b90:	f7fe fb88 	bl	80012a4 <HAL_GetTick>
 8002b94:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b98:	f7fe fb84 	bl	80012a4 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	@ 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e1a0      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002baa:	4b83      	ldr	r3, [pc, #524]	@ (8002db8 <HAL_RCC_OscConfig+0x770>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d106      	bne.n	8002bcc <HAL_RCC_OscConfig+0x584>
 8002bbe:	4b7d      	ldr	r3, [pc, #500]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc2:	4a7c      	ldr	r2, [pc, #496]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bca:	e02d      	b.n	8002c28 <HAL_RCC_OscConfig+0x5e0>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10c      	bne.n	8002bee <HAL_RCC_OscConfig+0x5a6>
 8002bd4:	4b77      	ldr	r3, [pc, #476]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd8:	4a76      	ldr	r2, [pc, #472]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002bda:	f023 0301 	bic.w	r3, r3, #1
 8002bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be0:	4b74      	ldr	r3, [pc, #464]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be4:	4a73      	ldr	r2, [pc, #460]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002be6:	f023 0304 	bic.w	r3, r3, #4
 8002bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bec:	e01c      	b.n	8002c28 <HAL_RCC_OscConfig+0x5e0>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b05      	cmp	r3, #5
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x5c8>
 8002bf6:	4b6f      	ldr	r3, [pc, #444]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfa:	4a6e      	ldr	r2, [pc, #440]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c02:	4b6c      	ldr	r3, [pc, #432]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c06:	4a6b      	ldr	r2, [pc, #428]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCC_OscConfig+0x5e0>
 8002c10:	4b68      	ldr	r3, [pc, #416]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c14:	4a67      	ldr	r2, [pc, #412]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c1c:	4b65      	ldr	r3, [pc, #404]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c20:	4a64      	ldr	r2, [pc, #400]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002c22:	f023 0304 	bic.w	r3, r3, #4
 8002c26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d015      	beq.n	8002c5c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c30:	f7fe fb38 	bl	80012a4 <HAL_GetTick>
 8002c34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c38:	f7fe fb34 	bl	80012a4 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e14e      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c4e:	4b59      	ldr	r3, [pc, #356]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0ee      	beq.n	8002c38 <HAL_RCC_OscConfig+0x5f0>
 8002c5a:	e014      	b.n	8002c86 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5c:	f7fe fb22 	bl	80012a4 <HAL_GetTick>
 8002c60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c64:	f7fe fb1e 	bl	80012a4 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e138      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c7a:	4b4e      	ldr	r3, [pc, #312]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1ee      	bne.n	8002c64 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 812d 	beq.w	8002eea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c90:	4b48      	ldr	r3, [pc, #288]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c98:	2b18      	cmp	r3, #24
 8002c9a:	f000 80bd 	beq.w	8002e18 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	f040 809e 	bne.w	8002de4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca8:	4b42      	ldr	r3, [pc, #264]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a41      	ldr	r2, [pc, #260]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002cae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe faf6 	bl	80012a4 <HAL_GetTick>
 8002cb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe faf2 	bl	80012a4 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e10e      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cce:	4b39      	ldr	r3, [pc, #228]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cda:	4b36      	ldr	r3, [pc, #216]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002cdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cde:	4b37      	ldr	r3, [pc, #220]	@ (8002dbc <HAL_RCC_OscConfig+0x774>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	430a      	orrs	r2, r1
 8002cee:	4931      	ldr	r1, [pc, #196]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	628b      	str	r3, [r1, #40]	@ 0x28
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d02:	3b01      	subs	r3, #1
 8002d04:	025b      	lsls	r3, r3, #9
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	041b      	lsls	r3, r3, #16
 8002d12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	061b      	lsls	r3, r3, #24
 8002d20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002d24:	4923      	ldr	r1, [pc, #140]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d2a:	4b22      	ldr	r3, [pc, #136]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2e:	4a21      	ldr	r2, [pc, #132]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d36:	4b1f      	ldr	r3, [pc, #124]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002d38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d3a:	4b21      	ldr	r3, [pc, #132]	@ (8002dc0 <HAL_RCC_OscConfig+0x778>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d42:	00d2      	lsls	r2, r2, #3
 8002d44:	491b      	ldr	r1, [pc, #108]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4e:	f023 020c 	bic.w	r2, r3, #12
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	4917      	ldr	r1, [pc, #92]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d5c:	4b15      	ldr	r3, [pc, #84]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d60:	f023 0202 	bic.w	r2, r3, #2
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d68:	4912      	ldr	r1, [pc, #72]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d6e:	4b11      	ldr	r3, [pc, #68]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d72:	4a10      	ldr	r2, [pc, #64]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d86:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d92:	4b08      	ldr	r3, [pc, #32]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d96:	4a07      	ldr	r2, [pc, #28]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d9e:	4b05      	ldr	r3, [pc, #20]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a04      	ldr	r2, [pc, #16]	@ (8002db4 <HAL_RCC_OscConfig+0x76c>)
 8002da4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fe fa7b 	bl	80012a4 <HAL_GetTick>
 8002dae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002db0:	e011      	b.n	8002dd6 <HAL_RCC_OscConfig+0x78e>
 8002db2:	bf00      	nop
 8002db4:	58024400 	.word	0x58024400
 8002db8:	58024800 	.word	0x58024800
 8002dbc:	fffffc0c 	.word	0xfffffc0c
 8002dc0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fe fa6e 	bl	80012a4 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e08a      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dd6:	4b47      	ldr	r3, [pc, #284]	@ (8002ef4 <HAL_RCC_OscConfig+0x8ac>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x77c>
 8002de2:	e082      	b.n	8002eea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de4:	4b43      	ldr	r3, [pc, #268]	@ (8002ef4 <HAL_RCC_OscConfig+0x8ac>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a42      	ldr	r2, [pc, #264]	@ (8002ef4 <HAL_RCC_OscConfig+0x8ac>)
 8002dea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df0:	f7fe fa58 	bl	80012a4 <HAL_GetTick>
 8002df4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe fa54 	bl	80012a4 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e070      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e0a:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef4 <HAL_RCC_OscConfig+0x8ac>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x7b0>
 8002e16:	e068      	b.n	8002eea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e18:	4b36      	ldr	r3, [pc, #216]	@ (8002ef4 <HAL_RCC_OscConfig+0x8ac>)
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e1e:	4b35      	ldr	r3, [pc, #212]	@ (8002ef4 <HAL_RCC_OscConfig+0x8ac>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d031      	beq.n	8002e90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f003 0203 	and.w	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d12a      	bne.n	8002e90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d122      	bne.n	8002e90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e54:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d11a      	bne.n	8002e90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	0a5b      	lsrs	r3, r3, #9
 8002e5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d111      	bne.n	8002e90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	0c1b      	lsrs	r3, r3, #16
 8002e70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d108      	bne.n	8002e90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	0e1b      	lsrs	r3, r3, #24
 8002e82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e02b      	b.n	8002eec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e94:	4b17      	ldr	r3, [pc, #92]	@ (8002ef4 <HAL_RCC_OscConfig+0x8ac>)
 8002e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e98:	08db      	lsrs	r3, r3, #3
 8002e9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e9e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d01f      	beq.n	8002eea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002eaa:	4b12      	ldr	r3, [pc, #72]	@ (8002ef4 <HAL_RCC_OscConfig+0x8ac>)
 8002eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eae:	4a11      	ldr	r2, [pc, #68]	@ (8002ef4 <HAL_RCC_OscConfig+0x8ac>)
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eb6:	f7fe f9f5 	bl	80012a4 <HAL_GetTick>
 8002eba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ebc:	bf00      	nop
 8002ebe:	f7fe f9f1 	bl	80012a4 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d0f9      	beq.n	8002ebe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002eca:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef4 <HAL_RCC_OscConfig+0x8ac>)
 8002ecc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ece:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <HAL_RCC_OscConfig+0x8b0>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ed6:	00d2      	lsls	r2, r2, #3
 8002ed8:	4906      	ldr	r1, [pc, #24]	@ (8002ef4 <HAL_RCC_OscConfig+0x8ac>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ede:	4b05      	ldr	r3, [pc, #20]	@ (8002ef4 <HAL_RCC_OscConfig+0x8ac>)
 8002ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee2:	4a04      	ldr	r2, [pc, #16]	@ (8002ef4 <HAL_RCC_OscConfig+0x8ac>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3730      	adds	r7, #48	@ 0x30
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	58024400 	.word	0x58024400
 8002ef8:	ffff0007 	.word	0xffff0007

08002efc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e19c      	b.n	800324a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f10:	4b8a      	ldr	r3, [pc, #552]	@ (800313c <HAL_RCC_ClockConfig+0x240>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d910      	bls.n	8002f40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1e:	4b87      	ldr	r3, [pc, #540]	@ (800313c <HAL_RCC_ClockConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 020f 	bic.w	r2, r3, #15
 8002f26:	4985      	ldr	r1, [pc, #532]	@ (800313c <HAL_RCC_ClockConfig+0x240>)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b83      	ldr	r3, [pc, #524]	@ (800313c <HAL_RCC_ClockConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e184      	b.n	800324a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d010      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	4b7b      	ldr	r3, [pc, #492]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d908      	bls.n	8002f6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f5c:	4b78      	ldr	r3, [pc, #480]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	4975      	ldr	r1, [pc, #468]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d010      	beq.n	8002f9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	4b70      	ldr	r3, [pc, #448]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d908      	bls.n	8002f9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f8a:	4b6d      	ldr	r3, [pc, #436]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	496a      	ldr	r1, [pc, #424]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d010      	beq.n	8002fca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699a      	ldr	r2, [r3, #24]
 8002fac:	4b64      	ldr	r3, [pc, #400]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d908      	bls.n	8002fca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fb8:	4b61      	ldr	r3, [pc, #388]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	495e      	ldr	r1, [pc, #376]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d010      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69da      	ldr	r2, [r3, #28]
 8002fda:	4b59      	ldr	r3, [pc, #356]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d908      	bls.n	8002ff8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fe6:	4b56      	ldr	r3, [pc, #344]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	4953      	ldr	r1, [pc, #332]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d010      	beq.n	8003026 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	4b4d      	ldr	r3, [pc, #308]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	429a      	cmp	r2, r3
 8003012:	d908      	bls.n	8003026 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003014:	4b4a      	ldr	r3, [pc, #296]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f023 020f 	bic.w	r2, r3, #15
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4947      	ldr	r1, [pc, #284]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 8003022:	4313      	orrs	r3, r2
 8003024:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d055      	beq.n	80030de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003032:	4b43      	ldr	r3, [pc, #268]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	4940      	ldr	r1, [pc, #256]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 8003040:	4313      	orrs	r3, r2
 8003042:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b02      	cmp	r3, #2
 800304a:	d107      	bne.n	800305c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800304c:	4b3c      	ldr	r3, [pc, #240]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d121      	bne.n	800309c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0f6      	b.n	800324a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b03      	cmp	r3, #3
 8003062:	d107      	bne.n	8003074 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003064:	4b36      	ldr	r3, [pc, #216]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d115      	bne.n	800309c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0ea      	b.n	800324a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d107      	bne.n	800308c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800307c:	4b30      	ldr	r3, [pc, #192]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003084:	2b00      	cmp	r3, #0
 8003086:	d109      	bne.n	800309c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0de      	b.n	800324a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800308c:	4b2c      	ldr	r3, [pc, #176]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0d6      	b.n	800324a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800309c:	4b28      	ldr	r3, [pc, #160]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	f023 0207 	bic.w	r2, r3, #7
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4925      	ldr	r1, [pc, #148]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ae:	f7fe f8f9 	bl	80012a4 <HAL_GetTick>
 80030b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b4:	e00a      	b.n	80030cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b6:	f7fe f8f5 	bl	80012a4 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e0be      	b.n	800324a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	429a      	cmp	r2, r3
 80030dc:	d1eb      	bne.n	80030b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d010      	beq.n	800310c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	4b14      	ldr	r3, [pc, #80]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d208      	bcs.n	800310c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fa:	4b11      	ldr	r3, [pc, #68]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f023 020f 	bic.w	r2, r3, #15
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	490e      	ldr	r1, [pc, #56]	@ (8003140 <HAL_RCC_ClockConfig+0x244>)
 8003108:	4313      	orrs	r3, r2
 800310a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800310c:	4b0b      	ldr	r3, [pc, #44]	@ (800313c <HAL_RCC_ClockConfig+0x240>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d214      	bcs.n	8003144 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b08      	ldr	r3, [pc, #32]	@ (800313c <HAL_RCC_ClockConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 020f 	bic.w	r2, r3, #15
 8003122:	4906      	ldr	r1, [pc, #24]	@ (800313c <HAL_RCC_ClockConfig+0x240>)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	4b04      	ldr	r3, [pc, #16]	@ (800313c <HAL_RCC_ClockConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d005      	beq.n	8003144 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e086      	b.n	800324a <HAL_RCC_ClockConfig+0x34e>
 800313c:	52002000 	.word	0x52002000
 8003140:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d010      	beq.n	8003172 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	4b3f      	ldr	r3, [pc, #252]	@ (8003254 <HAL_RCC_ClockConfig+0x358>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800315c:	429a      	cmp	r2, r3
 800315e:	d208      	bcs.n	8003172 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003160:	4b3c      	ldr	r3, [pc, #240]	@ (8003254 <HAL_RCC_ClockConfig+0x358>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	4939      	ldr	r1, [pc, #228]	@ (8003254 <HAL_RCC_ClockConfig+0x358>)
 800316e:	4313      	orrs	r3, r2
 8003170:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d010      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	4b34      	ldr	r3, [pc, #208]	@ (8003254 <HAL_RCC_ClockConfig+0x358>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800318a:	429a      	cmp	r2, r3
 800318c:	d208      	bcs.n	80031a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800318e:	4b31      	ldr	r3, [pc, #196]	@ (8003254 <HAL_RCC_ClockConfig+0x358>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	492e      	ldr	r1, [pc, #184]	@ (8003254 <HAL_RCC_ClockConfig+0x358>)
 800319c:	4313      	orrs	r3, r2
 800319e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d010      	beq.n	80031ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699a      	ldr	r2, [r3, #24]
 80031b0:	4b28      	ldr	r3, [pc, #160]	@ (8003254 <HAL_RCC_ClockConfig+0x358>)
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d208      	bcs.n	80031ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031bc:	4b25      	ldr	r3, [pc, #148]	@ (8003254 <HAL_RCC_ClockConfig+0x358>)
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	4922      	ldr	r1, [pc, #136]	@ (8003254 <HAL_RCC_ClockConfig+0x358>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d010      	beq.n	80031fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69da      	ldr	r2, [r3, #28]
 80031de:	4b1d      	ldr	r3, [pc, #116]	@ (8003254 <HAL_RCC_ClockConfig+0x358>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d208      	bcs.n	80031fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003254 <HAL_RCC_ClockConfig+0x358>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	4917      	ldr	r1, [pc, #92]	@ (8003254 <HAL_RCC_ClockConfig+0x358>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031fc:	f000 f834 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b14      	ldr	r3, [pc, #80]	@ (8003254 <HAL_RCC_ClockConfig+0x358>)
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	4912      	ldr	r1, [pc, #72]	@ (8003258 <HAL_RCC_ClockConfig+0x35c>)
 800320e:	5ccb      	ldrb	r3, [r1, r3]
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
 8003218:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800321a:	4b0e      	ldr	r3, [pc, #56]	@ (8003254 <HAL_RCC_ClockConfig+0x358>)
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	4a0d      	ldr	r2, [pc, #52]	@ (8003258 <HAL_RCC_ClockConfig+0x35c>)
 8003224:	5cd3      	ldrb	r3, [r2, r3]
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
 8003230:	4a0a      	ldr	r2, [pc, #40]	@ (800325c <HAL_RCC_ClockConfig+0x360>)
 8003232:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003234:	4a0a      	ldr	r2, [pc, #40]	@ (8003260 <HAL_RCC_ClockConfig+0x364>)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800323a:	4b0a      	ldr	r3, [pc, #40]	@ (8003264 <HAL_RCC_ClockConfig+0x368>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7fd ffe6 	bl	8001210 <HAL_InitTick>
 8003244:	4603      	mov	r3, r0
 8003246:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	58024400 	.word	0x58024400
 8003258:	0800c4d8 	.word	0x0800c4d8
 800325c:	24000004 	.word	0x24000004
 8003260:	24000000 	.word	0x24000000
 8003264:	2400000c 	.word	0x2400000c

08003268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003268:	b480      	push	{r7}
 800326a:	b089      	sub	sp, #36	@ 0x24
 800326c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800326e:	4bb3      	ldr	r3, [pc, #716]	@ (800353c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003276:	2b18      	cmp	r3, #24
 8003278:	f200 8155 	bhi.w	8003526 <HAL_RCC_GetSysClockFreq+0x2be>
 800327c:	a201      	add	r2, pc, #4	@ (adr r2, 8003284 <HAL_RCC_GetSysClockFreq+0x1c>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	080032e9 	.word	0x080032e9
 8003288:	08003527 	.word	0x08003527
 800328c:	08003527 	.word	0x08003527
 8003290:	08003527 	.word	0x08003527
 8003294:	08003527 	.word	0x08003527
 8003298:	08003527 	.word	0x08003527
 800329c:	08003527 	.word	0x08003527
 80032a0:	08003527 	.word	0x08003527
 80032a4:	0800330f 	.word	0x0800330f
 80032a8:	08003527 	.word	0x08003527
 80032ac:	08003527 	.word	0x08003527
 80032b0:	08003527 	.word	0x08003527
 80032b4:	08003527 	.word	0x08003527
 80032b8:	08003527 	.word	0x08003527
 80032bc:	08003527 	.word	0x08003527
 80032c0:	08003527 	.word	0x08003527
 80032c4:	08003315 	.word	0x08003315
 80032c8:	08003527 	.word	0x08003527
 80032cc:	08003527 	.word	0x08003527
 80032d0:	08003527 	.word	0x08003527
 80032d4:	08003527 	.word	0x08003527
 80032d8:	08003527 	.word	0x08003527
 80032dc:	08003527 	.word	0x08003527
 80032e0:	08003527 	.word	0x08003527
 80032e4:	0800331b 	.word	0x0800331b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032e8:	4b94      	ldr	r3, [pc, #592]	@ (800353c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d009      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032f4:	4b91      	ldr	r3, [pc, #580]	@ (800353c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	08db      	lsrs	r3, r3, #3
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	4a90      	ldr	r2, [pc, #576]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
 8003304:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003306:	e111      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003308:	4b8d      	ldr	r3, [pc, #564]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800330a:	61bb      	str	r3, [r7, #24]
      break;
 800330c:	e10e      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800330e:	4b8d      	ldr	r3, [pc, #564]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003310:	61bb      	str	r3, [r7, #24]
      break;
 8003312:	e10b      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003314:	4b8c      	ldr	r3, [pc, #560]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003316:	61bb      	str	r3, [r7, #24]
      break;
 8003318:	e108      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800331a:	4b88      	ldr	r3, [pc, #544]	@ (800353c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800331c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003324:	4b85      	ldr	r3, [pc, #532]	@ (800353c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800332e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003330:	4b82      	ldr	r3, [pc, #520]	@ (800353c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800333a:	4b80      	ldr	r3, [pc, #512]	@ (800353c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800333e:	08db      	lsrs	r3, r3, #3
 8003340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	fb02 f303 	mul.w	r3, r2, r3
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003352:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80e1 	beq.w	8003520 <HAL_RCC_GetSysClockFreq+0x2b8>
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2b02      	cmp	r3, #2
 8003362:	f000 8083 	beq.w	800346c <HAL_RCC_GetSysClockFreq+0x204>
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b02      	cmp	r3, #2
 800336a:	f200 80a1 	bhi.w	80034b0 <HAL_RCC_GetSysClockFreq+0x248>
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x114>
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d056      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x1c0>
 800337a:	e099      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800337c:	4b6f      	ldr	r3, [pc, #444]	@ (800353c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d02d      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003388:	4b6c      	ldr	r3, [pc, #432]	@ (800353c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	08db      	lsrs	r3, r3, #3
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	4a6b      	ldr	r2, [pc, #428]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
 8003398:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	ee07 3a90 	vmov	s15, r3
 80033a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	ee07 3a90 	vmov	s15, r3
 80033aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033b2:	4b62      	ldr	r3, [pc, #392]	@ (800353c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800354c <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80033e2:	e087      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003550 <HAL_RCC_GetSysClockFreq+0x2e8>
 80033f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f6:	4b51      	ldr	r3, [pc, #324]	@ (800353c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003406:	ed97 6a02 	vldr	s12, [r7, #8]
 800340a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800354c <HAL_RCC_GetSysClockFreq+0x2e4>
 800340e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800341a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800341e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003422:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003426:	e065      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003432:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003554 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800343a:	4b40      	ldr	r3, [pc, #256]	@ (800353c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003442:	ee07 3a90 	vmov	s15, r3
 8003446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800344a:	ed97 6a02 	vldr	s12, [r7, #8]
 800344e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800354c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800345a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800345e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003466:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800346a:	e043      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003476:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003558 <HAL_RCC_GetSysClockFreq+0x2f0>
 800347a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800347e:	4b2f      	ldr	r3, [pc, #188]	@ (800353c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003486:	ee07 3a90 	vmov	s15, r3
 800348a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800348e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003492:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800354c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800349a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800349e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034ae:	e021      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003554 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034c2:	4b1e      	ldr	r3, [pc, #120]	@ (800353c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800354c <HAL_RCC_GetSysClockFreq+0x2e4>
 80034da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80034f4:	4b11      	ldr	r3, [pc, #68]	@ (800353c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f8:	0a5b      	lsrs	r3, r3, #9
 80034fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034fe:	3301      	adds	r3, #1
 8003500:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	ee07 3a90 	vmov	s15, r3
 8003508:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800350c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003518:	ee17 3a90 	vmov	r3, s15
 800351c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800351e:	e005      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	61bb      	str	r3, [r7, #24]
      break;
 8003524:	e002      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003526:	4b07      	ldr	r3, [pc, #28]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003528:	61bb      	str	r3, [r7, #24]
      break;
 800352a:	bf00      	nop
  }

  return sysclockfreq;
 800352c:	69bb      	ldr	r3, [r7, #24]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3724      	adds	r7, #36	@ 0x24
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	58024400 	.word	0x58024400
 8003540:	03d09000 	.word	0x03d09000
 8003544:	003d0900 	.word	0x003d0900
 8003548:	017d7840 	.word	0x017d7840
 800354c:	46000000 	.word	0x46000000
 8003550:	4c742400 	.word	0x4c742400
 8003554:	4a742400 	.word	0x4a742400
 8003558:	4bbebc20 	.word	0x4bbebc20

0800355c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003562:	f7ff fe81 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 8003566:	4602      	mov	r2, r0
 8003568:	4b10      	ldr	r3, [pc, #64]	@ (80035ac <HAL_RCC_GetHCLKFreq+0x50>)
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	0a1b      	lsrs	r3, r3, #8
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	490f      	ldr	r1, [pc, #60]	@ (80035b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003574:	5ccb      	ldrb	r3, [r1, r3]
 8003576:	f003 031f 	and.w	r3, r3, #31
 800357a:	fa22 f303 	lsr.w	r3, r2, r3
 800357e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003580:	4b0a      	ldr	r3, [pc, #40]	@ (80035ac <HAL_RCC_GetHCLKFreq+0x50>)
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	4a09      	ldr	r2, [pc, #36]	@ (80035b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800358a:	5cd3      	ldrb	r3, [r2, r3]
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	fa22 f303 	lsr.w	r3, r2, r3
 8003596:	4a07      	ldr	r2, [pc, #28]	@ (80035b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003598:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800359a:	4a07      	ldr	r2, [pc, #28]	@ (80035b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035a0:	4b04      	ldr	r3, [pc, #16]	@ (80035b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80035a2:	681b      	ldr	r3, [r3, #0]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	58024400 	.word	0x58024400
 80035b0:	0800c4d8 	.word	0x0800c4d8
 80035b4:	24000004 	.word	0x24000004
 80035b8:	24000000 	.word	0x24000000

080035bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80035c0:	f7ff ffcc 	bl	800355c <HAL_RCC_GetHCLKFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4904      	ldr	r1, [pc, #16]	@ (80035e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80035dc:	4618      	mov	r0, r3
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	58024400 	.word	0x58024400
 80035e4:	0800c4d8 	.word	0x0800c4d8

080035e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80035ec:	f7ff ffb6 	bl	800355c <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b06      	ldr	r3, [pc, #24]	@ (800360c <HAL_RCC_GetPCLK2Freq+0x24>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4904      	ldr	r1, [pc, #16]	@ (8003610 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003608:	4618      	mov	r0, r3
 800360a:	bd80      	pop	{r7, pc}
 800360c:	58024400 	.word	0x58024400
 8003610:	0800c4d8 	.word	0x0800c4d8

08003614 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003618:	b0ca      	sub	sp, #296	@ 0x128
 800361a:	af00      	add	r7, sp, #0
 800361c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003620:	2300      	movs	r3, #0
 8003622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003626:	2300      	movs	r3, #0
 8003628:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800362c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003634:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003638:	2500      	movs	r5, #0
 800363a:	ea54 0305 	orrs.w	r3, r4, r5
 800363e:	d049      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003644:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003646:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800364a:	d02f      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800364c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003650:	d828      	bhi.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003652:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003656:	d01a      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003658:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800365c:	d822      	bhi.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003662:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003666:	d007      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003668:	e01c      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800366a:	4bb8      	ldr	r3, [pc, #736]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800366c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366e:	4ab7      	ldr	r2, [pc, #732]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003674:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003676:	e01a      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367c:	3308      	adds	r3, #8
 800367e:	2102      	movs	r1, #2
 8003680:	4618      	mov	r0, r3
 8003682:	f001 fc8f 	bl	8004fa4 <RCCEx_PLL2_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800368c:	e00f      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800368e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003692:	3328      	adds	r3, #40	@ 0x28
 8003694:	2102      	movs	r1, #2
 8003696:	4618      	mov	r0, r3
 8003698:	f001 fd36 	bl	8005108 <RCCEx_PLL3_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036a2:	e004      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036aa:	e000      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80036ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10a      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036b6:	4ba5      	ldr	r3, [pc, #660]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80036be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036c4:	4aa1      	ldr	r2, [pc, #644]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036c6:	430b      	orrs	r3, r1
 80036c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80036ca:	e003      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80036e0:	f04f 0900 	mov.w	r9, #0
 80036e4:	ea58 0309 	orrs.w	r3, r8, r9
 80036e8:	d047      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80036ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d82a      	bhi.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80036f4:	a201      	add	r2, pc, #4	@ (adr r2, 80036fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	08003711 	.word	0x08003711
 8003700:	0800371f 	.word	0x0800371f
 8003704:	08003735 	.word	0x08003735
 8003708:	08003753 	.word	0x08003753
 800370c:	08003753 	.word	0x08003753
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003710:	4b8e      	ldr	r3, [pc, #568]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003714:	4a8d      	ldr	r2, [pc, #564]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800371a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800371c:	e01a      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800371e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003722:	3308      	adds	r3, #8
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f001 fc3c 	bl	8004fa4 <RCCEx_PLL2_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003732:	e00f      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003738:	3328      	adds	r3, #40	@ 0x28
 800373a:	2100      	movs	r1, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f001 fce3 	bl	8005108 <RCCEx_PLL3_Config>
 8003742:	4603      	mov	r3, r0
 8003744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003748:	e004      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003750:	e000      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800375c:	4b7b      	ldr	r3, [pc, #492]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800375e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003760:	f023 0107 	bic.w	r1, r3, #7
 8003764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376a:	4a78      	ldr	r2, [pc, #480]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800376c:	430b      	orrs	r3, r1
 800376e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003770:	e003      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003776:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800377a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003782:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003786:	f04f 0b00 	mov.w	fp, #0
 800378a:	ea5a 030b 	orrs.w	r3, sl, fp
 800378e:	d04c      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800379a:	d030      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800379c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037a0:	d829      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80037a4:	d02d      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80037a8:	d825      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037aa:	2b80      	cmp	r3, #128	@ 0x80
 80037ac:	d018      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80037ae:	2b80      	cmp	r3, #128	@ 0x80
 80037b0:	d821      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80037b6:	2b40      	cmp	r3, #64	@ 0x40
 80037b8:	d007      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80037ba:	e01c      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037bc:	4b63      	ldr	r3, [pc, #396]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c0:	4a62      	ldr	r2, [pc, #392]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037c8:	e01c      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ce:	3308      	adds	r3, #8
 80037d0:	2100      	movs	r1, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f001 fbe6 	bl	8004fa4 <RCCEx_PLL2_Config>
 80037d8:	4603      	mov	r3, r0
 80037da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037de:	e011      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e4:	3328      	adds	r3, #40	@ 0x28
 80037e6:	2100      	movs	r1, #0
 80037e8:	4618      	mov	r0, r3
 80037ea:	f001 fc8d 	bl	8005108 <RCCEx_PLL3_Config>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037f4:	e006      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037fc:	e002      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037fe:	bf00      	nop
 8003800:	e000      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10a      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800380c:	4b4f      	ldr	r3, [pc, #316]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800380e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003810:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381a:	4a4c      	ldr	r2, [pc, #304]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800381c:	430b      	orrs	r3, r1
 800381e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003820:	e003      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800382a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003836:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800383a:	2300      	movs	r3, #0
 800383c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003840:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003844:	460b      	mov	r3, r1
 8003846:	4313      	orrs	r3, r2
 8003848:	d053      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003852:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003856:	d035      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003858:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800385c:	d82e      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800385e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003862:	d031      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003864:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003868:	d828      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800386a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800386e:	d01a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003870:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003874:	d822      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800387a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800387e:	d007      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003880:	e01c      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003882:	4b32      	ldr	r3, [pc, #200]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003886:	4a31      	ldr	r2, [pc, #196]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800388c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800388e:	e01c      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003894:	3308      	adds	r3, #8
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f001 fb83 	bl	8004fa4 <RCCEx_PLL2_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038a4:	e011      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038aa:	3328      	adds	r3, #40	@ 0x28
 80038ac:	2100      	movs	r1, #0
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 fc2a 	bl	8005108 <RCCEx_PLL3_Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038ba:	e006      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038c2:	e002      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038c4:	bf00      	nop
 80038c6:	e000      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10b      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038d2:	4b1e      	ldr	r3, [pc, #120]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80038e2:	4a1a      	ldr	r2, [pc, #104]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80038e8:	e003      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80038fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003902:	2300      	movs	r3, #0
 8003904:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003908:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800390c:	460b      	mov	r3, r1
 800390e:	4313      	orrs	r3, r2
 8003910:	d056      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003916:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800391a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800391e:	d038      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003920:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003924:	d831      	bhi.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003926:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800392a:	d034      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800392c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003930:	d82b      	bhi.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003932:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003936:	d01d      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003938:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800393c:	d825      	bhi.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d006      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003942:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003948:	e01f      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800394a:	bf00      	nop
 800394c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003950:	4ba2      	ldr	r3, [pc, #648]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003954:	4aa1      	ldr	r2, [pc, #644]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800395a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800395c:	e01c      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800395e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003962:	3308      	adds	r3, #8
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f001 fb1c 	bl	8004fa4 <RCCEx_PLL2_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003972:	e011      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003978:	3328      	adds	r3, #40	@ 0x28
 800397a:	2100      	movs	r1, #0
 800397c:	4618      	mov	r0, r3
 800397e:	f001 fbc3 	bl	8005108 <RCCEx_PLL3_Config>
 8003982:	4603      	mov	r3, r0
 8003984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003988:	e006      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003990:	e002      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003992:	bf00      	nop
 8003994:	e000      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10b      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80039a0:	4b8e      	ldr	r3, [pc, #568]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80039a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80039b0:	4a8a      	ldr	r2, [pc, #552]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039b2:	430b      	orrs	r3, r1
 80039b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80039b6:	e003      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80039cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80039d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80039da:	460b      	mov	r3, r1
 80039dc:	4313      	orrs	r3, r2
 80039de:	d03a      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80039e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e6:	2b30      	cmp	r3, #48	@ 0x30
 80039e8:	d01f      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80039ea:	2b30      	cmp	r3, #48	@ 0x30
 80039ec:	d819      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d00c      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d815      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d019      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80039fa:	2b10      	cmp	r3, #16
 80039fc:	d111      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039fe:	4b77      	ldr	r3, [pc, #476]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a02:	4a76      	ldr	r2, [pc, #472]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a0a:	e011      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a10:	3308      	adds	r3, #8
 8003a12:	2102      	movs	r1, #2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f001 fac5 	bl	8004fa4 <RCCEx_PLL2_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a20:	e006      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a28:	e002      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a2a:	bf00      	nop
 8003a2c:	e000      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10a      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a38:	4b68      	ldr	r3, [pc, #416]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a46:	4a65      	ldr	r2, [pc, #404]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a4c:	e003      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003a66:	2300      	movs	r3, #0
 8003a68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003a6c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4313      	orrs	r3, r2
 8003a74:	d051      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a80:	d035      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a86:	d82e      	bhi.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a8c:	d031      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003a8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a92:	d828      	bhi.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a98:	d01a      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003a9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a9e:	d822      	bhi.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa8:	d007      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003aaa:	e01c      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aac:	4b4b      	ldr	r3, [pc, #300]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab0:	4a4a      	ldr	r2, [pc, #296]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ab8:	e01c      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abe:	3308      	adds	r3, #8
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f001 fa6e 	bl	8004fa4 <RCCEx_PLL2_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ace:	e011      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad4:	3328      	adds	r3, #40	@ 0x28
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f001 fb15 	bl	8005108 <RCCEx_PLL3_Config>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ae4:	e006      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003aec:	e002      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003aee:	bf00      	nop
 8003af0:	e000      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003afc:	4b37      	ldr	r3, [pc, #220]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b00:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0a:	4a34      	ldr	r2, [pc, #208]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b10:	e003      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b22:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003b30:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003b34:	460b      	mov	r3, r1
 8003b36:	4313      	orrs	r3, r2
 8003b38:	d056      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b44:	d033      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003b46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b4a:	d82c      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b50:	d02f      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003b52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b56:	d826      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b5c:	d02b      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003b5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b62:	d820      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b68:	d012      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b6e:	d81a      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d022      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b78:	d115      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7e:	3308      	adds	r3, #8
 8003b80:	2101      	movs	r1, #1
 8003b82:	4618      	mov	r0, r3
 8003b84:	f001 fa0e 	bl	8004fa4 <RCCEx_PLL2_Config>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b8e:	e015      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b94:	3328      	adds	r3, #40	@ 0x28
 8003b96:	2101      	movs	r1, #1
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f001 fab5 	bl	8005108 <RCCEx_PLL3_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bac:	e006      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bae:	bf00      	nop
 8003bb0:	e004      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bb2:	bf00      	nop
 8003bb4:	e002      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10d      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bc4:	4b05      	ldr	r3, [pc, #20]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bd2:	4a02      	ldr	r2, [pc, #8]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bd8:	e006      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003bda:	bf00      	nop
 8003bdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bfe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4313      	orrs	r3, r2
 8003c06:	d055      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c14:	d033      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c1a:	d82c      	bhi.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c20:	d02f      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c26:	d826      	bhi.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c2c:	d02b      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003c2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c32:	d820      	bhi.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c38:	d012      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003c3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c3e:	d81a      	bhi.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d022      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003c44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c48:	d115      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4e:	3308      	adds	r3, #8
 8003c50:	2101      	movs	r1, #1
 8003c52:	4618      	mov	r0, r3
 8003c54:	f001 f9a6 	bl	8004fa4 <RCCEx_PLL2_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c5e:	e015      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c64:	3328      	adds	r3, #40	@ 0x28
 8003c66:	2101      	movs	r1, #1
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f001 fa4d 	bl	8005108 <RCCEx_PLL3_Config>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c74:	e00a      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c7c:	e006      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c7e:	bf00      	nop
 8003c80:	e004      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c82:	bf00      	nop
 8003c84:	e002      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c86:	bf00      	nop
 8003c88:	e000      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10b      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c94:	4ba3      	ldr	r3, [pc, #652]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c98:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ca4:	4a9f      	ldr	r2, [pc, #636]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003caa:	e003      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003cca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	d037      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cde:	d00e      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003ce0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ce4:	d816      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d018      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003cea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cee:	d111      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf0:	4b8c      	ldr	r3, [pc, #560]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf4:	4a8b      	ldr	r2, [pc, #556]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cfc:	e00f      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d02:	3308      	adds	r3, #8
 8003d04:	2101      	movs	r1, #1
 8003d06:	4618      	mov	r0, r3
 8003d08:	f001 f94c 	bl	8004fa4 <RCCEx_PLL2_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d12:	e004      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d1a:	e000      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d26:	4b7f      	ldr	r3, [pc, #508]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d2a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d34:	4a7b      	ldr	r2, [pc, #492]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d36:	430b      	orrs	r3, r1
 8003d38:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d3a:	e003      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003d50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003d5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4313      	orrs	r3, r2
 8003d62:	d039      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d81c      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d74 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d74:	08003db1 	.word	0x08003db1
 8003d78:	08003d85 	.word	0x08003d85
 8003d7c:	08003d93 	.word	0x08003d93
 8003d80:	08003db1 	.word	0x08003db1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d84:	4b67      	ldr	r3, [pc, #412]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d88:	4a66      	ldr	r2, [pc, #408]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d90:	e00f      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d96:	3308      	adds	r3, #8
 8003d98:	2102      	movs	r1, #2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f001 f902 	bl	8004fa4 <RCCEx_PLL2_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003da6:	e004      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dae:	e000      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10a      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003dba:	4b5a      	ldr	r3, [pc, #360]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dbe:	f023 0103 	bic.w	r1, r3, #3
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc8:	4a56      	ldr	r2, [pc, #344]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dce:	e003      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003de4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003de8:	2300      	movs	r3, #0
 8003dea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003dee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003df2:	460b      	mov	r3, r1
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f000 809f 	beq.w	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dfa:	4b4b      	ldr	r3, [pc, #300]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a4a      	ldr	r2, [pc, #296]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e06:	f7fd fa4d 	bl	80012a4 <HAL_GetTick>
 8003e0a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e0e:	e00b      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e10:	f7fd fa48 	bl	80012a4 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b64      	cmp	r3, #100	@ 0x64
 8003e1e:	d903      	bls.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e26:	e005      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e28:	4b3f      	ldr	r3, [pc, #252]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ed      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d179      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e3c:	4b39      	ldr	r3, [pc, #228]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e48:	4053      	eors	r3, r2
 8003e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d015      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e52:	4b34      	ldr	r3, [pc, #208]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e5a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e5e:	4b31      	ldr	r3, [pc, #196]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e62:	4a30      	ldr	r2, [pc, #192]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e68:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e6a:	4b2e      	ldr	r3, [pc, #184]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e74:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e76:	4a2b      	ldr	r2, [pc, #172]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e7c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e8a:	d118      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fd fa0a 	bl	80012a4 <HAL_GetTick>
 8003e90:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e94:	e00d      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7fd fa05 	bl	80012a4 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ea0:	1ad2      	subs	r2, r2, r3
 8003ea2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d903      	bls.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003eb0:	e005      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0eb      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d129      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ed6:	d10e      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003ed8:	4b12      	ldr	r3, [pc, #72]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ee8:	091a      	lsrs	r2, r3, #4
 8003eea:	4b10      	ldr	r3, [pc, #64]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	4a0d      	ldr	r2, [pc, #52]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	6113      	str	r3, [r2, #16]
 8003ef4:	e005      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	4a0a      	ldr	r2, [pc, #40]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003efc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f00:	6113      	str	r3, [r2, #16]
 8003f02:	4b08      	ldr	r3, [pc, #32]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f04:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f12:	4a04      	ldr	r2, [pc, #16]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f14:	430b      	orrs	r3, r1
 8003f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f18:	e00e      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003f22:	e009      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003f24:	58024400 	.word	0x58024400
 8003f28:	58024800 	.word	0x58024800
 8003f2c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	f002 0301 	and.w	r3, r2, #1
 8003f44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f000 8089 	beq.w	800406c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f60:	2b28      	cmp	r3, #40	@ 0x28
 8003f62:	d86b      	bhi.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003f64:	a201      	add	r2, pc, #4	@ (adr r2, 8003f6c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6a:	bf00      	nop
 8003f6c:	08004045 	.word	0x08004045
 8003f70:	0800403d 	.word	0x0800403d
 8003f74:	0800403d 	.word	0x0800403d
 8003f78:	0800403d 	.word	0x0800403d
 8003f7c:	0800403d 	.word	0x0800403d
 8003f80:	0800403d 	.word	0x0800403d
 8003f84:	0800403d 	.word	0x0800403d
 8003f88:	0800403d 	.word	0x0800403d
 8003f8c:	08004011 	.word	0x08004011
 8003f90:	0800403d 	.word	0x0800403d
 8003f94:	0800403d 	.word	0x0800403d
 8003f98:	0800403d 	.word	0x0800403d
 8003f9c:	0800403d 	.word	0x0800403d
 8003fa0:	0800403d 	.word	0x0800403d
 8003fa4:	0800403d 	.word	0x0800403d
 8003fa8:	0800403d 	.word	0x0800403d
 8003fac:	08004027 	.word	0x08004027
 8003fb0:	0800403d 	.word	0x0800403d
 8003fb4:	0800403d 	.word	0x0800403d
 8003fb8:	0800403d 	.word	0x0800403d
 8003fbc:	0800403d 	.word	0x0800403d
 8003fc0:	0800403d 	.word	0x0800403d
 8003fc4:	0800403d 	.word	0x0800403d
 8003fc8:	0800403d 	.word	0x0800403d
 8003fcc:	08004045 	.word	0x08004045
 8003fd0:	0800403d 	.word	0x0800403d
 8003fd4:	0800403d 	.word	0x0800403d
 8003fd8:	0800403d 	.word	0x0800403d
 8003fdc:	0800403d 	.word	0x0800403d
 8003fe0:	0800403d 	.word	0x0800403d
 8003fe4:	0800403d 	.word	0x0800403d
 8003fe8:	0800403d 	.word	0x0800403d
 8003fec:	08004045 	.word	0x08004045
 8003ff0:	0800403d 	.word	0x0800403d
 8003ff4:	0800403d 	.word	0x0800403d
 8003ff8:	0800403d 	.word	0x0800403d
 8003ffc:	0800403d 	.word	0x0800403d
 8004000:	0800403d 	.word	0x0800403d
 8004004:	0800403d 	.word	0x0800403d
 8004008:	0800403d 	.word	0x0800403d
 800400c:	08004045 	.word	0x08004045
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004014:	3308      	adds	r3, #8
 8004016:	2101      	movs	r1, #1
 8004018:	4618      	mov	r0, r3
 800401a:	f000 ffc3 	bl	8004fa4 <RCCEx_PLL2_Config>
 800401e:	4603      	mov	r3, r0
 8004020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004024:	e00f      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402a:	3328      	adds	r3, #40	@ 0x28
 800402c:	2101      	movs	r1, #1
 800402e:	4618      	mov	r0, r3
 8004030:	f001 f86a 	bl	8005108 <RCCEx_PLL3_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800403a:	e004      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004042:	e000      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800404e:	4bbf      	ldr	r3, [pc, #764]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004052:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800405c:	4abb      	ldr	r2, [pc, #748]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800405e:	430b      	orrs	r3, r1
 8004060:	6553      	str	r3, [r2, #84]	@ 0x54
 8004062:	e003      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004068:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800406c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	f002 0302 	and.w	r3, r2, #2
 8004078:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800407c:	2300      	movs	r3, #0
 800407e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004082:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004086:	460b      	mov	r3, r1
 8004088:	4313      	orrs	r3, r2
 800408a:	d041      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800408c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004090:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004092:	2b05      	cmp	r3, #5
 8004094:	d824      	bhi.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004096:	a201      	add	r2, pc, #4	@ (adr r2, 800409c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409c:	080040e9 	.word	0x080040e9
 80040a0:	080040b5 	.word	0x080040b5
 80040a4:	080040cb 	.word	0x080040cb
 80040a8:	080040e9 	.word	0x080040e9
 80040ac:	080040e9 	.word	0x080040e9
 80040b0:	080040e9 	.word	0x080040e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b8:	3308      	adds	r3, #8
 80040ba:	2101      	movs	r1, #1
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 ff71 	bl	8004fa4 <RCCEx_PLL2_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040c8:	e00f      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ce:	3328      	adds	r3, #40	@ 0x28
 80040d0:	2101      	movs	r1, #1
 80040d2:	4618      	mov	r0, r3
 80040d4:	f001 f818 	bl	8005108 <RCCEx_PLL3_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040de:	e004      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040e6:	e000      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80040e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10a      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040f2:	4b96      	ldr	r3, [pc, #600]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f6:	f023 0107 	bic.w	r1, r3, #7
 80040fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004100:	4a92      	ldr	r2, [pc, #584]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004102:	430b      	orrs	r3, r1
 8004104:	6553      	str	r3, [r2, #84]	@ 0x54
 8004106:	e003      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004108:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800410c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	f002 0304 	and.w	r3, r2, #4
 800411c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004120:	2300      	movs	r3, #0
 8004122:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004126:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800412a:	460b      	mov	r3, r1
 800412c:	4313      	orrs	r3, r2
 800412e:	d044      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004134:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004138:	2b05      	cmp	r3, #5
 800413a:	d825      	bhi.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800413c:	a201      	add	r2, pc, #4	@ (adr r2, 8004144 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800413e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004142:	bf00      	nop
 8004144:	08004191 	.word	0x08004191
 8004148:	0800415d 	.word	0x0800415d
 800414c:	08004173 	.word	0x08004173
 8004150:	08004191 	.word	0x08004191
 8004154:	08004191 	.word	0x08004191
 8004158:	08004191 	.word	0x08004191
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800415c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004160:	3308      	adds	r3, #8
 8004162:	2101      	movs	r1, #1
 8004164:	4618      	mov	r0, r3
 8004166:	f000 ff1d 	bl	8004fa4 <RCCEx_PLL2_Config>
 800416a:	4603      	mov	r3, r0
 800416c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004170:	e00f      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004176:	3328      	adds	r3, #40	@ 0x28
 8004178:	2101      	movs	r1, #1
 800417a:	4618      	mov	r0, r3
 800417c:	f000 ffc4 	bl	8005108 <RCCEx_PLL3_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004186:	e004      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800418e:	e000      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10b      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800419a:	4b6c      	ldr	r3, [pc, #432]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800419c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419e:	f023 0107 	bic.w	r1, r3, #7
 80041a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041aa:	4a68      	ldr	r2, [pc, #416]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041ac:	430b      	orrs	r3, r1
 80041ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80041b0:	e003      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c2:	f002 0320 	and.w	r3, r2, #32
 80041c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041ca:	2300      	movs	r3, #0
 80041cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041d4:	460b      	mov	r3, r1
 80041d6:	4313      	orrs	r3, r2
 80041d8:	d055      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041e6:	d033      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80041e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041ec:	d82c      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f2:	d02f      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80041f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f8:	d826      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041fe:	d02b      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004200:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004204:	d820      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004206:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800420a:	d012      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800420c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004210:	d81a      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d022      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004216:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800421a:	d115      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800421c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004220:	3308      	adds	r3, #8
 8004222:	2100      	movs	r1, #0
 8004224:	4618      	mov	r0, r3
 8004226:	f000 febd 	bl	8004fa4 <RCCEx_PLL2_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004230:	e015      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004236:	3328      	adds	r3, #40	@ 0x28
 8004238:	2102      	movs	r1, #2
 800423a:	4618      	mov	r0, r3
 800423c:	f000 ff64 	bl	8005108 <RCCEx_PLL3_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004246:	e00a      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800424e:	e006      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004250:	bf00      	nop
 8004252:	e004      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004254:	bf00      	nop
 8004256:	e002      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004258:	bf00      	nop
 800425a:	e000      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800425c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800425e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10b      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004266:	4b39      	ldr	r3, [pc, #228]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800426a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800426e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004276:	4a35      	ldr	r2, [pc, #212]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004278:	430b      	orrs	r3, r1
 800427a:	6553      	str	r3, [r2, #84]	@ 0x54
 800427c:	e003      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004282:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004292:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004296:	2300      	movs	r3, #0
 8004298:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800429c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4313      	orrs	r3, r2
 80042a4:	d058      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80042a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042ae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80042b2:	d033      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80042b4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80042b8:	d82c      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042be:	d02f      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80042c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042c4:	d826      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042ca:	d02b      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80042cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042d0:	d820      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042d6:	d012      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80042d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042dc:	d81a      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d022      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80042e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042e6:	d115      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ec:	3308      	adds	r3, #8
 80042ee:	2100      	movs	r1, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fe57 	bl	8004fa4 <RCCEx_PLL2_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042fc:	e015      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004302:	3328      	adds	r3, #40	@ 0x28
 8004304:	2102      	movs	r1, #2
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fefe 	bl	8005108 <RCCEx_PLL3_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004312:	e00a      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800431a:	e006      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800431c:	bf00      	nop
 800431e:	e004      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004320:	bf00      	nop
 8004322:	e002      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004324:	bf00      	nop
 8004326:	e000      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10e      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004332:	4b06      	ldr	r3, [pc, #24]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004336:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800433a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004342:	4a02      	ldr	r2, [pc, #8]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004344:	430b      	orrs	r3, r1
 8004346:	6593      	str	r3, [r2, #88]	@ 0x58
 8004348:	e006      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800434a:	bf00      	nop
 800434c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004354:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004364:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004368:	2300      	movs	r3, #0
 800436a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800436e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004372:	460b      	mov	r3, r1
 8004374:	4313      	orrs	r3, r2
 8004376:	d055      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004380:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004384:	d033      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004386:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800438a:	d82c      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800438c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004390:	d02f      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004392:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004396:	d826      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004398:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800439c:	d02b      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800439e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80043a2:	d820      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043a8:	d012      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80043aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043ae:	d81a      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d022      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80043b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043b8:	d115      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043be:	3308      	adds	r3, #8
 80043c0:	2100      	movs	r1, #0
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fdee 	bl	8004fa4 <RCCEx_PLL2_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043ce:	e015      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d4:	3328      	adds	r3, #40	@ 0x28
 80043d6:	2102      	movs	r1, #2
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fe95 	bl	8005108 <RCCEx_PLL3_Config>
 80043de:	4603      	mov	r3, r0
 80043e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043e4:	e00a      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043ec:	e006      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043ee:	bf00      	nop
 80043f0:	e004      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043f2:	bf00      	nop
 80043f4:	e002      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043f6:	bf00      	nop
 80043f8:	e000      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10b      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004404:	4ba1      	ldr	r3, [pc, #644]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004408:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800440c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004410:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004414:	4a9d      	ldr	r2, [pc, #628]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004416:	430b      	orrs	r3, r1
 8004418:	6593      	str	r3, [r2, #88]	@ 0x58
 800441a:	e003      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f002 0308 	and.w	r3, r2, #8
 8004430:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004434:	2300      	movs	r3, #0
 8004436:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800443a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800443e:	460b      	mov	r3, r1
 8004440:	4313      	orrs	r3, r2
 8004442:	d01e      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004448:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800444c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004450:	d10c      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004456:	3328      	adds	r3, #40	@ 0x28
 8004458:	2102      	movs	r1, #2
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fe54 	bl	8005108 <RCCEx_PLL3_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800446c:	4b87      	ldr	r3, [pc, #540]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800446e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004470:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800447c:	4a83      	ldr	r2, [pc, #524]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800447e:	430b      	orrs	r3, r1
 8004480:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448a:	f002 0310 	and.w	r3, r2, #16
 800448e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004492:	2300      	movs	r3, #0
 8004494:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004498:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800449c:	460b      	mov	r3, r1
 800449e:	4313      	orrs	r3, r2
 80044a0:	d01e      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044ae:	d10c      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b4:	3328      	adds	r3, #40	@ 0x28
 80044b6:	2102      	movs	r1, #2
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fe25 	bl	8005108 <RCCEx_PLL3_Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044ca:	4b70      	ldr	r3, [pc, #448]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044da:	4a6c      	ldr	r2, [pc, #432]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044dc:	430b      	orrs	r3, r1
 80044de:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80044ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044f0:	2300      	movs	r3, #0
 80044f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80044fa:	460b      	mov	r3, r1
 80044fc:	4313      	orrs	r3, r2
 80044fe:	d03e      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004504:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004508:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800450c:	d022      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800450e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004512:	d81b      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800451c:	d00b      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800451e:	e015      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004524:	3308      	adds	r3, #8
 8004526:	2100      	movs	r1, #0
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fd3b 	bl	8004fa4 <RCCEx_PLL2_Config>
 800452e:	4603      	mov	r3, r0
 8004530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004534:	e00f      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453a:	3328      	adds	r3, #40	@ 0x28
 800453c:	2102      	movs	r1, #2
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fde2 	bl	8005108 <RCCEx_PLL3_Config>
 8004544:	4603      	mov	r3, r0
 8004546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800454a:	e004      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004552:	e000      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10b      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800455e:	4b4b      	ldr	r3, [pc, #300]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004562:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800456e:	4a47      	ldr	r2, [pc, #284]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004570:	430b      	orrs	r3, r1
 8004572:	6593      	str	r3, [r2, #88]	@ 0x58
 8004574:	e003      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800457a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800458a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800458c:	2300      	movs	r3, #0
 800458e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004590:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004594:	460b      	mov	r3, r1
 8004596:	4313      	orrs	r3, r2
 8004598:	d03b      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045a6:	d01f      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80045a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045ac:	d818      	bhi.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80045ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045b2:	d003      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80045b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045b8:	d007      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80045ba:	e011      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045bc:	4b33      	ldr	r3, [pc, #204]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c0:	4a32      	ldr	r2, [pc, #200]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80045c8:	e00f      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ce:	3328      	adds	r3, #40	@ 0x28
 80045d0:	2101      	movs	r1, #1
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fd98 	bl	8005108 <RCCEx_PLL3_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80045de:	e004      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045e6:	e000      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80045e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10b      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045f2:	4b26      	ldr	r3, [pc, #152]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004602:	4a22      	ldr	r2, [pc, #136]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004604:	430b      	orrs	r3, r1
 8004606:	6553      	str	r3, [r2, #84]	@ 0x54
 8004608:	e003      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800460e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800461e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004620:	2300      	movs	r3, #0
 8004622:	677b      	str	r3, [r7, #116]	@ 0x74
 8004624:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004628:	460b      	mov	r3, r1
 800462a:	4313      	orrs	r3, r2
 800462c:	d034      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800463c:	d007      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800463e:	e011      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004640:	4b12      	ldr	r3, [pc, #72]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004644:	4a11      	ldr	r2, [pc, #68]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004646:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800464a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800464c:	e00e      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004652:	3308      	adds	r3, #8
 8004654:	2102      	movs	r1, #2
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fca4 	bl	8004fa4 <RCCEx_PLL2_Config>
 800465c:	4603      	mov	r3, r0
 800465e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004662:	e003      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800466a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800466c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10d      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004674:	4b05      	ldr	r3, [pc, #20]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004678:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800467c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004682:	4a02      	ldr	r2, [pc, #8]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004684:	430b      	orrs	r3, r1
 8004686:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004688:	e006      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800468a:	bf00      	nop
 800468c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004694:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80046a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046a6:	2300      	movs	r3, #0
 80046a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80046ae:	460b      	mov	r3, r1
 80046b0:	4313      	orrs	r3, r2
 80046b2:	d00c      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b8:	3328      	adds	r3, #40	@ 0x28
 80046ba:	2102      	movs	r1, #2
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 fd23 	bl	8005108 <RCCEx_PLL3_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80046ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80046da:	663b      	str	r3, [r7, #96]	@ 0x60
 80046dc:	2300      	movs	r3, #0
 80046de:	667b      	str	r3, [r7, #100]	@ 0x64
 80046e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80046e4:	460b      	mov	r3, r1
 80046e6:	4313      	orrs	r3, r2
 80046e8:	d038      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046f6:	d018      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80046f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046fc:	d811      	bhi.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80046fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004702:	d014      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004708:	d80b      	bhi.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800470a:	2b00      	cmp	r3, #0
 800470c:	d011      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800470e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004712:	d106      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004714:	4bc3      	ldr	r3, [pc, #780]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004718:	4ac2      	ldr	r2, [pc, #776]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800471a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800471e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004720:	e008      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004728:	e004      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800472a:	bf00      	nop
 800472c:	e002      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800472e:	bf00      	nop
 8004730:	e000      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800473c:	4bb9      	ldr	r3, [pc, #740]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800473e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004740:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004748:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800474c:	4ab5      	ldr	r2, [pc, #724]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800474e:	430b      	orrs	r3, r1
 8004750:	6553      	str	r3, [r2, #84]	@ 0x54
 8004752:	e003      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004758:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800475c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004764:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004768:	65bb      	str	r3, [r7, #88]	@ 0x58
 800476a:	2300      	movs	r3, #0
 800476c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800476e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004772:	460b      	mov	r3, r1
 8004774:	4313      	orrs	r3, r2
 8004776:	d009      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004778:	4baa      	ldr	r3, [pc, #680]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800477a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800477c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004786:	4aa7      	ldr	r2, [pc, #668]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004788:	430b      	orrs	r3, r1
 800478a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800478c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004798:	653b      	str	r3, [r7, #80]	@ 0x50
 800479a:	2300      	movs	r3, #0
 800479c:	657b      	str	r3, [r7, #84]	@ 0x54
 800479e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80047a2:	460b      	mov	r3, r1
 80047a4:	4313      	orrs	r3, r2
 80047a6:	d00a      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80047a8:	4b9e      	ldr	r3, [pc, #632]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80047b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80047b8:	4a9a      	ldr	r2, [pc, #616]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ba:	430b      	orrs	r3, r1
 80047bc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80047ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047cc:	2300      	movs	r3, #0
 80047ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80047d4:	460b      	mov	r3, r1
 80047d6:	4313      	orrs	r3, r2
 80047d8:	d009      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047da:	4b92      	ldr	r3, [pc, #584]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047de:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80047e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047e8:	4a8e      	ldr	r2, [pc, #568]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ea:	430b      	orrs	r3, r1
 80047ec:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80047ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80047fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80047fc:	2300      	movs	r3, #0
 80047fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004800:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004804:	460b      	mov	r3, r1
 8004806:	4313      	orrs	r3, r2
 8004808:	d00e      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800480a:	4b86      	ldr	r3, [pc, #536]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	4a85      	ldr	r2, [pc, #532]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004810:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004814:	6113      	str	r3, [r2, #16]
 8004816:	4b83      	ldr	r3, [pc, #524]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004818:	6919      	ldr	r1, [r3, #16]
 800481a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004822:	4a80      	ldr	r2, [pc, #512]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004824:	430b      	orrs	r3, r1
 8004826:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004830:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004834:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004836:	2300      	movs	r3, #0
 8004838:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800483a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800483e:	460b      	mov	r3, r1
 8004840:	4313      	orrs	r3, r2
 8004842:	d009      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004844:	4b77      	ldr	r3, [pc, #476]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004848:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800484c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004852:	4a74      	ldr	r2, [pc, #464]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004854:	430b      	orrs	r3, r1
 8004856:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004864:	633b      	str	r3, [r7, #48]	@ 0x30
 8004866:	2300      	movs	r3, #0
 8004868:	637b      	str	r3, [r7, #52]	@ 0x34
 800486a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800486e:	460b      	mov	r3, r1
 8004870:	4313      	orrs	r3, r2
 8004872:	d00a      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004874:	4b6b      	ldr	r3, [pc, #428]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004878:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800487c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004880:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004884:	4a67      	ldr	r2, [pc, #412]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004886:	430b      	orrs	r3, r1
 8004888:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	2100      	movs	r1, #0
 8004894:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800489c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80048a0:	460b      	mov	r3, r1
 80048a2:	4313      	orrs	r3, r2
 80048a4:	d011      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048aa:	3308      	adds	r3, #8
 80048ac:	2100      	movs	r1, #0
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fb78 	bl	8004fa4 <RCCEx_PLL2_Config>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	2100      	movs	r1, #0
 80048d4:	6239      	str	r1, [r7, #32]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24
 80048dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80048e0:	460b      	mov	r3, r1
 80048e2:	4313      	orrs	r3, r2
 80048e4:	d011      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ea:	3308      	adds	r3, #8
 80048ec:	2101      	movs	r1, #1
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fb58 	bl	8004fa4 <RCCEx_PLL2_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004906:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800490a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	2100      	movs	r1, #0
 8004914:	61b9      	str	r1, [r7, #24]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004920:	460b      	mov	r3, r1
 8004922:	4313      	orrs	r3, r2
 8004924:	d011      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492a:	3308      	adds	r3, #8
 800492c:	2102      	movs	r1, #2
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fb38 	bl	8004fa4 <RCCEx_PLL2_Config>
 8004934:	4603      	mov	r3, r0
 8004936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800493a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004946:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	2100      	movs	r1, #0
 8004954:	6139      	str	r1, [r7, #16]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004960:	460b      	mov	r3, r1
 8004962:	4313      	orrs	r3, r2
 8004964:	d011      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496a:	3328      	adds	r3, #40	@ 0x28
 800496c:	2100      	movs	r1, #0
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fbca 	bl	8005108 <RCCEx_PLL3_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800497a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800498a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	2100      	movs	r1, #0
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	f003 0310 	and.w	r3, r3, #16
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049a0:	460b      	mov	r3, r1
 80049a2:	4313      	orrs	r3, r2
 80049a4:	d011      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049aa:	3328      	adds	r3, #40	@ 0x28
 80049ac:	2101      	movs	r1, #1
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fbaa 	bl	8005108 <RCCEx_PLL3_Config>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80049ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	2100      	movs	r1, #0
 80049d4:	6039      	str	r1, [r7, #0]
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	607b      	str	r3, [r7, #4]
 80049dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80049e0:	460b      	mov	r3, r1
 80049e2:	4313      	orrs	r3, r2
 80049e4:	d011      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ea:	3328      	adds	r3, #40	@ 0x28
 80049ec:	2102      	movs	r1, #2
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fb8a 	bl	8005108 <RCCEx_PLL3_Config>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004a0a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	e000      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a24:	58024400 	.word	0x58024400

08004a28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a2c:	f7fe fd96 	bl	800355c <HAL_RCC_GetHCLKFreq>
 8004a30:	4602      	mov	r2, r0
 8004a32:	4b06      	ldr	r3, [pc, #24]	@ (8004a4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	091b      	lsrs	r3, r3, #4
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	4904      	ldr	r1, [pc, #16]	@ (8004a50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a3e:	5ccb      	ldrb	r3, [r1, r3]
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	58024400 	.word	0x58024400
 8004a50:	0800c4d8 	.word	0x0800c4d8

08004a54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b089      	sub	sp, #36	@ 0x24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a5c:	4ba1      	ldr	r3, [pc, #644]	@ (8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004a66:	4b9f      	ldr	r3, [pc, #636]	@ (8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6a:	0b1b      	lsrs	r3, r3, #12
 8004a6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a72:	4b9c      	ldr	r3, [pc, #624]	@ (8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a76:	091b      	lsrs	r3, r3, #4
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004a7e:	4b99      	ldr	r3, [pc, #612]	@ (8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a82:	08db      	lsrs	r3, r3, #3
 8004a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8111 	beq.w	8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	f000 8083 	beq.w	8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	f200 80a1 	bhi.w	8004bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d056      	beq.n	8004b6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004abe:	e099      	b.n	8004bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ac0:	4b88      	ldr	r3, [pc, #544]	@ (8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d02d      	beq.n	8004b28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004acc:	4b85      	ldr	r3, [pc, #532]	@ (8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	08db      	lsrs	r3, r3, #3
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	4a84      	ldr	r2, [pc, #528]	@ (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8004adc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	ee07 3a90 	vmov	s15, r3
 8004ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af6:	4b7b      	ldr	r3, [pc, #492]	@ (8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b26:	e087      	b.n	8004c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b6a:	e065      	b.n	8004c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7e:	4b59      	ldr	r3, [pc, #356]	@ (8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bae:	e043      	b.n	8004c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc2:	4b48      	ldr	r3, [pc, #288]	@ (8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bd6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bf2:	e021      	b.n	8004c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c06:	4b37      	ldr	r3, [pc, #220]	@ (8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c36:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004c38:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3c:	0a5b      	lsrs	r3, r3, #9
 8004c3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c52:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c5e:	ee17 2a90 	vmov	r2, s15
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004c66:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6a:	0c1b      	lsrs	r3, r3, #16
 8004c6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c70:	ee07 3a90 	vmov	s15, r3
 8004c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c8c:	ee17 2a90 	vmov	r2, s15
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004c94:	4b13      	ldr	r3, [pc, #76]	@ (8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c98:	0e1b      	lsrs	r3, r3, #24
 8004c9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cba:	ee17 2a90 	vmov	r2, s15
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	609a      	str	r2, [r3, #8]
}
 8004cd6:	bf00      	nop
 8004cd8:	3724      	adds	r7, #36	@ 0x24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	58024400 	.word	0x58024400
 8004ce8:	03d09000 	.word	0x03d09000
 8004cec:	46000000 	.word	0x46000000
 8004cf0:	4c742400 	.word	0x4c742400
 8004cf4:	4a742400 	.word	0x4a742400
 8004cf8:	4bbebc20 	.word	0x4bbebc20

08004cfc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b089      	sub	sp, #36	@ 0x24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d04:	4ba1      	ldr	r3, [pc, #644]	@ (8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004d0e:	4b9f      	ldr	r3, [pc, #636]	@ (8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d12:	0d1b      	lsrs	r3, r3, #20
 8004d14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d1a:	4b9c      	ldr	r3, [pc, #624]	@ (8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1e:	0a1b      	lsrs	r3, r3, #8
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004d26:	4b99      	ldr	r3, [pc, #612]	@ (8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2a:	08db      	lsrs	r3, r3, #3
 8004d2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	fb02 f303 	mul.w	r3, r2, r3
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8111 	beq.w	8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	f000 8083 	beq.w	8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	f200 80a1 	bhi.w	8004e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d056      	beq.n	8004e14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d66:	e099      	b.n	8004e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d68:	4b88      	ldr	r3, [pc, #544]	@ (8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d02d      	beq.n	8004dd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d74:	4b85      	ldr	r3, [pc, #532]	@ (8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	08db      	lsrs	r3, r3, #3
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	4a84      	ldr	r2, [pc, #528]	@ (8004f90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
 8004d84:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	ee07 3a90 	vmov	s15, r3
 8004d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d9e:	4b7b      	ldr	r3, [pc, #492]	@ (8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004db2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004dce:	e087      	b.n	8004ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dda:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004f98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de2:	4b6a      	ldr	r3, [pc, #424]	@ (8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004df6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e12:	e065      	b.n	8004ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e26:	4b59      	ldr	r3, [pc, #356]	@ (8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e3a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e56:	e043      	b.n	8004ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e62:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e6a:	4b48      	ldr	r3, [pc, #288]	@ (8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e7e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e9a:	e021      	b.n	8004ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eae:	4b37      	ldr	r3, [pc, #220]	@ (8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ec2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ede:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee4:	0a5b      	lsrs	r3, r3, #9
 8004ee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004efa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f06:	ee17 2a90 	vmov	r2, s15
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f12:	0c1b      	lsrs	r3, r3, #16
 8004f14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f18:	ee07 3a90 	vmov	s15, r3
 8004f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f28:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f34:	ee17 2a90 	vmov	r2, s15
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004f3c:	4b13      	ldr	r3, [pc, #76]	@ (8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f40:	0e1b      	lsrs	r3, r3, #24
 8004f42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f46:	ee07 3a90 	vmov	s15, r3
 8004f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f56:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f62:	ee17 2a90 	vmov	r2, s15
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f6a:	e008      	b.n	8004f7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	609a      	str	r2, [r3, #8]
}
 8004f7e:	bf00      	nop
 8004f80:	3724      	adds	r7, #36	@ 0x24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	58024400 	.word	0x58024400
 8004f90:	03d09000 	.word	0x03d09000
 8004f94:	46000000 	.word	0x46000000
 8004f98:	4c742400 	.word	0x4c742400
 8004f9c:	4a742400 	.word	0x4a742400
 8004fa0:	4bbebc20 	.word	0x4bbebc20

08004fa4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fb2:	4b53      	ldr	r3, [pc, #332]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d101      	bne.n	8004fc2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e099      	b.n	80050f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004fc2:	4b4f      	ldr	r3, [pc, #316]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a4e      	ldr	r2, [pc, #312]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 8004fc8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fce:	f7fc f969 	bl	80012a4 <HAL_GetTick>
 8004fd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fd4:	e008      	b.n	8004fe8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fd6:	f7fc f965 	bl	80012a4 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e086      	b.n	80050f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fe8:	4b45      	ldr	r3, [pc, #276]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1f0      	bne.n	8004fd6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ff4:	4b42      	ldr	r3, [pc, #264]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	031b      	lsls	r3, r3, #12
 8005002:	493f      	ldr	r1, [pc, #252]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 8005004:	4313      	orrs	r3, r2
 8005006:	628b      	str	r3, [r1, #40]	@ 0x28
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	3b01      	subs	r3, #1
 800500e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	3b01      	subs	r3, #1
 8005018:	025b      	lsls	r3, r3, #9
 800501a:	b29b      	uxth	r3, r3
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	3b01      	subs	r3, #1
 8005024:	041b      	lsls	r3, r3, #16
 8005026:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	3b01      	subs	r3, #1
 8005032:	061b      	lsls	r3, r3, #24
 8005034:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005038:	4931      	ldr	r1, [pc, #196]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 800503a:	4313      	orrs	r3, r2
 800503c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800503e:	4b30      	ldr	r3, [pc, #192]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 8005040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005042:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	492d      	ldr	r1, [pc, #180]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 800504c:	4313      	orrs	r3, r2
 800504e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005050:	4b2b      	ldr	r3, [pc, #172]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 8005052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005054:	f023 0220 	bic.w	r2, r3, #32
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	4928      	ldr	r1, [pc, #160]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 800505e:	4313      	orrs	r3, r2
 8005060:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005062:	4b27      	ldr	r3, [pc, #156]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 8005064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005066:	4a26      	ldr	r2, [pc, #152]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 8005068:	f023 0310 	bic.w	r3, r3, #16
 800506c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800506e:	4b24      	ldr	r3, [pc, #144]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 8005070:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005072:	4b24      	ldr	r3, [pc, #144]	@ (8005104 <RCCEx_PLL2_Config+0x160>)
 8005074:	4013      	ands	r3, r2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	69d2      	ldr	r2, [r2, #28]
 800507a:	00d2      	lsls	r2, r2, #3
 800507c:	4920      	ldr	r1, [pc, #128]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 800507e:	4313      	orrs	r3, r2
 8005080:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005082:	4b1f      	ldr	r3, [pc, #124]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 8005084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005086:	4a1e      	ldr	r2, [pc, #120]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 8005088:	f043 0310 	orr.w	r3, r3, #16
 800508c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d106      	bne.n	80050a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005094:	4b1a      	ldr	r3, [pc, #104]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	4a19      	ldr	r2, [pc, #100]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 800509a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800509e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050a0:	e00f      	b.n	80050c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d106      	bne.n	80050b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80050a8:	4b15      	ldr	r3, [pc, #84]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 80050aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ac:	4a14      	ldr	r2, [pc, #80]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 80050ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050b4:	e005      	b.n	80050c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80050b6:	4b12      	ldr	r3, [pc, #72]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 80050b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ba:	4a11      	ldr	r2, [pc, #68]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 80050bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80050c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80050c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a0e      	ldr	r2, [pc, #56]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 80050c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ce:	f7fc f8e9 	bl	80012a4 <HAL_GetTick>
 80050d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050d4:	e008      	b.n	80050e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050d6:	f7fc f8e5 	bl	80012a4 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e006      	b.n	80050f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050e8:	4b05      	ldr	r3, [pc, #20]	@ (8005100 <RCCEx_PLL2_Config+0x15c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0f0      	beq.n	80050d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	58024400 	.word	0x58024400
 8005104:	ffff0007 	.word	0xffff0007

08005108 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005116:	4b53      	ldr	r3, [pc, #332]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 8005118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	2b03      	cmp	r3, #3
 8005120:	d101      	bne.n	8005126 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e099      	b.n	800525a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005126:	4b4f      	ldr	r3, [pc, #316]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a4e      	ldr	r2, [pc, #312]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 800512c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005132:	f7fc f8b7 	bl	80012a4 <HAL_GetTick>
 8005136:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005138:	e008      	b.n	800514c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800513a:	f7fc f8b3 	bl	80012a4 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e086      	b.n	800525a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800514c:	4b45      	ldr	r3, [pc, #276]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f0      	bne.n	800513a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005158:	4b42      	ldr	r3, [pc, #264]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 800515a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	051b      	lsls	r3, r3, #20
 8005166:	493f      	ldr	r1, [pc, #252]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 8005168:	4313      	orrs	r3, r2
 800516a:	628b      	str	r3, [r1, #40]	@ 0x28
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	3b01      	subs	r3, #1
 8005172:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	3b01      	subs	r3, #1
 800517c:	025b      	lsls	r3, r3, #9
 800517e:	b29b      	uxth	r3, r3
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	3b01      	subs	r3, #1
 8005188:	041b      	lsls	r3, r3, #16
 800518a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	3b01      	subs	r3, #1
 8005196:	061b      	lsls	r3, r3, #24
 8005198:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800519c:	4931      	ldr	r1, [pc, #196]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051a2:	4b30      	ldr	r3, [pc, #192]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	492d      	ldr	r1, [pc, #180]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80051b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	4928      	ldr	r1, [pc, #160]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80051c6:	4b27      	ldr	r3, [pc, #156]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ca:	4a26      	ldr	r2, [pc, #152]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051d2:	4b24      	ldr	r3, [pc, #144]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051d6:	4b24      	ldr	r3, [pc, #144]	@ (8005268 <RCCEx_PLL3_Config+0x160>)
 80051d8:	4013      	ands	r3, r2
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	69d2      	ldr	r2, [r2, #28]
 80051de:	00d2      	lsls	r2, r2, #3
 80051e0:	4920      	ldr	r1, [pc, #128]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d106      	bne.n	8005206 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80051f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fc:	4a19      	ldr	r2, [pc, #100]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005202:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005204:	e00f      	b.n	8005226 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d106      	bne.n	800521a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800520c:	4b15      	ldr	r3, [pc, #84]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 800520e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005210:	4a14      	ldr	r2, [pc, #80]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 8005212:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005216:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005218:	e005      	b.n	8005226 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800521a:	4b12      	ldr	r3, [pc, #72]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 800521c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521e:	4a11      	ldr	r2, [pc, #68]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 8005220:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005224:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005226:	4b0f      	ldr	r3, [pc, #60]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a0e      	ldr	r2, [pc, #56]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 800522c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005232:	f7fc f837 	bl	80012a4 <HAL_GetTick>
 8005236:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005238:	e008      	b.n	800524c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800523a:	f7fc f833 	bl	80012a4 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e006      	b.n	800525a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800524c:	4b05      	ldr	r3, [pc, #20]	@ (8005264 <RCCEx_PLL3_Config+0x15c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005258:	7bfb      	ldrb	r3, [r7, #15]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	58024400 	.word	0x58024400
 8005268:	ffff0007 	.word	0xffff0007

0800526c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e049      	b.n	8005312 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fb fe7c 	bl	8000f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3304      	adds	r3, #4
 80052a8:	4619      	mov	r1, r3
 80052aa:	4610      	mov	r0, r2
 80052ac:	f000 f92e 	bl	800550c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_TIM_ConfigClockSource+0x1c>
 8005334:	2302      	movs	r3, #2
 8005336:	e0dc      	b.n	80054f2 <HAL_TIM_ConfigClockSource+0x1d6>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	4b6a      	ldr	r3, [pc, #424]	@ (80054fc <HAL_TIM_ConfigClockSource+0x1e0>)
 8005354:	4013      	ands	r3, r2
 8005356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800535e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a64      	ldr	r2, [pc, #400]	@ (8005500 <HAL_TIM_ConfigClockSource+0x1e4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	f000 80a9 	beq.w	80054c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005374:	4a62      	ldr	r2, [pc, #392]	@ (8005500 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	f200 80ae 	bhi.w	80054d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800537c:	4a61      	ldr	r2, [pc, #388]	@ (8005504 <HAL_TIM_ConfigClockSource+0x1e8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	f000 80a1 	beq.w	80054c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005384:	4a5f      	ldr	r2, [pc, #380]	@ (8005504 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	f200 80a6 	bhi.w	80054d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800538c:	4a5e      	ldr	r2, [pc, #376]	@ (8005508 <HAL_TIM_ConfigClockSource+0x1ec>)
 800538e:	4293      	cmp	r3, r2
 8005390:	f000 8099 	beq.w	80054c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005394:	4a5c      	ldr	r2, [pc, #368]	@ (8005508 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005396:	4293      	cmp	r3, r2
 8005398:	f200 809e 	bhi.w	80054d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800539c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80053a0:	f000 8091 	beq.w	80054c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80053a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80053a8:	f200 8096 	bhi.w	80054d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80053ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053b0:	f000 8089 	beq.w	80054c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80053b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053b8:	f200 808e 	bhi.w	80054d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80053bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053c0:	d03e      	beq.n	8005440 <HAL_TIM_ConfigClockSource+0x124>
 80053c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053c6:	f200 8087 	bhi.w	80054d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80053ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ce:	f000 8086 	beq.w	80054de <HAL_TIM_ConfigClockSource+0x1c2>
 80053d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053d6:	d87f      	bhi.n	80054d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80053d8:	2b70      	cmp	r3, #112	@ 0x70
 80053da:	d01a      	beq.n	8005412 <HAL_TIM_ConfigClockSource+0xf6>
 80053dc:	2b70      	cmp	r3, #112	@ 0x70
 80053de:	d87b      	bhi.n	80054d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80053e0:	2b60      	cmp	r3, #96	@ 0x60
 80053e2:	d050      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x16a>
 80053e4:	2b60      	cmp	r3, #96	@ 0x60
 80053e6:	d877      	bhi.n	80054d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80053e8:	2b50      	cmp	r3, #80	@ 0x50
 80053ea:	d03c      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x14a>
 80053ec:	2b50      	cmp	r3, #80	@ 0x50
 80053ee:	d873      	bhi.n	80054d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80053f0:	2b40      	cmp	r3, #64	@ 0x40
 80053f2:	d058      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0x18a>
 80053f4:	2b40      	cmp	r3, #64	@ 0x40
 80053f6:	d86f      	bhi.n	80054d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80053f8:	2b30      	cmp	r3, #48	@ 0x30
 80053fa:	d064      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80053fc:	2b30      	cmp	r3, #48	@ 0x30
 80053fe:	d86b      	bhi.n	80054d8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005400:	2b20      	cmp	r3, #32
 8005402:	d060      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005404:	2b20      	cmp	r3, #32
 8005406:	d867      	bhi.n	80054d8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005408:	2b00      	cmp	r3, #0
 800540a:	d05c      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800540c:	2b10      	cmp	r3, #16
 800540e:	d05a      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005410:	e062      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005422:	f000 f991 	bl	8005748 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005434:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	609a      	str	r2, [r3, #8]
      break;
 800543e:	e04f      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005450:	f000 f97a 	bl	8005748 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005462:	609a      	str	r2, [r3, #8]
      break;
 8005464:	e03c      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005472:	461a      	mov	r2, r3
 8005474:	f000 f8ea 	bl	800564c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2150      	movs	r1, #80	@ 0x50
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f944 	bl	800570c <TIM_ITRx_SetConfig>
      break;
 8005484:	e02c      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005492:	461a      	mov	r2, r3
 8005494:	f000 f909 	bl	80056aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2160      	movs	r1, #96	@ 0x60
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 f934 	bl	800570c <TIM_ITRx_SetConfig>
      break;
 80054a4:	e01c      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054b2:	461a      	mov	r2, r3
 80054b4:	f000 f8ca 	bl	800564c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2140      	movs	r1, #64	@ 0x40
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 f924 	bl	800570c <TIM_ITRx_SetConfig>
      break;
 80054c4:	e00c      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4619      	mov	r1, r3
 80054d0:	4610      	mov	r0, r2
 80054d2:	f000 f91b 	bl	800570c <TIM_ITRx_SetConfig>
      break;
 80054d6:	e003      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	73fb      	strb	r3, [r7, #15]
      break;
 80054dc:	e000      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80054de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	ffceff88 	.word	0xffceff88
 8005500:	00100040 	.word	0x00100040
 8005504:	00100030 	.word	0x00100030
 8005508:	00100020 	.word	0x00100020

0800550c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a43      	ldr	r2, [pc, #268]	@ (800562c <TIM_Base_SetConfig+0x120>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800552a:	d00f      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a40      	ldr	r2, [pc, #256]	@ (8005630 <TIM_Base_SetConfig+0x124>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00b      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a3f      	ldr	r2, [pc, #252]	@ (8005634 <TIM_Base_SetConfig+0x128>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d007      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a3e      	ldr	r2, [pc, #248]	@ (8005638 <TIM_Base_SetConfig+0x12c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d003      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a3d      	ldr	r2, [pc, #244]	@ (800563c <TIM_Base_SetConfig+0x130>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d108      	bne.n	800555e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a32      	ldr	r2, [pc, #200]	@ (800562c <TIM_Base_SetConfig+0x120>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d01f      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800556c:	d01b      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a2f      	ldr	r2, [pc, #188]	@ (8005630 <TIM_Base_SetConfig+0x124>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d017      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a2e      	ldr	r2, [pc, #184]	@ (8005634 <TIM_Base_SetConfig+0x128>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d013      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a2d      	ldr	r2, [pc, #180]	@ (8005638 <TIM_Base_SetConfig+0x12c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00f      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a2c      	ldr	r2, [pc, #176]	@ (800563c <TIM_Base_SetConfig+0x130>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00b      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a2b      	ldr	r2, [pc, #172]	@ (8005640 <TIM_Base_SetConfig+0x134>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d007      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a2a      	ldr	r2, [pc, #168]	@ (8005644 <TIM_Base_SetConfig+0x138>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d003      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a29      	ldr	r2, [pc, #164]	@ (8005648 <TIM_Base_SetConfig+0x13c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d108      	bne.n	80055b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a14      	ldr	r2, [pc, #80]	@ (800562c <TIM_Base_SetConfig+0x120>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00f      	beq.n	80055fe <TIM_Base_SetConfig+0xf2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a16      	ldr	r2, [pc, #88]	@ (800563c <TIM_Base_SetConfig+0x130>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00b      	beq.n	80055fe <TIM_Base_SetConfig+0xf2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a15      	ldr	r2, [pc, #84]	@ (8005640 <TIM_Base_SetConfig+0x134>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d007      	beq.n	80055fe <TIM_Base_SetConfig+0xf2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a14      	ldr	r2, [pc, #80]	@ (8005644 <TIM_Base_SetConfig+0x138>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d003      	beq.n	80055fe <TIM_Base_SetConfig+0xf2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a13      	ldr	r2, [pc, #76]	@ (8005648 <TIM_Base_SetConfig+0x13c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d103      	bne.n	8005606 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	691a      	ldr	r2, [r3, #16]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f043 0204 	orr.w	r2, r3, #4
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	601a      	str	r2, [r3, #0]
}
 800561e:	bf00      	nop
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40010000 	.word	0x40010000
 8005630:	40000400 	.word	0x40000400
 8005634:	40000800 	.word	0x40000800
 8005638:	40000c00 	.word	0x40000c00
 800563c:	40010400 	.word	0x40010400
 8005640:	40014000 	.word	0x40014000
 8005644:	40014400 	.word	0x40014400
 8005648:	40014800 	.word	0x40014800

0800564c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f023 0201 	bic.w	r2, r3, #1
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f023 030a 	bic.w	r3, r3, #10
 8005688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b087      	sub	sp, #28
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	f023 0210 	bic.w	r2, r3, #16
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	031b      	lsls	r3, r3, #12
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
	...

0800570c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4b09      	ldr	r3, [pc, #36]	@ (8005744 <TIM_ITRx_SetConfig+0x38>)
 8005720:	4013      	ands	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4313      	orrs	r3, r2
 800572a:	f043 0307 	orr.w	r3, r3, #7
 800572e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	609a      	str	r2, [r3, #8]
}
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	ffcfff8f 	.word	0xffcfff8f

08005748 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005762:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	021a      	lsls	r2, r3, #8
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	431a      	orrs	r2, r3
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4313      	orrs	r3, r2
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	609a      	str	r2, [r3, #8]
}
 800577c:	bf00      	nop
 800577e:	371c      	adds	r7, #28
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800579c:	2302      	movs	r3, #2
 800579e:	e06d      	b.n	800587c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a30      	ldr	r2, [pc, #192]	@ (8005888 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a2f      	ldr	r2, [pc, #188]	@ (800588c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d108      	bne.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80057da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a20      	ldr	r2, [pc, #128]	@ (8005888 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d022      	beq.n	8005850 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005812:	d01d      	beq.n	8005850 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1d      	ldr	r2, [pc, #116]	@ (8005890 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d018      	beq.n	8005850 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1c      	ldr	r2, [pc, #112]	@ (8005894 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d013      	beq.n	8005850 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a1a      	ldr	r2, [pc, #104]	@ (8005898 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00e      	beq.n	8005850 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a15      	ldr	r2, [pc, #84]	@ (800588c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d009      	beq.n	8005850 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a16      	ldr	r2, [pc, #88]	@ (800589c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d004      	beq.n	8005850 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a15      	ldr	r2, [pc, #84]	@ (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d10c      	bne.n	800586a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005856:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	4313      	orrs	r3, r2
 8005860:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	40010000 	.word	0x40010000
 800588c:	40010400 	.word	0x40010400
 8005890:	40000400 	.word	0x40000400
 8005894:	40000800 	.word	0x40000800
 8005898:	40000c00 	.word	0x40000c00
 800589c:	40001800 	.word	0x40001800
 80058a0:	40014000 	.word	0x40014000

080058a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e042      	b.n	800593c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d106      	bne.n	80058ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7fb fbcf 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2224      	movs	r2, #36	@ 0x24
 80058d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0201 	bic.w	r2, r2, #1
 80058e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fe1e 	bl	8006530 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f8b3 	bl	8005a60 <UART_SetConfig>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e01b      	b.n	800593c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0201 	orr.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fe9d 	bl	8006674 <UART_CheckIdleState>
 800593a:	4603      	mov	r3, r0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08a      	sub	sp, #40	@ 0x28
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	603b      	str	r3, [r7, #0]
 8005950:	4613      	mov	r3, r2
 8005952:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800595a:	2b20      	cmp	r3, #32
 800595c:	d17b      	bne.n	8005a56 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <HAL_UART_Transmit+0x26>
 8005964:	88fb      	ldrh	r3, [r7, #6]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e074      	b.n	8005a58 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2221      	movs	r2, #33	@ 0x21
 800597a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800597e:	f7fb fc91 	bl	80012a4 <HAL_GetTick>
 8005982:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	88fa      	ldrh	r2, [r7, #6]
 8005988:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	88fa      	ldrh	r2, [r7, #6]
 8005990:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800599c:	d108      	bne.n	80059b0 <HAL_UART_Transmit+0x6c>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d104      	bne.n	80059b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80059a6:	2300      	movs	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	61bb      	str	r3, [r7, #24]
 80059ae:	e003      	b.n	80059b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059b4:	2300      	movs	r3, #0
 80059b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059b8:	e030      	b.n	8005a1c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2200      	movs	r2, #0
 80059c2:	2180      	movs	r1, #128	@ 0x80
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 feff 	bl	80067c8 <UART_WaitOnFlagUntilTimeout>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e03d      	b.n	8005a58 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10b      	bne.n	80059fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	3302      	adds	r3, #2
 80059f6:	61bb      	str	r3, [r7, #24]
 80059f8:	e007      	b.n	8005a0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	781a      	ldrb	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	3301      	adds	r3, #1
 8005a08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1c8      	bne.n	80059ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2140      	movs	r1, #64	@ 0x40
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 fec8 	bl	80067c8 <UART_WaitOnFlagUntilTimeout>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d005      	beq.n	8005a4a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e006      	b.n	8005a58 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	e000      	b.n	8005a58 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005a56:	2302      	movs	r3, #2
  }
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3720      	adds	r7, #32
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a64:	b092      	sub	sp, #72	@ 0x48
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	4bbe      	ldr	r3, [pc, #760]	@ (8005d88 <UART_SetConfig+0x328>)
 8005a90:	4013      	ands	r3, r2
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	6812      	ldr	r2, [r2, #0]
 8005a96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a98:	430b      	orrs	r3, r1
 8005a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4ab3      	ldr	r2, [pc, #716]	@ (8005d8c <UART_SetConfig+0x32c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d004      	beq.n	8005acc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	4baf      	ldr	r3, [pc, #700]	@ (8005d90 <UART_SetConfig+0x330>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	6812      	ldr	r2, [r2, #0]
 8005ada:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005adc:	430b      	orrs	r3, r1
 8005ade:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae6:	f023 010f 	bic.w	r1, r3, #15
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4aa6      	ldr	r2, [pc, #664]	@ (8005d94 <UART_SetConfig+0x334>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d177      	bne.n	8005bf0 <UART_SetConfig+0x190>
 8005b00:	4ba5      	ldr	r3, [pc, #660]	@ (8005d98 <UART_SetConfig+0x338>)
 8005b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b08:	2b28      	cmp	r3, #40	@ 0x28
 8005b0a:	d86d      	bhi.n	8005be8 <UART_SetConfig+0x188>
 8005b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b14 <UART_SetConfig+0xb4>)
 8005b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b12:	bf00      	nop
 8005b14:	08005bb9 	.word	0x08005bb9
 8005b18:	08005be9 	.word	0x08005be9
 8005b1c:	08005be9 	.word	0x08005be9
 8005b20:	08005be9 	.word	0x08005be9
 8005b24:	08005be9 	.word	0x08005be9
 8005b28:	08005be9 	.word	0x08005be9
 8005b2c:	08005be9 	.word	0x08005be9
 8005b30:	08005be9 	.word	0x08005be9
 8005b34:	08005bc1 	.word	0x08005bc1
 8005b38:	08005be9 	.word	0x08005be9
 8005b3c:	08005be9 	.word	0x08005be9
 8005b40:	08005be9 	.word	0x08005be9
 8005b44:	08005be9 	.word	0x08005be9
 8005b48:	08005be9 	.word	0x08005be9
 8005b4c:	08005be9 	.word	0x08005be9
 8005b50:	08005be9 	.word	0x08005be9
 8005b54:	08005bc9 	.word	0x08005bc9
 8005b58:	08005be9 	.word	0x08005be9
 8005b5c:	08005be9 	.word	0x08005be9
 8005b60:	08005be9 	.word	0x08005be9
 8005b64:	08005be9 	.word	0x08005be9
 8005b68:	08005be9 	.word	0x08005be9
 8005b6c:	08005be9 	.word	0x08005be9
 8005b70:	08005be9 	.word	0x08005be9
 8005b74:	08005bd1 	.word	0x08005bd1
 8005b78:	08005be9 	.word	0x08005be9
 8005b7c:	08005be9 	.word	0x08005be9
 8005b80:	08005be9 	.word	0x08005be9
 8005b84:	08005be9 	.word	0x08005be9
 8005b88:	08005be9 	.word	0x08005be9
 8005b8c:	08005be9 	.word	0x08005be9
 8005b90:	08005be9 	.word	0x08005be9
 8005b94:	08005bd9 	.word	0x08005bd9
 8005b98:	08005be9 	.word	0x08005be9
 8005b9c:	08005be9 	.word	0x08005be9
 8005ba0:	08005be9 	.word	0x08005be9
 8005ba4:	08005be9 	.word	0x08005be9
 8005ba8:	08005be9 	.word	0x08005be9
 8005bac:	08005be9 	.word	0x08005be9
 8005bb0:	08005be9 	.word	0x08005be9
 8005bb4:	08005be1 	.word	0x08005be1
 8005bb8:	2301      	movs	r3, #1
 8005bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bbe:	e222      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005bc0:	2304      	movs	r3, #4
 8005bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bc6:	e21e      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005bc8:	2308      	movs	r3, #8
 8005bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bce:	e21a      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005bd0:	2310      	movs	r3, #16
 8005bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd6:	e216      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005bd8:	2320      	movs	r3, #32
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bde:	e212      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005be0:	2340      	movs	r3, #64	@ 0x40
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be6:	e20e      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005be8:	2380      	movs	r3, #128	@ 0x80
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bee:	e20a      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a69      	ldr	r2, [pc, #420]	@ (8005d9c <UART_SetConfig+0x33c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d130      	bne.n	8005c5c <UART_SetConfig+0x1fc>
 8005bfa:	4b67      	ldr	r3, [pc, #412]	@ (8005d98 <UART_SetConfig+0x338>)
 8005bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	2b05      	cmp	r3, #5
 8005c04:	d826      	bhi.n	8005c54 <UART_SetConfig+0x1f4>
 8005c06:	a201      	add	r2, pc, #4	@ (adr r2, 8005c0c <UART_SetConfig+0x1ac>)
 8005c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0c:	08005c25 	.word	0x08005c25
 8005c10:	08005c2d 	.word	0x08005c2d
 8005c14:	08005c35 	.word	0x08005c35
 8005c18:	08005c3d 	.word	0x08005c3d
 8005c1c:	08005c45 	.word	0x08005c45
 8005c20:	08005c4d 	.word	0x08005c4d
 8005c24:	2300      	movs	r3, #0
 8005c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c2a:	e1ec      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c32:	e1e8      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005c34:	2308      	movs	r3, #8
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3a:	e1e4      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c42:	e1e0      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005c44:	2320      	movs	r3, #32
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4a:	e1dc      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005c4c:	2340      	movs	r3, #64	@ 0x40
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c52:	e1d8      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005c54:	2380      	movs	r3, #128	@ 0x80
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5a:	e1d4      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a4f      	ldr	r2, [pc, #316]	@ (8005da0 <UART_SetConfig+0x340>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d130      	bne.n	8005cc8 <UART_SetConfig+0x268>
 8005c66:	4b4c      	ldr	r3, [pc, #304]	@ (8005d98 <UART_SetConfig+0x338>)
 8005c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c6a:	f003 0307 	and.w	r3, r3, #7
 8005c6e:	2b05      	cmp	r3, #5
 8005c70:	d826      	bhi.n	8005cc0 <UART_SetConfig+0x260>
 8005c72:	a201      	add	r2, pc, #4	@ (adr r2, 8005c78 <UART_SetConfig+0x218>)
 8005c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c78:	08005c91 	.word	0x08005c91
 8005c7c:	08005c99 	.word	0x08005c99
 8005c80:	08005ca1 	.word	0x08005ca1
 8005c84:	08005ca9 	.word	0x08005ca9
 8005c88:	08005cb1 	.word	0x08005cb1
 8005c8c:	08005cb9 	.word	0x08005cb9
 8005c90:	2300      	movs	r3, #0
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c96:	e1b6      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005c98:	2304      	movs	r3, #4
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9e:	e1b2      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005ca0:	2308      	movs	r3, #8
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca6:	e1ae      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005ca8:	2310      	movs	r3, #16
 8005caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cae:	e1aa      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005cb0:	2320      	movs	r3, #32
 8005cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb6:	e1a6      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005cb8:	2340      	movs	r3, #64	@ 0x40
 8005cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cbe:	e1a2      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005cc0:	2380      	movs	r3, #128	@ 0x80
 8005cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc6:	e19e      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a35      	ldr	r2, [pc, #212]	@ (8005da4 <UART_SetConfig+0x344>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d130      	bne.n	8005d34 <UART_SetConfig+0x2d4>
 8005cd2:	4b31      	ldr	r3, [pc, #196]	@ (8005d98 <UART_SetConfig+0x338>)
 8005cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	2b05      	cmp	r3, #5
 8005cdc:	d826      	bhi.n	8005d2c <UART_SetConfig+0x2cc>
 8005cde:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce4 <UART_SetConfig+0x284>)
 8005ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce4:	08005cfd 	.word	0x08005cfd
 8005ce8:	08005d05 	.word	0x08005d05
 8005cec:	08005d0d 	.word	0x08005d0d
 8005cf0:	08005d15 	.word	0x08005d15
 8005cf4:	08005d1d 	.word	0x08005d1d
 8005cf8:	08005d25 	.word	0x08005d25
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d02:	e180      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005d04:	2304      	movs	r3, #4
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0a:	e17c      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005d0c:	2308      	movs	r3, #8
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d12:	e178      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005d14:	2310      	movs	r3, #16
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1a:	e174      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005d1c:	2320      	movs	r3, #32
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d22:	e170      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005d24:	2340      	movs	r3, #64	@ 0x40
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2a:	e16c      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005d2c:	2380      	movs	r3, #128	@ 0x80
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d32:	e168      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a1b      	ldr	r2, [pc, #108]	@ (8005da8 <UART_SetConfig+0x348>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d142      	bne.n	8005dc4 <UART_SetConfig+0x364>
 8005d3e:	4b16      	ldr	r3, [pc, #88]	@ (8005d98 <UART_SetConfig+0x338>)
 8005d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	2b05      	cmp	r3, #5
 8005d48:	d838      	bhi.n	8005dbc <UART_SetConfig+0x35c>
 8005d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d50 <UART_SetConfig+0x2f0>)
 8005d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d50:	08005d69 	.word	0x08005d69
 8005d54:	08005d71 	.word	0x08005d71
 8005d58:	08005d79 	.word	0x08005d79
 8005d5c:	08005d81 	.word	0x08005d81
 8005d60:	08005dad 	.word	0x08005dad
 8005d64:	08005db5 	.word	0x08005db5
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6e:	e14a      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005d70:	2304      	movs	r3, #4
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d76:	e146      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005d78:	2308      	movs	r3, #8
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7e:	e142      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005d80:	2310      	movs	r3, #16
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d86:	e13e      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005d88:	cfff69f3 	.word	0xcfff69f3
 8005d8c:	58000c00 	.word	0x58000c00
 8005d90:	11fff4ff 	.word	0x11fff4ff
 8005d94:	40011000 	.word	0x40011000
 8005d98:	58024400 	.word	0x58024400
 8005d9c:	40004400 	.word	0x40004400
 8005da0:	40004800 	.word	0x40004800
 8005da4:	40004c00 	.word	0x40004c00
 8005da8:	40005000 	.word	0x40005000
 8005dac:	2320      	movs	r3, #32
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db2:	e128      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005db4:	2340      	movs	r3, #64	@ 0x40
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dba:	e124      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005dbc:	2380      	movs	r3, #128	@ 0x80
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dc2:	e120      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4acb      	ldr	r2, [pc, #812]	@ (80060f8 <UART_SetConfig+0x698>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d176      	bne.n	8005ebc <UART_SetConfig+0x45c>
 8005dce:	4bcb      	ldr	r3, [pc, #812]	@ (80060fc <UART_SetConfig+0x69c>)
 8005dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dd6:	2b28      	cmp	r3, #40	@ 0x28
 8005dd8:	d86c      	bhi.n	8005eb4 <UART_SetConfig+0x454>
 8005dda:	a201      	add	r2, pc, #4	@ (adr r2, 8005de0 <UART_SetConfig+0x380>)
 8005ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de0:	08005e85 	.word	0x08005e85
 8005de4:	08005eb5 	.word	0x08005eb5
 8005de8:	08005eb5 	.word	0x08005eb5
 8005dec:	08005eb5 	.word	0x08005eb5
 8005df0:	08005eb5 	.word	0x08005eb5
 8005df4:	08005eb5 	.word	0x08005eb5
 8005df8:	08005eb5 	.word	0x08005eb5
 8005dfc:	08005eb5 	.word	0x08005eb5
 8005e00:	08005e8d 	.word	0x08005e8d
 8005e04:	08005eb5 	.word	0x08005eb5
 8005e08:	08005eb5 	.word	0x08005eb5
 8005e0c:	08005eb5 	.word	0x08005eb5
 8005e10:	08005eb5 	.word	0x08005eb5
 8005e14:	08005eb5 	.word	0x08005eb5
 8005e18:	08005eb5 	.word	0x08005eb5
 8005e1c:	08005eb5 	.word	0x08005eb5
 8005e20:	08005e95 	.word	0x08005e95
 8005e24:	08005eb5 	.word	0x08005eb5
 8005e28:	08005eb5 	.word	0x08005eb5
 8005e2c:	08005eb5 	.word	0x08005eb5
 8005e30:	08005eb5 	.word	0x08005eb5
 8005e34:	08005eb5 	.word	0x08005eb5
 8005e38:	08005eb5 	.word	0x08005eb5
 8005e3c:	08005eb5 	.word	0x08005eb5
 8005e40:	08005e9d 	.word	0x08005e9d
 8005e44:	08005eb5 	.word	0x08005eb5
 8005e48:	08005eb5 	.word	0x08005eb5
 8005e4c:	08005eb5 	.word	0x08005eb5
 8005e50:	08005eb5 	.word	0x08005eb5
 8005e54:	08005eb5 	.word	0x08005eb5
 8005e58:	08005eb5 	.word	0x08005eb5
 8005e5c:	08005eb5 	.word	0x08005eb5
 8005e60:	08005ea5 	.word	0x08005ea5
 8005e64:	08005eb5 	.word	0x08005eb5
 8005e68:	08005eb5 	.word	0x08005eb5
 8005e6c:	08005eb5 	.word	0x08005eb5
 8005e70:	08005eb5 	.word	0x08005eb5
 8005e74:	08005eb5 	.word	0x08005eb5
 8005e78:	08005eb5 	.word	0x08005eb5
 8005e7c:	08005eb5 	.word	0x08005eb5
 8005e80:	08005ead 	.word	0x08005ead
 8005e84:	2301      	movs	r3, #1
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8a:	e0bc      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005e8c:	2304      	movs	r3, #4
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e92:	e0b8      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005e94:	2308      	movs	r3, #8
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9a:	e0b4      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005e9c:	2310      	movs	r3, #16
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea2:	e0b0      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005ea4:	2320      	movs	r3, #32
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eaa:	e0ac      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005eac:	2340      	movs	r3, #64	@ 0x40
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb2:	e0a8      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005eb4:	2380      	movs	r3, #128	@ 0x80
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eba:	e0a4      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a8f      	ldr	r2, [pc, #572]	@ (8006100 <UART_SetConfig+0x6a0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d130      	bne.n	8005f28 <UART_SetConfig+0x4c8>
 8005ec6:	4b8d      	ldr	r3, [pc, #564]	@ (80060fc <UART_SetConfig+0x69c>)
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	2b05      	cmp	r3, #5
 8005ed0:	d826      	bhi.n	8005f20 <UART_SetConfig+0x4c0>
 8005ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed8 <UART_SetConfig+0x478>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005ef1 	.word	0x08005ef1
 8005edc:	08005ef9 	.word	0x08005ef9
 8005ee0:	08005f01 	.word	0x08005f01
 8005ee4:	08005f09 	.word	0x08005f09
 8005ee8:	08005f11 	.word	0x08005f11
 8005eec:	08005f19 	.word	0x08005f19
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef6:	e086      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005ef8:	2304      	movs	r3, #4
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efe:	e082      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005f00:	2308      	movs	r3, #8
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f06:	e07e      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0e:	e07a      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005f10:	2320      	movs	r3, #32
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f16:	e076      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005f18:	2340      	movs	r3, #64	@ 0x40
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1e:	e072      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005f20:	2380      	movs	r3, #128	@ 0x80
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f26:	e06e      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a75      	ldr	r2, [pc, #468]	@ (8006104 <UART_SetConfig+0x6a4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d130      	bne.n	8005f94 <UART_SetConfig+0x534>
 8005f32:	4b72      	ldr	r3, [pc, #456]	@ (80060fc <UART_SetConfig+0x69c>)
 8005f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	2b05      	cmp	r3, #5
 8005f3c:	d826      	bhi.n	8005f8c <UART_SetConfig+0x52c>
 8005f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f44 <UART_SetConfig+0x4e4>)
 8005f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f44:	08005f5d 	.word	0x08005f5d
 8005f48:	08005f65 	.word	0x08005f65
 8005f4c:	08005f6d 	.word	0x08005f6d
 8005f50:	08005f75 	.word	0x08005f75
 8005f54:	08005f7d 	.word	0x08005f7d
 8005f58:	08005f85 	.word	0x08005f85
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f62:	e050      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005f64:	2304      	movs	r3, #4
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e04c      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005f6c:	2308      	movs	r3, #8
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e048      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005f74:	2310      	movs	r3, #16
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7a:	e044      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005f7c:	2320      	movs	r3, #32
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f82:	e040      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005f84:	2340      	movs	r3, #64	@ 0x40
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8a:	e03c      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005f8c:	2380      	movs	r3, #128	@ 0x80
 8005f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f92:	e038      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a5b      	ldr	r2, [pc, #364]	@ (8006108 <UART_SetConfig+0x6a8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d130      	bne.n	8006000 <UART_SetConfig+0x5a0>
 8005f9e:	4b57      	ldr	r3, [pc, #348]	@ (80060fc <UART_SetConfig+0x69c>)
 8005fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	2b05      	cmp	r3, #5
 8005fa8:	d826      	bhi.n	8005ff8 <UART_SetConfig+0x598>
 8005faa:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb0 <UART_SetConfig+0x550>)
 8005fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb0:	08005fc9 	.word	0x08005fc9
 8005fb4:	08005fd1 	.word	0x08005fd1
 8005fb8:	08005fd9 	.word	0x08005fd9
 8005fbc:	08005fe1 	.word	0x08005fe1
 8005fc0:	08005fe9 	.word	0x08005fe9
 8005fc4:	08005ff1 	.word	0x08005ff1
 8005fc8:	2302      	movs	r3, #2
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fce:	e01a      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005fd0:	2304      	movs	r3, #4
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd6:	e016      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005fd8:	2308      	movs	r3, #8
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fde:	e012      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005fe0:	2310      	movs	r3, #16
 8005fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe6:	e00e      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005fe8:	2320      	movs	r3, #32
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fee:	e00a      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005ff0:	2340      	movs	r3, #64	@ 0x40
 8005ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff6:	e006      	b.n	8006006 <UART_SetConfig+0x5a6>
 8005ff8:	2380      	movs	r3, #128	@ 0x80
 8005ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffe:	e002      	b.n	8006006 <UART_SetConfig+0x5a6>
 8006000:	2380      	movs	r3, #128	@ 0x80
 8006002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a3f      	ldr	r2, [pc, #252]	@ (8006108 <UART_SetConfig+0x6a8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	f040 80f8 	bne.w	8006202 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006012:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006016:	2b20      	cmp	r3, #32
 8006018:	dc46      	bgt.n	80060a8 <UART_SetConfig+0x648>
 800601a:	2b02      	cmp	r3, #2
 800601c:	f2c0 8082 	blt.w	8006124 <UART_SetConfig+0x6c4>
 8006020:	3b02      	subs	r3, #2
 8006022:	2b1e      	cmp	r3, #30
 8006024:	d87e      	bhi.n	8006124 <UART_SetConfig+0x6c4>
 8006026:	a201      	add	r2, pc, #4	@ (adr r2, 800602c <UART_SetConfig+0x5cc>)
 8006028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602c:	080060af 	.word	0x080060af
 8006030:	08006125 	.word	0x08006125
 8006034:	080060b7 	.word	0x080060b7
 8006038:	08006125 	.word	0x08006125
 800603c:	08006125 	.word	0x08006125
 8006040:	08006125 	.word	0x08006125
 8006044:	080060c7 	.word	0x080060c7
 8006048:	08006125 	.word	0x08006125
 800604c:	08006125 	.word	0x08006125
 8006050:	08006125 	.word	0x08006125
 8006054:	08006125 	.word	0x08006125
 8006058:	08006125 	.word	0x08006125
 800605c:	08006125 	.word	0x08006125
 8006060:	08006125 	.word	0x08006125
 8006064:	080060d7 	.word	0x080060d7
 8006068:	08006125 	.word	0x08006125
 800606c:	08006125 	.word	0x08006125
 8006070:	08006125 	.word	0x08006125
 8006074:	08006125 	.word	0x08006125
 8006078:	08006125 	.word	0x08006125
 800607c:	08006125 	.word	0x08006125
 8006080:	08006125 	.word	0x08006125
 8006084:	08006125 	.word	0x08006125
 8006088:	08006125 	.word	0x08006125
 800608c:	08006125 	.word	0x08006125
 8006090:	08006125 	.word	0x08006125
 8006094:	08006125 	.word	0x08006125
 8006098:	08006125 	.word	0x08006125
 800609c:	08006125 	.word	0x08006125
 80060a0:	08006125 	.word	0x08006125
 80060a4:	08006117 	.word	0x08006117
 80060a8:	2b40      	cmp	r3, #64	@ 0x40
 80060aa:	d037      	beq.n	800611c <UART_SetConfig+0x6bc>
 80060ac:	e03a      	b.n	8006124 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80060ae:	f7fe fcbb 	bl	8004a28 <HAL_RCCEx_GetD3PCLK1Freq>
 80060b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80060b4:	e03c      	b.n	8006130 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fe fcca 	bl	8004a54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060c4:	e034      	b.n	8006130 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060c6:	f107 0318 	add.w	r3, r7, #24
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fe fe16 	bl	8004cfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060d4:	e02c      	b.n	8006130 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060d6:	4b09      	ldr	r3, [pc, #36]	@ (80060fc <UART_SetConfig+0x69c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d016      	beq.n	8006110 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060e2:	4b06      	ldr	r3, [pc, #24]	@ (80060fc <UART_SetConfig+0x69c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	08db      	lsrs	r3, r3, #3
 80060e8:	f003 0303 	and.w	r3, r3, #3
 80060ec:	4a07      	ldr	r2, [pc, #28]	@ (800610c <UART_SetConfig+0x6ac>)
 80060ee:	fa22 f303 	lsr.w	r3, r2, r3
 80060f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060f4:	e01c      	b.n	8006130 <UART_SetConfig+0x6d0>
 80060f6:	bf00      	nop
 80060f8:	40011400 	.word	0x40011400
 80060fc:	58024400 	.word	0x58024400
 8006100:	40007800 	.word	0x40007800
 8006104:	40007c00 	.word	0x40007c00
 8006108:	58000c00 	.word	0x58000c00
 800610c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006110:	4b9d      	ldr	r3, [pc, #628]	@ (8006388 <UART_SetConfig+0x928>)
 8006112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006114:	e00c      	b.n	8006130 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006116:	4b9d      	ldr	r3, [pc, #628]	@ (800638c <UART_SetConfig+0x92c>)
 8006118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800611a:	e009      	b.n	8006130 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800611c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006122:	e005      	b.n	8006130 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800612e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 81de 	beq.w	80064f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613c:	4a94      	ldr	r2, [pc, #592]	@ (8006390 <UART_SetConfig+0x930>)
 800613e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006142:	461a      	mov	r2, r3
 8006144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006146:	fbb3 f3f2 	udiv	r3, r3, r2
 800614a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	4613      	mov	r3, r2
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	4413      	add	r3, r2
 8006156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006158:	429a      	cmp	r2, r3
 800615a:	d305      	bcc.n	8006168 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006164:	429a      	cmp	r2, r3
 8006166:	d903      	bls.n	8006170 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800616e:	e1c1      	b.n	80064f4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006172:	2200      	movs	r2, #0
 8006174:	60bb      	str	r3, [r7, #8]
 8006176:	60fa      	str	r2, [r7, #12]
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617c:	4a84      	ldr	r2, [pc, #528]	@ (8006390 <UART_SetConfig+0x930>)
 800617e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006182:	b29b      	uxth	r3, r3
 8006184:	2200      	movs	r2, #0
 8006186:	603b      	str	r3, [r7, #0]
 8006188:	607a      	str	r2, [r7, #4]
 800618a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800618e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006192:	f7fa f8f5 	bl	8000380 <__aeabi_uldivmod>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4610      	mov	r0, r2
 800619c:	4619      	mov	r1, r3
 800619e:	f04f 0200 	mov.w	r2, #0
 80061a2:	f04f 0300 	mov.w	r3, #0
 80061a6:	020b      	lsls	r3, r1, #8
 80061a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80061ac:	0202      	lsls	r2, r0, #8
 80061ae:	6979      	ldr	r1, [r7, #20]
 80061b0:	6849      	ldr	r1, [r1, #4]
 80061b2:	0849      	lsrs	r1, r1, #1
 80061b4:	2000      	movs	r0, #0
 80061b6:	460c      	mov	r4, r1
 80061b8:	4605      	mov	r5, r0
 80061ba:	eb12 0804 	adds.w	r8, r2, r4
 80061be:	eb43 0905 	adc.w	r9, r3, r5
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	469a      	mov	sl, r3
 80061ca:	4693      	mov	fp, r2
 80061cc:	4652      	mov	r2, sl
 80061ce:	465b      	mov	r3, fp
 80061d0:	4640      	mov	r0, r8
 80061d2:	4649      	mov	r1, r9
 80061d4:	f7fa f8d4 	bl	8000380 <__aeabi_uldivmod>
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4613      	mov	r3, r2
 80061de:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061e6:	d308      	bcc.n	80061fa <UART_SetConfig+0x79a>
 80061e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061ee:	d204      	bcs.n	80061fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061f6:	60da      	str	r2, [r3, #12]
 80061f8:	e17c      	b.n	80064f4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006200:	e178      	b.n	80064f4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800620a:	f040 80c5 	bne.w	8006398 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800620e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006212:	2b20      	cmp	r3, #32
 8006214:	dc48      	bgt.n	80062a8 <UART_SetConfig+0x848>
 8006216:	2b00      	cmp	r3, #0
 8006218:	db7b      	blt.n	8006312 <UART_SetConfig+0x8b2>
 800621a:	2b20      	cmp	r3, #32
 800621c:	d879      	bhi.n	8006312 <UART_SetConfig+0x8b2>
 800621e:	a201      	add	r2, pc, #4	@ (adr r2, 8006224 <UART_SetConfig+0x7c4>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	080062af 	.word	0x080062af
 8006228:	080062b7 	.word	0x080062b7
 800622c:	08006313 	.word	0x08006313
 8006230:	08006313 	.word	0x08006313
 8006234:	080062bf 	.word	0x080062bf
 8006238:	08006313 	.word	0x08006313
 800623c:	08006313 	.word	0x08006313
 8006240:	08006313 	.word	0x08006313
 8006244:	080062cf 	.word	0x080062cf
 8006248:	08006313 	.word	0x08006313
 800624c:	08006313 	.word	0x08006313
 8006250:	08006313 	.word	0x08006313
 8006254:	08006313 	.word	0x08006313
 8006258:	08006313 	.word	0x08006313
 800625c:	08006313 	.word	0x08006313
 8006260:	08006313 	.word	0x08006313
 8006264:	080062df 	.word	0x080062df
 8006268:	08006313 	.word	0x08006313
 800626c:	08006313 	.word	0x08006313
 8006270:	08006313 	.word	0x08006313
 8006274:	08006313 	.word	0x08006313
 8006278:	08006313 	.word	0x08006313
 800627c:	08006313 	.word	0x08006313
 8006280:	08006313 	.word	0x08006313
 8006284:	08006313 	.word	0x08006313
 8006288:	08006313 	.word	0x08006313
 800628c:	08006313 	.word	0x08006313
 8006290:	08006313 	.word	0x08006313
 8006294:	08006313 	.word	0x08006313
 8006298:	08006313 	.word	0x08006313
 800629c:	08006313 	.word	0x08006313
 80062a0:	08006313 	.word	0x08006313
 80062a4:	08006305 	.word	0x08006305
 80062a8:	2b40      	cmp	r3, #64	@ 0x40
 80062aa:	d02e      	beq.n	800630a <UART_SetConfig+0x8aa>
 80062ac:	e031      	b.n	8006312 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062ae:	f7fd f985 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 80062b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062b4:	e033      	b.n	800631e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062b6:	f7fd f997 	bl	80035e8 <HAL_RCC_GetPCLK2Freq>
 80062ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062bc:	e02f      	b.n	800631e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fe fbc6 	bl	8004a54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062cc:	e027      	b.n	800631e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062ce:	f107 0318 	add.w	r3, r7, #24
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe fd12 	bl	8004cfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062dc:	e01f      	b.n	800631e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062de:	4b2d      	ldr	r3, [pc, #180]	@ (8006394 <UART_SetConfig+0x934>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0320 	and.w	r3, r3, #32
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d009      	beq.n	80062fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062ea:	4b2a      	ldr	r3, [pc, #168]	@ (8006394 <UART_SetConfig+0x934>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	08db      	lsrs	r3, r3, #3
 80062f0:	f003 0303 	and.w	r3, r3, #3
 80062f4:	4a24      	ldr	r2, [pc, #144]	@ (8006388 <UART_SetConfig+0x928>)
 80062f6:	fa22 f303 	lsr.w	r3, r2, r3
 80062fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062fc:	e00f      	b.n	800631e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80062fe:	4b22      	ldr	r3, [pc, #136]	@ (8006388 <UART_SetConfig+0x928>)
 8006300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006302:	e00c      	b.n	800631e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006304:	4b21      	ldr	r3, [pc, #132]	@ (800638c <UART_SetConfig+0x92c>)
 8006306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006308:	e009      	b.n	800631e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800630a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800630e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006310:	e005      	b.n	800631e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800631c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800631e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 80e7 	beq.w	80064f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632a:	4a19      	ldr	r2, [pc, #100]	@ (8006390 <UART_SetConfig+0x930>)
 800632c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006330:	461a      	mov	r2, r3
 8006332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006334:	fbb3 f3f2 	udiv	r3, r3, r2
 8006338:	005a      	lsls	r2, r3, #1
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	085b      	lsrs	r3, r3, #1
 8006340:	441a      	add	r2, r3
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	fbb2 f3f3 	udiv	r3, r2, r3
 800634a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800634c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800634e:	2b0f      	cmp	r3, #15
 8006350:	d916      	bls.n	8006380 <UART_SetConfig+0x920>
 8006352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006358:	d212      	bcs.n	8006380 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800635a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635c:	b29b      	uxth	r3, r3
 800635e:	f023 030f 	bic.w	r3, r3, #15
 8006362:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006366:	085b      	lsrs	r3, r3, #1
 8006368:	b29b      	uxth	r3, r3
 800636a:	f003 0307 	and.w	r3, r3, #7
 800636e:	b29a      	uxth	r2, r3
 8006370:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006372:	4313      	orrs	r3, r2
 8006374:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800637c:	60da      	str	r2, [r3, #12]
 800637e:	e0b9      	b.n	80064f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006386:	e0b5      	b.n	80064f4 <UART_SetConfig+0xa94>
 8006388:	03d09000 	.word	0x03d09000
 800638c:	003d0900 	.word	0x003d0900
 8006390:	0800c4e8 	.word	0x0800c4e8
 8006394:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006398:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800639c:	2b20      	cmp	r3, #32
 800639e:	dc49      	bgt.n	8006434 <UART_SetConfig+0x9d4>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	db7c      	blt.n	800649e <UART_SetConfig+0xa3e>
 80063a4:	2b20      	cmp	r3, #32
 80063a6:	d87a      	bhi.n	800649e <UART_SetConfig+0xa3e>
 80063a8:	a201      	add	r2, pc, #4	@ (adr r2, 80063b0 <UART_SetConfig+0x950>)
 80063aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ae:	bf00      	nop
 80063b0:	0800643b 	.word	0x0800643b
 80063b4:	08006443 	.word	0x08006443
 80063b8:	0800649f 	.word	0x0800649f
 80063bc:	0800649f 	.word	0x0800649f
 80063c0:	0800644b 	.word	0x0800644b
 80063c4:	0800649f 	.word	0x0800649f
 80063c8:	0800649f 	.word	0x0800649f
 80063cc:	0800649f 	.word	0x0800649f
 80063d0:	0800645b 	.word	0x0800645b
 80063d4:	0800649f 	.word	0x0800649f
 80063d8:	0800649f 	.word	0x0800649f
 80063dc:	0800649f 	.word	0x0800649f
 80063e0:	0800649f 	.word	0x0800649f
 80063e4:	0800649f 	.word	0x0800649f
 80063e8:	0800649f 	.word	0x0800649f
 80063ec:	0800649f 	.word	0x0800649f
 80063f0:	0800646b 	.word	0x0800646b
 80063f4:	0800649f 	.word	0x0800649f
 80063f8:	0800649f 	.word	0x0800649f
 80063fc:	0800649f 	.word	0x0800649f
 8006400:	0800649f 	.word	0x0800649f
 8006404:	0800649f 	.word	0x0800649f
 8006408:	0800649f 	.word	0x0800649f
 800640c:	0800649f 	.word	0x0800649f
 8006410:	0800649f 	.word	0x0800649f
 8006414:	0800649f 	.word	0x0800649f
 8006418:	0800649f 	.word	0x0800649f
 800641c:	0800649f 	.word	0x0800649f
 8006420:	0800649f 	.word	0x0800649f
 8006424:	0800649f 	.word	0x0800649f
 8006428:	0800649f 	.word	0x0800649f
 800642c:	0800649f 	.word	0x0800649f
 8006430:	08006491 	.word	0x08006491
 8006434:	2b40      	cmp	r3, #64	@ 0x40
 8006436:	d02e      	beq.n	8006496 <UART_SetConfig+0xa36>
 8006438:	e031      	b.n	800649e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800643a:	f7fd f8bf 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 800643e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006440:	e033      	b.n	80064aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006442:	f7fd f8d1 	bl	80035e8 <HAL_RCC_GetPCLK2Freq>
 8006446:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006448:	e02f      	b.n	80064aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800644a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe fb00 	bl	8004a54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006458:	e027      	b.n	80064aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800645a:	f107 0318 	add.w	r3, r7, #24
 800645e:	4618      	mov	r0, r3
 8006460:	f7fe fc4c 	bl	8004cfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006468:	e01f      	b.n	80064aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800646a:	4b2d      	ldr	r3, [pc, #180]	@ (8006520 <UART_SetConfig+0xac0>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b00      	cmp	r3, #0
 8006474:	d009      	beq.n	800648a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006476:	4b2a      	ldr	r3, [pc, #168]	@ (8006520 <UART_SetConfig+0xac0>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	08db      	lsrs	r3, r3, #3
 800647c:	f003 0303 	and.w	r3, r3, #3
 8006480:	4a28      	ldr	r2, [pc, #160]	@ (8006524 <UART_SetConfig+0xac4>)
 8006482:	fa22 f303 	lsr.w	r3, r2, r3
 8006486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006488:	e00f      	b.n	80064aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800648a:	4b26      	ldr	r3, [pc, #152]	@ (8006524 <UART_SetConfig+0xac4>)
 800648c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800648e:	e00c      	b.n	80064aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006490:	4b25      	ldr	r3, [pc, #148]	@ (8006528 <UART_SetConfig+0xac8>)
 8006492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006494:	e009      	b.n	80064aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800649a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800649c:	e005      	b.n	80064aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80064a8:	bf00      	nop
    }

    if (pclk != 0U)
 80064aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d021      	beq.n	80064f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b4:	4a1d      	ldr	r2, [pc, #116]	@ (800652c <UART_SetConfig+0xacc>)
 80064b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ba:	461a      	mov	r2, r3
 80064bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064be:	fbb3 f2f2 	udiv	r2, r3, r2
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	085b      	lsrs	r3, r3, #1
 80064c8:	441a      	add	r2, r3
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d6:	2b0f      	cmp	r3, #15
 80064d8:	d909      	bls.n	80064ee <UART_SetConfig+0xa8e>
 80064da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064e0:	d205      	bcs.n	80064ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60da      	str	r2, [r3, #12]
 80064ec:	e002      	b.n	80064f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2201      	movs	r2, #1
 8006500:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2200      	movs	r2, #0
 8006508:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2200      	movs	r2, #0
 800650e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006510:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006514:	4618      	mov	r0, r3
 8006516:	3748      	adds	r7, #72	@ 0x48
 8006518:	46bd      	mov	sp, r7
 800651a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800651e:	bf00      	nop
 8006520:	58024400 	.word	0x58024400
 8006524:	03d09000 	.word	0x03d09000
 8006528:	003d0900 	.word	0x003d0900
 800652c:	0800c4e8 	.word	0x0800c4e8

08006530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00a      	beq.n	800655a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00a      	beq.n	800657c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00a      	beq.n	800659e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a2:	f003 0304 	and.w	r3, r3, #4
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c4:	f003 0310 	and.w	r3, r3, #16
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00a      	beq.n	80065e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e6:	f003 0320 	and.w	r3, r3, #32
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00a      	beq.n	8006604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01a      	beq.n	8006646 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800662a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800662e:	d10a      	bne.n	8006646 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	605a      	str	r2, [r3, #4]
  }
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b098      	sub	sp, #96	@ 0x60
 8006678:	af02      	add	r7, sp, #8
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006684:	f7fa fe0e 	bl	80012a4 <HAL_GetTick>
 8006688:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0308 	and.w	r3, r3, #8
 8006694:	2b08      	cmp	r3, #8
 8006696:	d12f      	bne.n	80066f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006698:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066a0:	2200      	movs	r2, #0
 80066a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f88e 	bl	80067c8 <UART_WaitOnFlagUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d022      	beq.n	80066f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80066d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066d8:	e841 2300 	strex	r3, r2, [r1]
 80066dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e6      	bne.n	80066b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e063      	b.n	80067c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b04      	cmp	r3, #4
 8006704:	d149      	bne.n	800679a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006706:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800670e:	2200      	movs	r2, #0
 8006710:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f857 	bl	80067c8 <UART_WaitOnFlagUntilTimeout>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d03c      	beq.n	800679a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	623b      	str	r3, [r7, #32]
   return(result);
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006734:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800673e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006740:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800674c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e6      	bne.n	8006720 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3308      	adds	r3, #8
 8006758:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	e853 3f00 	ldrex	r3, [r3]
 8006760:	60fb      	str	r3, [r7, #12]
   return(result);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f023 0301 	bic.w	r3, r3, #1
 8006768:	64bb      	str	r3, [r7, #72]	@ 0x48
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3308      	adds	r3, #8
 8006770:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006772:	61fa      	str	r2, [r7, #28]
 8006774:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006776:	69b9      	ldr	r1, [r7, #24]
 8006778:	69fa      	ldr	r2, [r7, #28]
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	617b      	str	r3, [r7, #20]
   return(result);
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e5      	bne.n	8006752 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e012      	b.n	80067c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2220      	movs	r2, #32
 800679e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2220      	movs	r2, #32
 80067a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3758      	adds	r7, #88	@ 0x58
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	4613      	mov	r3, r2
 80067d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067d8:	e04f      	b.n	800687a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e0:	d04b      	beq.n	800687a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e2:	f7fa fd5f 	bl	80012a4 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d302      	bcc.n	80067f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e04e      	b.n	800689a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0304 	and.w	r3, r3, #4
 8006806:	2b00      	cmp	r3, #0
 8006808:	d037      	beq.n	800687a <UART_WaitOnFlagUntilTimeout+0xb2>
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b80      	cmp	r3, #128	@ 0x80
 800680e:	d034      	beq.n	800687a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2b40      	cmp	r3, #64	@ 0x40
 8006814:	d031      	beq.n	800687a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	f003 0308 	and.w	r3, r3, #8
 8006820:	2b08      	cmp	r3, #8
 8006822:	d110      	bne.n	8006846 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2208      	movs	r2, #8
 800682a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 f839 	bl	80068a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2208      	movs	r2, #8
 8006836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e029      	b.n	800689a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006854:	d111      	bne.n	800687a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800685e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 f81f 	bl	80068a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2220      	movs	r2, #32
 800686a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e00f      	b.n	800689a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69da      	ldr	r2, [r3, #28]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	4013      	ands	r3, r2
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	429a      	cmp	r2, r3
 8006888:	bf0c      	ite	eq
 800688a:	2301      	moveq	r3, #1
 800688c:	2300      	movne	r3, #0
 800688e:	b2db      	uxtb	r3, r3
 8006890:	461a      	mov	r2, r3
 8006892:	79fb      	ldrb	r3, [r7, #7]
 8006894:	429a      	cmp	r2, r3
 8006896:	d0a0      	beq.n	80067da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
	...

080068a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b095      	sub	sp, #84	@ 0x54
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80068cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e6      	bne.n	80068ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3308      	adds	r3, #8
 80068e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	4b1e      	ldr	r3, [pc, #120]	@ (800696c <UART_EndRxTransfer+0xc8>)
 80068f2:	4013      	ands	r3, r2
 80068f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3308      	adds	r3, #8
 80068fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006900:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1e5      	bne.n	80068de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006916:	2b01      	cmp	r3, #1
 8006918:	d118      	bne.n	800694c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	60bb      	str	r3, [r7, #8]
   return(result);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f023 0310 	bic.w	r3, r3, #16
 800692e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6979      	ldr	r1, [r7, #20]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	613b      	str	r3, [r7, #16]
   return(result);
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e6      	bne.n	800691a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2220      	movs	r2, #32
 8006950:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006960:	bf00      	nop
 8006962:	3754      	adds	r7, #84	@ 0x54
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	effffffe 	.word	0xeffffffe

08006970 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <HAL_UARTEx_DisableFifoMode+0x16>
 8006982:	2302      	movs	r3, #2
 8006984:	e027      	b.n	80069d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2224      	movs	r2, #36	@ 0x24
 8006992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 0201 	bic.w	r2, r2, #1
 80069ac:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80069b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d101      	bne.n	80069fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069f6:	2302      	movs	r3, #2
 80069f8:	e02d      	b.n	8006a56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2224      	movs	r2, #36	@ 0x24
 8006a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0201 	bic.w	r2, r2, #1
 8006a20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f850 	bl	8006adc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d101      	bne.n	8006a76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a72:	2302      	movs	r3, #2
 8006a74:	e02d      	b.n	8006ad2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2224      	movs	r2, #36	@ 0x24
 8006a82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0201 	bic.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f812 	bl	8006adc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d108      	bne.n	8006afe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006afc:	e031      	b.n	8006b62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006afe:	2310      	movs	r3, #16
 8006b00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b02:	2310      	movs	r3, #16
 8006b04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	0e5b      	lsrs	r3, r3, #25
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	0f5b      	lsrs	r3, r3, #29
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b26:	7bbb      	ldrb	r3, [r7, #14]
 8006b28:	7b3a      	ldrb	r2, [r7, #12]
 8006b2a:	4911      	ldr	r1, [pc, #68]	@ (8006b70 <UARTEx_SetNbDataToProcess+0x94>)
 8006b2c:	5c8a      	ldrb	r2, [r1, r2]
 8006b2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b32:	7b3a      	ldrb	r2, [r7, #12]
 8006b34:	490f      	ldr	r1, [pc, #60]	@ (8006b74 <UARTEx_SetNbDataToProcess+0x98>)
 8006b36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b38:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	7b7a      	ldrb	r2, [r7, #13]
 8006b48:	4909      	ldr	r1, [pc, #36]	@ (8006b70 <UARTEx_SetNbDataToProcess+0x94>)
 8006b4a:	5c8a      	ldrb	r2, [r1, r2]
 8006b4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b50:	7b7a      	ldrb	r2, [r7, #13]
 8006b52:	4908      	ldr	r1, [pc, #32]	@ (8006b74 <UARTEx_SetNbDataToProcess+0x98>)
 8006b54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b56:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006b62:	bf00      	nop
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	0800c500 	.word	0x0800c500
 8006b74:	0800c508 	.word	0x0800c508

08006b78 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 fca2 	bl	80084d2 <VL53L0X_get_offset_calibration_data_micro_meter>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8006b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8006ba0:	b5b0      	push	{r4, r5, r7, lr}
 8006ba2:	b096      	sub	sp, #88	@ 0x58
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8006bae:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d107      	bne.n	8006bc6 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2188      	movs	r1, #136	@ 0x88
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f004 fe96 	bl	800b8ec <VL53L0X_WrByte>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006bd4:	f8a3 2152 	strh.w	r2, [r3, #338]	@ 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006bde:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a9e      	ldr	r2, [pc, #632]	@ (8006e60 <VL53L0X_DataInit+0x2c0>)
 8006be6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a9d      	ldr	r2, [pc, #628]	@ (8006e64 <VL53L0X_DataInit+0x2c4>)
 8006bee:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006bf8:	f107 0310 	add.w	r3, r7, #16
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fac0 	bl	8007184 <VL53L0X_GetDeviceParameters>
 8006c04:	4603      	mov	r3, r0
 8006c06:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8006c0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d112      	bne.n	8006c38 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8006c12:	2300      	movs	r3, #0
 8006c14:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8006c16:	2300      	movs	r3, #0
 8006c18:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f103 0410 	add.w	r4, r3, #16
 8006c20:	f107 0510 	add.w	r5, r7, #16
 8006c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2264      	movs	r2, #100	@ 0x64
 8006c3c:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8006c46:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8006c50:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006c5a:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006c66:	2201      	movs	r2, #1
 8006c68:	2180      	movs	r1, #128	@ 0x80
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f004 fe3e 	bl	800b8ec <VL53L0X_WrByte>
 8006c70:	4603      	mov	r3, r0
 8006c72:	461a      	mov	r2, r3
 8006c74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006c7e:	2201      	movs	r2, #1
 8006c80:	21ff      	movs	r1, #255	@ 0xff
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f004 fe32 	bl	800b8ec <VL53L0X_WrByte>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c90:	4313      	orrs	r3, r2
 8006c92:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006c96:	2200      	movs	r2, #0
 8006c98:	2100      	movs	r1, #0
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f004 fe26 	bl	800b8ec <VL53L0X_WrByte>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8006cae:	f107 030f 	add.w	r3, r7, #15
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	2191      	movs	r1, #145	@ 0x91
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f004 fe9a 	bl	800b9f0 <VL53L0X_RdByte>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8006cca:	7bfa      	ldrb	r2, [r7, #15]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f004 fe08 	bl	800b8ec <VL53L0X_WrByte>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006cea:	2200      	movs	r2, #0
 8006cec:	21ff      	movs	r1, #255	@ 0xff
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f004 fdfc 	bl	800b8ec <VL53L0X_WrByte>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006d02:	2200      	movs	r2, #0
 8006d04:	2180      	movs	r1, #128	@ 0x80
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f004 fdf0 	bl	800b8ec <VL53L0X_WrByte>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d14:	4313      	orrs	r3, r2
 8006d16:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d1e:	e014      	b.n	8006d4a <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8006d20:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d114      	bne.n	8006d52 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8006d28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fd31 	bl	8007798 <VL53L0X_SetLimitCheckEnable>
 8006d36:	4603      	mov	r3, r0
 8006d38:	461a      	mov	r2, r3
 8006d3a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d46:	3301      	adds	r3, #1
 8006d48:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d4c:	2b05      	cmp	r3, #5
 8006d4e:	dde7      	ble.n	8006d20 <VL53L0X_DataInit+0x180>
 8006d50:	e000      	b.n	8006d54 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8006d52:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8006d54:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d107      	bne.n	8006d6c <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2102      	movs	r1, #2
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fd19 	bl	8007798 <VL53L0X_SetLimitCheckEnable>
 8006d66:	4603      	mov	r3, r0
 8006d68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006d6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d107      	bne.n	8006d84 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006d74:	2200      	movs	r2, #0
 8006d76:	2103      	movs	r1, #3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fd0d 	bl	8007798 <VL53L0X_SetLimitCheckEnable>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006d84:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d107      	bne.n	8006d9c <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2104      	movs	r1, #4
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fd01 	bl	8007798 <VL53L0X_SetLimitCheckEnable>
 8006d96:	4603      	mov	r3, r0
 8006d98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006d9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d107      	bne.n	8006db4 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006da4:	2200      	movs	r2, #0
 8006da6:	2105      	movs	r1, #5
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fcf5 	bl	8007798 <VL53L0X_SetLimitCheckEnable>
 8006dae:	4603      	mov	r3, r0
 8006db0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8006db4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d108      	bne.n	8006dce <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006dbc:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fd98 	bl	80078f8 <VL53L0X_SetLimitCheckValue>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006dce:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d108      	bne.n	8006de8 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006dd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006dda:	2101      	movs	r1, #1
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fd8b 	bl	80078f8 <VL53L0X_SetLimitCheckValue>
 8006de2:	4603      	mov	r3, r0
 8006de4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006de8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d108      	bne.n	8006e02 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006df0:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 8006df4:	2102      	movs	r1, #2
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fd7e 	bl	80078f8 <VL53L0X_SetLimitCheckValue>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e02:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d107      	bne.n	8006e1a <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	2103      	movs	r1, #3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fd72 	bl	80078f8 <VL53L0X_SetLimitCheckValue>
 8006e14:	4603      	mov	r3, r0
 8006e16:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e1a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10f      	bne.n	8006e42 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	22ff      	movs	r2, #255	@ 0xff
 8006e26:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006e2a:	22ff      	movs	r2, #255	@ 0xff
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f004 fd5c 	bl	800b8ec <VL53L0X_WrByte>
 8006e34:	4603      	mov	r3, r0
 8006e36:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006e42:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d103      	bne.n	8006e52 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8006e52:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3758      	adds	r7, #88	@ 0x58
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	00016b85 	.word	0x00016b85
 8006e64:	000970a4 	.word	0x000970a4

08006e68 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8006e68:	b5b0      	push	{r4, r5, r7, lr}
 8006e6a:	b09e      	sub	sp, #120	@ 0x78
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e70:	2300      	movs	r3, #0
 8006e72:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8006e76:	f107 031c 	add.w	r3, r7, #28
 8006e7a:	2240      	movs	r2, #64	@ 0x40
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f004 fe82 	bl	800bb88 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t count = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	663b      	str	r3, [r7, #96]	@ 0x60
	uint8_t isApertureSpads = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f002 fa69 	bl	800937e <VL53L0X_get_info_from_device>
 8006eac:	4603      	mov	r3, r0
 8006eae:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8006eb8:	663b      	str	r3, [r7, #96]	@ 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8006ec0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006ec4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d80d      	bhi.n	8006ee8 <VL53L0X_StaticInit+0x80>
 8006ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d102      	bne.n	8006eda <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006ed4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ed6:	2b20      	cmp	r3, #32
 8006ed8:	d806      	bhi.n	8006ee8 <VL53L0X_StaticInit+0x80>
 8006eda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10e      	bne.n	8006f00 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8006ee2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ee4:	2b0c      	cmp	r3, #12
 8006ee6:	d90b      	bls.n	8006f00 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8006ee8:	f107 0218 	add.w	r2, r7, #24
 8006eec:	f107 0314 	add.w	r3, r7, #20
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 fce8 	bl	80088c8 <VL53L0X_perform_ref_spad_management>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8006efe:	e009      	b.n	8006f14 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8006f00:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f04:	461a      	mov	r2, r3
 8006f06:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f001 fee9 	bl	8008ce0 <VL53L0X_set_reference_spads>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8006f14:	4b93      	ldr	r3, [pc, #588]	@ (8007164 <VL53L0X_StaticInit+0x2fc>)
 8006f16:	66bb      	str	r3, [r7, #104]	@ 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8006f18:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10f      	bne.n	8006f40 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8006f26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8006f2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d104      	bne.n	8006f3c <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8006f38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f3a:	e001      	b.n	8006f40 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8006f3c:	4b89      	ldr	r3, [pc, #548]	@ (8007164 <VL53L0X_StaticInit+0x2fc>)
 8006f3e:	66bb      	str	r3, [r7, #104]	@ 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006f40:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d106      	bne.n	8006f56 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8006f48:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f003 fdb8 	bl	800aac0 <VL53L0X_load_tuning_settings>
 8006f50:	4603      	mov	r3, r0
 8006f52:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8006f56:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10a      	bne.n	8006f74 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8006f5e:	2300      	movs	r3, #0
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	2304      	movs	r3, #4
 8006f64:	2200      	movs	r2, #0
 8006f66:	2100      	movs	r1, #0
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 f8e5 	bl	8008138 <VL53L0X_SetGpioConfig>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006f74:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d121      	bne.n	8006fc0 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	21ff      	movs	r1, #255	@ 0xff
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f004 fcb3 	bl	800b8ec <VL53L0X_WrByte>
 8006f86:	4603      	mov	r3, r0
 8006f88:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006f8c:	f107 031a 	add.w	r3, r7, #26
 8006f90:	461a      	mov	r2, r3
 8006f92:	2184      	movs	r1, #132	@ 0x84
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f004 fd55 	bl	800ba44 <VL53L0X_RdWord>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006fa8:	2200      	movs	r2, #0
 8006faa:	21ff      	movs	r1, #255	@ 0xff
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f004 fc9d 	bl	800b8ec <VL53L0X_WrByte>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006fc0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d104      	bne.n	8006fd2 <VL53L0X_StaticInit+0x16a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8006fc8:	8b7b      	ldrh	r3, [r7, #26]
 8006fca:	011a      	lsls	r2, r3, #4
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006fd2:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d108      	bne.n	8006fec <VL53L0X_StaticInit+0x184>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006fda:	f107 031c 	add.w	r3, r7, #28
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f8cf 	bl	8007184 <VL53L0X_GetDeviceParameters>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8006fec:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d110      	bne.n	8007016 <VL53L0X_StaticInit+0x1ae>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8006ff4:	f107 0319 	add.w	r3, r7, #25
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f991 	bl	8007322 <VL53L0X_GetFractionEnable>
 8007000:	4603      	mov	r3, r0
 8007002:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8007006:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800700a:	2b00      	cmp	r3, #0
 800700c:	d103      	bne.n	8007016 <VL53L0X_StaticInit+0x1ae>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800700e:	7e7a      	ldrb	r2, [r7, #25]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007016:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10e      	bne.n	800703c <VL53L0X_StaticInit+0x1d4>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f103 0410 	add.w	r4, r3, #16
 8007024:	f107 051c 	add.w	r5, r7, #28
 8007028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800702a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800702c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800702e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007034:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800703c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007040:	2b00      	cmp	r3, #0
 8007042:	d111      	bne.n	8007068 <VL53L0X_StaticInit+0x200>
		Status = VL53L0X_RdByte(Dev,
 8007044:	f107 0319 	add.w	r3, r7, #25
 8007048:	461a      	mov	r2, r3
 800704a:	2101      	movs	r1, #1
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f004 fccf 	bl	800b9f0 <VL53L0X_RdByte>
 8007052:	4603      	mov	r3, r0
 8007054:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8007058:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800705c:	2b00      	cmp	r3, #0
 800705e:	d103      	bne.n	8007068 <VL53L0X_StaticInit+0x200>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8007060:	7e7a      	ldrb	r2, [r7, #25]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8007068:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800706c:	2b00      	cmp	r3, #0
 800706e:	d107      	bne.n	8007080 <VL53L0X_StaticInit+0x218>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007070:	2200      	movs	r2, #0
 8007072:	2100      	movs	r1, #0
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f9c9 	bl	800740c <VL53L0X_SetSequenceStepEnable>
 800707a:	4603      	mov	r3, r0
 800707c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007080:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007084:	2b00      	cmp	r3, #0
 8007086:	d107      	bne.n	8007098 <VL53L0X_StaticInit+0x230>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007088:	2200      	movs	r2, #0
 800708a:	2102      	movs	r1, #2
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f9bd 	bl	800740c <VL53L0X_SetSequenceStepEnable>
 8007092:	4603      	mov	r3, r0
 8007094:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8007098:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800709c:	2b00      	cmp	r3, #0
 800709e:	d103      	bne.n	80070a8 <VL53L0X_StaticInit+0x240>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2203      	movs	r2, #3
 80070a4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80070a8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d109      	bne.n	80070c4 <VL53L0X_StaticInit+0x25c>
		Status = VL53L0X_GetVcselPulsePeriod(
 80070b0:	f107 0313 	add.w	r3, r7, #19
 80070b4:	461a      	mov	r2, r3
 80070b6:	2100      	movs	r1, #0
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f98f 	bl	80073dc <VL53L0X_GetVcselPulsePeriod>
 80070be:	4603      	mov	r3, r0
 80070c0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80070c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d103      	bne.n	80070d4 <VL53L0X_StaticInit+0x26c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80070cc:	7cfa      	ldrb	r2, [r7, #19]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80070d4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d109      	bne.n	80070f0 <VL53L0X_StaticInit+0x288>
		Status = VL53L0X_GetVcselPulsePeriod(
 80070dc:	f107 0313 	add.w	r3, r7, #19
 80070e0:	461a      	mov	r2, r3
 80070e2:	2101      	movs	r1, #1
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f979 	bl	80073dc <VL53L0X_GetVcselPulsePeriod>
 80070ea:	4603      	mov	r3, r0
 80070ec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80070f0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d103      	bne.n	8007100 <VL53L0X_StaticInit+0x298>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80070f8:	7cfa      	ldrb	r2, [r7, #19]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007100:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007104:	2b00      	cmp	r3, #0
 8007106:	d109      	bne.n	800711c <VL53L0X_StaticInit+0x2b4>
		Status = get_sequence_step_timeout(
 8007108:	f107 030c 	add.w	r3, r7, #12
 800710c:	461a      	mov	r2, r3
 800710e:	2103      	movs	r1, #3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f002 feb3 	bl	8009e7c <get_sequence_step_timeout>
 8007116:	4603      	mov	r3, r0
 8007118:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800711c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007120:	2b00      	cmp	r3, #0
 8007122:	d103      	bne.n	800712c <VL53L0X_StaticInit+0x2c4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800712c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007130:	2b00      	cmp	r3, #0
 8007132:	d109      	bne.n	8007148 <VL53L0X_StaticInit+0x2e0>
		Status = get_sequence_step_timeout(
 8007134:	f107 030c 	add.w	r3, r7, #12
 8007138:	461a      	mov	r2, r3
 800713a:	2104      	movs	r1, #4
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f002 fe9d 	bl	8009e7c <get_sequence_step_timeout>
 8007142:	4603      	mov	r3, r0
 8007144:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007148:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800714c:	2b00      	cmp	r3, #0
 800714e:	d103      	bne.n	8007158 <VL53L0X_StaticInit+0x2f0>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007158:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 800715c:	4618      	mov	r0, r3
 800715e:	3770      	adds	r7, #112	@ 0x70
 8007160:	46bd      	mov	sp, r7
 8007162:	bdb0      	pop	{r4, r5, r7, pc}
 8007164:	24000014 	.word	0x24000014

08007168 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8007170:	239d      	movs	r3, #157	@ 0x9d
 8007172:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8007174:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f8b0 	bl	80072fc <VL53L0X_GetDeviceMode>
 800719c:	4603      	mov	r3, r0
 800719e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80071a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d107      	bne.n	80071b8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	3308      	adds	r3, #8
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fa76 	bl	80076a0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80071b4:	4603      	mov	r3, r0
 80071b6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80071b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d102      	bne.n	80071c6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2200      	movs	r2, #0
 80071c4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80071c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d107      	bne.n	80071de <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	3310      	adds	r3, #16
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 faac 	bl	8007732 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80071da:	4603      	mov	r3, r0
 80071dc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80071de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d107      	bne.n	80071f6 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	3314      	adds	r3, #20
 80071ea:	4619      	mov	r1, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7ff fcc3 	bl	8006b78 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80071f2:	4603      	mov	r3, r0
 80071f4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80071f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d134      	bne.n	8007268 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80071fe:	2300      	movs	r3, #0
 8007200:	60bb      	str	r3, [r7, #8]
 8007202:	e02a      	b.n	800725a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d12a      	bne.n	8007262 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	b299      	uxth	r1, r3
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	3308      	adds	r3, #8
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	4413      	add	r3, r2
 800721a:	3304      	adds	r3, #4
 800721c:	461a      	mov	r2, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fbcc 	bl	80079bc <VL53L0X_GetLimitCheckValue>
 8007224:	4603      	mov	r3, r0
 8007226:	461a      	mov	r2, r3
 8007228:	7bfb      	ldrb	r3, [r7, #15]
 800722a:	4313      	orrs	r3, r2
 800722c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800722e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d117      	bne.n	8007266 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	b299      	uxth	r1, r3
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	3318      	adds	r3, #24
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	4413      	add	r3, r2
 8007242:	461a      	mov	r2, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fb33 	bl	80078b0 <VL53L0X_GetLimitCheckEnable>
 800724a:	4603      	mov	r3, r0
 800724c:	461a      	mov	r2, r3
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	4313      	orrs	r3, r2
 8007252:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	3301      	adds	r3, #1
 8007258:	60bb      	str	r3, [r7, #8]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b05      	cmp	r3, #5
 800725e:	ddd1      	ble.n	8007204 <VL53L0X_GetDeviceParameters+0x80>
 8007260:	e002      	b.n	8007268 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8007262:	bf00      	nop
 8007264:	e000      	b.n	8007268 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8007266:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d107      	bne.n	8007280 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	333c      	adds	r3, #60	@ 0x3c
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fc2e 	bl	8007ad8 <VL53L0X_GetWrapAroundCheckEnable>
 800727c:	4603      	mov	r3, r0
 800727e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8007280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d107      	bne.n	8007298 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	3304      	adds	r3, #4
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f879 	bl	8007386 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8007294:	4603      	mov	r3, r0
 8007296:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007298:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072b0:	2300      	movs	r3, #0
 80072b2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80072b4:	78fb      	ldrb	r3, [r7, #3]
 80072b6:	2b15      	cmp	r3, #21
 80072b8:	bf8c      	ite	hi
 80072ba:	2201      	movhi	r2, #1
 80072bc:	2200      	movls	r2, #0
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	2a00      	cmp	r2, #0
 80072c2:	d10f      	bne.n	80072e4 <VL53L0X_SetDeviceMode+0x40>
 80072c4:	4a0c      	ldr	r2, [pc, #48]	@ (80072f8 <VL53L0X_SetDeviceMode+0x54>)
 80072c6:	fa22 f303 	lsr.w	r3, r2, r3
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	bf14      	ite	ne
 80072d2:	2301      	movne	r3, #1
 80072d4:	2300      	moveq	r3, #0
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	78fa      	ldrb	r2, [r7, #3]
 80072e0:	741a      	strb	r2, [r3, #16]
		break;
 80072e2:	e001      	b.n	80072e8 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80072e4:	23f8      	movs	r3, #248	@ 0xf8
 80072e6:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80072e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	0030000b 	.word	0x0030000b

080072fc <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007306:	2300      	movs	r3, #0
 8007308:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	7c1a      	ldrb	r2, [r3, #16]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007312:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800732c:	2300      	movs	r3, #0
 800732e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	2109      	movs	r1, #9
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f004 fb5b 	bl	800b9f0 <VL53L0X_RdByte>
 800733a:	4603      	mov	r3, r0
 800733c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800733e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d106      	bne.n	8007354 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	b2da      	uxtb	r2, r3
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007354:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800736a:	2300      	movs	r3, #0
 800736c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f003 fa13 	bl	800a79c <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8007376:	4603      	mov	r3, r0
 8007378:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800737a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007390:	2300      	movs	r3, #0
 8007392:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f003 fae0 	bl	800a95c <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800739c:	4603      	mov	r3, r0
 800739e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80073a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
 80073b8:	4613      	mov	r3, r2
 80073ba:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073bc:	2300      	movs	r3, #0
 80073be:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80073c0:	78ba      	ldrb	r2, [r7, #2]
 80073c2:	78fb      	ldrb	r3, [r7, #3]
 80073c4:	4619      	mov	r1, r3
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f002 ff2a 	bl	800a220 <VL53L0X_set_vcsel_pulse_period>
 80073cc:	4603      	mov	r3, r0
 80073ce:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80073d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	460b      	mov	r3, r1
 80073e6:	607a      	str	r2, [r7, #4]
 80073e8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073ea:	2300      	movs	r3, #0
 80073ec:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80073ee:	7afb      	ldrb	r3, [r7, #11]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	4619      	mov	r1, r3
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f003 f99a 	bl	800a72e <VL53L0X_get_vcsel_pulse_period>
 80073fa:	4603      	mov	r3, r0
 80073fc:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80073fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	70fb      	strb	r3, [r7, #3]
 8007418:	4613      	mov	r3, r2
 800741a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800741c:	2300      	movs	r3, #0
 800741e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007428:	f107 030f 	add.w	r3, r7, #15
 800742c:	461a      	mov	r2, r3
 800742e:	2101      	movs	r1, #1
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f004 fadd 	bl	800b9f0 <VL53L0X_RdByte>
 8007436:	4603      	mov	r3, r0
 8007438:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800743e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d159      	bne.n	80074fa <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8007446:	78bb      	ldrb	r3, [r7, #2]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d12b      	bne.n	80074a4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800744c:	78fb      	ldrb	r3, [r7, #3]
 800744e:	2b04      	cmp	r3, #4
 8007450:	d825      	bhi.n	800749e <VL53L0X_SetSequenceStepEnable+0x92>
 8007452:	a201      	add	r2, pc, #4	@ (adr r2, 8007458 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8007454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007458:	0800746d 	.word	0x0800746d
 800745c:	08007477 	.word	0x08007477
 8007460:	08007481 	.word	0x08007481
 8007464:	0800748b 	.word	0x0800748b
 8007468:	08007495 	.word	0x08007495
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800746c:	7dbb      	ldrb	r3, [r7, #22]
 800746e:	f043 0310 	orr.w	r3, r3, #16
 8007472:	75bb      	strb	r3, [r7, #22]
				break;
 8007474:	e041      	b.n	80074fa <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8007476:	7dbb      	ldrb	r3, [r7, #22]
 8007478:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800747c:	75bb      	strb	r3, [r7, #22]
				break;
 800747e:	e03c      	b.n	80074fa <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8007480:	7dbb      	ldrb	r3, [r7, #22]
 8007482:	f043 0304 	orr.w	r3, r3, #4
 8007486:	75bb      	strb	r3, [r7, #22]
				break;
 8007488:	e037      	b.n	80074fa <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800748a:	7dbb      	ldrb	r3, [r7, #22]
 800748c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007490:	75bb      	strb	r3, [r7, #22]
				break;
 8007492:	e032      	b.n	80074fa <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8007494:	7dbb      	ldrb	r3, [r7, #22]
 8007496:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800749a:	75bb      	strb	r3, [r7, #22]
				break;
 800749c:	e02d      	b.n	80074fa <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800749e:	23fc      	movs	r3, #252	@ 0xfc
 80074a0:	75fb      	strb	r3, [r7, #23]
 80074a2:	e02a      	b.n	80074fa <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80074a4:	78fb      	ldrb	r3, [r7, #3]
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	d825      	bhi.n	80074f6 <VL53L0X_SetSequenceStepEnable+0xea>
 80074aa:	a201      	add	r2, pc, #4	@ (adr r2, 80074b0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80074ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b0:	080074c5 	.word	0x080074c5
 80074b4:	080074cf 	.word	0x080074cf
 80074b8:	080074d9 	.word	0x080074d9
 80074bc:	080074e3 	.word	0x080074e3
 80074c0:	080074ed 	.word	0x080074ed
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80074c4:	7dbb      	ldrb	r3, [r7, #22]
 80074c6:	f023 0310 	bic.w	r3, r3, #16
 80074ca:	75bb      	strb	r3, [r7, #22]
				break;
 80074cc:	e015      	b.n	80074fa <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80074ce:	7dbb      	ldrb	r3, [r7, #22]
 80074d0:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80074d4:	75bb      	strb	r3, [r7, #22]
				break;
 80074d6:	e010      	b.n	80074fa <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80074d8:	7dbb      	ldrb	r3, [r7, #22]
 80074da:	f023 0304 	bic.w	r3, r3, #4
 80074de:	75bb      	strb	r3, [r7, #22]
				break;
 80074e0:	e00b      	b.n	80074fa <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80074e2:	7dbb      	ldrb	r3, [r7, #22]
 80074e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074e8:	75bb      	strb	r3, [r7, #22]
				break;
 80074ea:	e006      	b.n	80074fa <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80074ec:	7dbb      	ldrb	r3, [r7, #22]
 80074ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074f2:	75bb      	strb	r3, [r7, #22]
				break;
 80074f4:	e001      	b.n	80074fa <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80074f6:	23fc      	movs	r3, #252	@ 0xfc
 80074f8:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	7dba      	ldrb	r2, [r7, #22]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d01e      	beq.n	8007540 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8007502:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d107      	bne.n	800751a <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 800750a:	7dbb      	ldrb	r3, [r7, #22]
 800750c:	461a      	mov	r2, r3
 800750e:	2101      	movs	r1, #1
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f004 f9eb 	bl	800b8ec <VL53L0X_WrByte>
 8007516:	4603      	mov	r3, r0
 8007518:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800751a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d103      	bne.n	800752a <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	7dba      	ldrb	r2, [r7, #22]
 8007526:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800752a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d106      	bne.n	8007540 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007538:	6939      	ldr	r1, [r7, #16]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7ff ff10 	bl	8007360 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007540:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	607b      	str	r3, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	72fb      	strb	r3, [r7, #11]
 800755a:	4613      	mov	r3, r2
 800755c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800755e:	2300      	movs	r3, #0
 8007560:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8007568:	7afb      	ldrb	r3, [r7, #11]
 800756a:	2b04      	cmp	r3, #4
 800756c:	d836      	bhi.n	80075dc <sequence_step_enabled+0x90>
 800756e:	a201      	add	r2, pc, #4	@ (adr r2, 8007574 <sequence_step_enabled+0x28>)
 8007570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007574:	08007589 	.word	0x08007589
 8007578:	0800759b 	.word	0x0800759b
 800757c:	080075ad 	.word	0x080075ad
 8007580:	080075bf 	.word	0x080075bf
 8007584:	080075d1 	.word	0x080075d1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8007588:	7abb      	ldrb	r3, [r7, #10]
 800758a:	111b      	asrs	r3, r3, #4
 800758c:	b2db      	uxtb	r3, r3
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	b2da      	uxtb	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	701a      	strb	r2, [r3, #0]
		break;
 8007598:	e022      	b.n	80075e0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800759a:	7abb      	ldrb	r3, [r7, #10]
 800759c:	10db      	asrs	r3, r3, #3
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	701a      	strb	r2, [r3, #0]
		break;
 80075aa:	e019      	b.n	80075e0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80075ac:	7abb      	ldrb	r3, [r7, #10]
 80075ae:	109b      	asrs	r3, r3, #2
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	701a      	strb	r2, [r3, #0]
		break;
 80075bc:	e010      	b.n	80075e0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80075be:	7abb      	ldrb	r3, [r7, #10]
 80075c0:	119b      	asrs	r3, r3, #6
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	f003 0301 	and.w	r3, r3, #1
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	701a      	strb	r2, [r3, #0]
		break;
 80075ce:	e007      	b.n	80075e0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80075d0:	7abb      	ldrb	r3, [r7, #10]
 80075d2:	09db      	lsrs	r3, r3, #7
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	701a      	strb	r2, [r3, #0]
		break;
 80075da:	e001      	b.n	80075e0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80075dc:	23fc      	movs	r3, #252	@ 0xfc
 80075de:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80075e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	371c      	adds	r7, #28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075fa:	2300      	movs	r3, #0
 80075fc:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007602:	f107 030e 	add.w	r3, r7, #14
 8007606:	461a      	mov	r2, r3
 8007608:	2101      	movs	r1, #1
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f004 f9f0 	bl	800b9f0 <VL53L0X_RdByte>
 8007610:	4603      	mov	r3, r0
 8007612:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8007614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d107      	bne.n	800762c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800761c:	7bba      	ldrb	r2, [r7, #14]
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2100      	movs	r1, #0
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7ff ff92 	bl	800754c <sequence_step_enabled>
 8007628:	4603      	mov	r3, r0
 800762a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800762c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d108      	bne.n	8007646 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8007634:	7bba      	ldrb	r2, [r7, #14]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	3302      	adds	r3, #2
 800763a:	2101      	movs	r1, #1
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7ff ff85 	bl	800754c <sequence_step_enabled>
 8007642:	4603      	mov	r3, r0
 8007644:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d108      	bne.n	8007660 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800764e:	7bba      	ldrb	r2, [r7, #14]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	3301      	adds	r3, #1
 8007654:	2102      	movs	r1, #2
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7ff ff78 	bl	800754c <sequence_step_enabled>
 800765c:	4603      	mov	r3, r0
 800765e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d108      	bne.n	800767a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8007668:	7bba      	ldrb	r2, [r7, #14]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	3303      	adds	r3, #3
 800766e:	2103      	movs	r1, #3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7ff ff6b 	bl	800754c <sequence_step_enabled>
 8007676:	4603      	mov	r3, r0
 8007678:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800767a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d108      	bne.n	8007694 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8007682:	7bba      	ldrb	r2, [r7, #14]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	3304      	adds	r3, #4
 8007688:	2104      	movs	r1, #4
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7ff ff5e 	bl	800754c <sequence_step_enabled>
 8007690:	4603      	mov	r3, r0
 8007692:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007694:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80076ae:	f107 030c 	add.w	r3, r7, #12
 80076b2:	461a      	mov	r2, r3
 80076b4:	21f8      	movs	r1, #248	@ 0xf8
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f004 f9c4 	bl	800ba44 <VL53L0X_RdWord>
 80076bc:	4603      	mov	r3, r0
 80076be:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80076c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d108      	bne.n	80076da <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80076c8:	f107 0308 	add.w	r3, r7, #8
 80076cc:	461a      	mov	r2, r3
 80076ce:	2104      	movs	r1, #4
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f004 f9ed 	bl	800bab0 <VL53L0X_RdDWord>
 80076d6:	4603      	mov	r3, r0
 80076d8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80076da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10c      	bne.n	80076fc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80076e2:	89bb      	ldrh	r3, [r7, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d005      	beq.n	80076f4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	89ba      	ldrh	r2, [r7, #12]
 80076ec:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80076fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	7f1b      	ldrb	r3, [r3, #28]
 800771a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	7bba      	ldrb	r2, [r7, #14]
 8007720:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007722:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b086      	sub	sp, #24
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800773c:	2300      	movs	r3, #0
 800773e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8007740:	f107 030e 	add.w	r3, r7, #14
 8007744:	461a      	mov	r2, r3
 8007746:	2120      	movs	r1, #32
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f004 f97b 	bl	800ba44 <VL53L0X_RdWord>
 800774e:	4603      	mov	r3, r0
 8007750:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8007752:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d118      	bne.n	800778c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800775a:	89fb      	ldrh	r3, [r7, #14]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d109      	bne.n	8007774 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a1b      	ldr	r3, [r3, #32]
 8007764:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	771a      	strb	r2, [r3, #28]
 8007772:	e00b      	b.n	800778c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8007774:	89fb      	ldrh	r3, [r7, #14]
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800778c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3718      	adds	r7, #24
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	460b      	mov	r3, r1
 80077a2:	807b      	strh	r3, [r7, #2]
 80077a4:	4613      	mov	r3, r2
 80077a6:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077a8:	2300      	movs	r3, #0
 80077aa:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80077b8:	887b      	ldrh	r3, [r7, #2]
 80077ba:	2b05      	cmp	r3, #5
 80077bc:	d902      	bls.n	80077c4 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80077be:	23fc      	movs	r3, #252	@ 0xfc
 80077c0:	75fb      	strb	r3, [r7, #23]
 80077c2:	e05b      	b.n	800787c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80077c4:	787b      	ldrb	r3, [r7, #1]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d106      	bne.n	80077d8 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80077d2:	2301      	movs	r3, #1
 80077d4:	73bb      	strb	r3, [r7, #14]
 80077d6:	e00a      	b.n	80077ee <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80077d8:	887b      	ldrh	r3, [r7, #2]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	330c      	adds	r3, #12
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80077e6:	2300      	movs	r3, #0
 80077e8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80077ea:	2301      	movs	r3, #1
 80077ec:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80077ee:	887b      	ldrh	r3, [r7, #2]
 80077f0:	2b05      	cmp	r3, #5
 80077f2:	d841      	bhi.n	8007878 <VL53L0X_SetLimitCheckEnable+0xe0>
 80077f4:	a201      	add	r2, pc, #4	@ (adr r2, 80077fc <VL53L0X_SetLimitCheckEnable+0x64>)
 80077f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fa:	bf00      	nop
 80077fc:	08007815 	.word	0x08007815
 8007800:	0800781f 	.word	0x0800781f
 8007804:	08007835 	.word	0x08007835
 8007808:	0800783f 	.word	0x0800783f
 800780c:	08007849 	.word	0x08007849
 8007810:	08007861 	.word	0x08007861

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	7bfa      	ldrb	r2, [r7, #15]
 8007818:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800781c:	e02e      	b.n	800787c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007822:	b29b      	uxth	r3, r3
 8007824:	461a      	mov	r2, r3
 8007826:	2144      	movs	r1, #68	@ 0x44
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f004 f883 	bl	800b934 <VL53L0X_WrWord>
 800782e:	4603      	mov	r3, r0
 8007830:	75fb      	strb	r3, [r7, #23]

			break;
 8007832:	e023      	b.n	800787c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	7bfa      	ldrb	r2, [r7, #15]
 8007838:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800783c:	e01e      	b.n	800787c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	7bfa      	ldrb	r2, [r7, #15]
 8007842:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8007846:	e019      	b.n	800787c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	005b      	lsls	r3, r3, #1
 800784c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800784e:	7b7b      	ldrb	r3, [r7, #13]
 8007850:	22fe      	movs	r2, #254	@ 0xfe
 8007852:	2160      	movs	r1, #96	@ 0x60
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f004 f897 	bl	800b988 <VL53L0X_UpdateByte>
 800785a:	4603      	mov	r3, r0
 800785c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800785e:	e00d      	b.n	800787c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8007860:	7bbb      	ldrb	r3, [r7, #14]
 8007862:	011b      	lsls	r3, r3, #4
 8007864:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007866:	7b7b      	ldrb	r3, [r7, #13]
 8007868:	22ef      	movs	r2, #239	@ 0xef
 800786a:	2160      	movs	r1, #96	@ 0x60
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f004 f88b 	bl	800b988 <VL53L0X_UpdateByte>
 8007872:	4603      	mov	r3, r0
 8007874:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8007876:	e001      	b.n	800787c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007878:	23fc      	movs	r3, #252	@ 0xfc
 800787a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800787c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10f      	bne.n	80078a4 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8007884:	787b      	ldrb	r3, [r7, #1]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d106      	bne.n	8007898 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800788a:	887b      	ldrh	r3, [r7, #2]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	4413      	add	r3, r2
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8007896:	e005      	b.n	80078a4 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007898:	887b      	ldrh	r3, [r7, #2]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	4413      	add	r3, r2
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80078a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3718      	adds	r7, #24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b087      	sub	sp, #28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	460b      	mov	r3, r1
 80078ba:	607a      	str	r2, [r7, #4]
 80078bc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078be:	2300      	movs	r3, #0
 80078c0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80078c2:	897b      	ldrh	r3, [r7, #10]
 80078c4:	2b05      	cmp	r3, #5
 80078c6:	d905      	bls.n	80078d4 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80078c8:	23fc      	movs	r3, #252	@ 0xfc
 80078ca:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	701a      	strb	r2, [r3, #0]
 80078d2:	e008      	b.n	80078e6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80078d4:	897b      	ldrh	r3, [r7, #10]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	4413      	add	r3, r2
 80078da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078de:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	7dba      	ldrb	r2, [r7, #22]
 80078e4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80078e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	371c      	adds	r7, #28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
	...

080078f8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	460b      	mov	r3, r1
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007906:	2300      	movs	r3, #0
 8007908:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800790a:	897b      	ldrh	r3, [r7, #10]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4413      	add	r3, r2
 8007910:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007914:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8007916:	7dbb      	ldrb	r3, [r7, #22]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d107      	bne.n	800792c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800791c:	897b      	ldrh	r3, [r7, #10]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	330c      	adds	r3, #12
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	605a      	str	r2, [r3, #4]
 800792a:	e040      	b.n	80079ae <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800792c:	897b      	ldrh	r3, [r7, #10]
 800792e:	2b05      	cmp	r3, #5
 8007930:	d830      	bhi.n	8007994 <VL53L0X_SetLimitCheckValue+0x9c>
 8007932:	a201      	add	r2, pc, #4	@ (adr r2, 8007938 <VL53L0X_SetLimitCheckValue+0x40>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	08007951 	.word	0x08007951
 800793c:	08007959 	.word	0x08007959
 8007940:	0800796f 	.word	0x0800796f
 8007944:	08007977 	.word	0x08007977
 8007948:	0800797f 	.word	0x0800797f
 800794c:	0800797f 	.word	0x0800797f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8007956:	e01f      	b.n	8007998 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800795c:	b29b      	uxth	r3, r3
 800795e:	461a      	mov	r2, r3
 8007960:	2144      	movs	r1, #68	@ 0x44
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f003 ffe6 	bl	800b934 <VL53L0X_WrWord>
 8007968:	4603      	mov	r3, r0
 800796a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800796c:	e014      	b.n	8007998 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	63da      	str	r2, [r3, #60]	@ 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8007974:	e010      	b.n	8007998 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	641a      	str	r2, [r3, #64]	@ 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800797c:	e00c      	b.n	8007998 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007982:	b29b      	uxth	r3, r3
 8007984:	461a      	mov	r2, r3
 8007986:	2164      	movs	r1, #100	@ 0x64
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f003 ffd3 	bl	800b934 <VL53L0X_WrWord>
 800798e:	4603      	mov	r3, r0
 8007990:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007992:	e001      	b.n	8007998 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007994:	23fc      	movs	r3, #252	@ 0xfc
 8007996:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007998:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d106      	bne.n	80079ae <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80079a0:	897b      	ldrh	r3, [r7, #10]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	330c      	adds	r3, #12
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4413      	add	r3, r2
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80079ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop

080079bc <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b088      	sub	sp, #32
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	460b      	mov	r3, r1
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079ca:	2300      	movs	r3, #0
 80079cc:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80079ce:	2300      	movs	r3, #0
 80079d0:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80079d2:	897b      	ldrh	r3, [r7, #10]
 80079d4:	2b05      	cmp	r3, #5
 80079d6:	d847      	bhi.n	8007a68 <VL53L0X_GetLimitCheckValue+0xac>
 80079d8:	a201      	add	r2, pc, #4	@ (adr r2, 80079e0 <VL53L0X_GetLimitCheckValue+0x24>)
 80079da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079de:	bf00      	nop
 80079e0:	080079f9 	.word	0x080079f9
 80079e4:	08007a05 	.word	0x08007a05
 80079e8:	08007a2b 	.word	0x08007a2b
 80079ec:	08007a37 	.word	0x08007a37
 80079f0:	08007a43 	.word	0x08007a43
 80079f4:	08007a43 	.word	0x08007a43

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079fc:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80079fe:	2300      	movs	r3, #0
 8007a00:	77bb      	strb	r3, [r7, #30]
		break;
 8007a02:	e033      	b.n	8007a6c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007a04:	f107 0316 	add.w	r3, r7, #22
 8007a08:	461a      	mov	r2, r3
 8007a0a:	2144      	movs	r1, #68	@ 0x44
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f004 f819 	bl	800ba44 <VL53L0X_RdWord>
 8007a12:	4603      	mov	r3, r0
 8007a14:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007a16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d102      	bne.n	8007a24 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007a1e:	8afb      	ldrh	r3, [r7, #22]
 8007a20:	025b      	lsls	r3, r3, #9
 8007a22:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8007a24:	2301      	movs	r3, #1
 8007a26:	77bb      	strb	r3, [r7, #30]
		break;
 8007a28:	e020      	b.n	8007a6c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a2e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8007a30:	2300      	movs	r3, #0
 8007a32:	77bb      	strb	r3, [r7, #30]
		break;
 8007a34:	e01a      	b.n	8007a6c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	77bb      	strb	r3, [r7, #30]
		break;
 8007a40:	e014      	b.n	8007a6c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007a42:	f107 0316 	add.w	r3, r7, #22
 8007a46:	461a      	mov	r2, r3
 8007a48:	2164      	movs	r1, #100	@ 0x64
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f003 fffa 	bl	800ba44 <VL53L0X_RdWord>
 8007a50:	4603      	mov	r3, r0
 8007a52:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007a54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d102      	bne.n	8007a62 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007a5c:	8afb      	ldrh	r3, [r7, #22]
 8007a5e:	025b      	lsls	r3, r3, #9
 8007a60:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8007a62:	2300      	movs	r3, #0
 8007a64:	77bb      	strb	r3, [r7, #30]
		break;
 8007a66:	e001      	b.n	8007a6c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007a68:	23fc      	movs	r3, #252	@ 0xfc
 8007a6a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007a6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d12a      	bne.n	8007aca <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8007a74:	7fbb      	ldrb	r3, [r7, #30]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d124      	bne.n	8007ac4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d110      	bne.n	8007aa2 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8007a80:	897b      	ldrh	r3, [r7, #10]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	330c      	adds	r3, #12
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007a94:	897b      	ldrh	r3, [r7, #10]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4413      	add	r3, r2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8007aa0:	e013      	b.n	8007aca <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007aa8:	897b      	ldrh	r3, [r7, #10]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	330c      	adds	r3, #12
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007ab6:	897b      	ldrh	r3, [r7, #10]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	4413      	add	r3, r2
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8007ac2:	e002      	b.n	8007aca <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007aca:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3720      	adds	r7, #32
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop

08007ad8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8007ae6:	f107 030e 	add.w	r3, r7, #14
 8007aea:	461a      	mov	r2, r3
 8007aec:	2101      	movs	r1, #1
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f003 ff7e 	bl	800b9f0 <VL53L0X_RdByte>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8007af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10e      	bne.n	8007b1e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8007b00:	7bba      	ldrb	r2, [r7, #14]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		if (data & (0x01 << 7))
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	b25b      	sxtb	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	da03      	bge.n	8007b18 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2201      	movs	r2, #1
 8007b14:	701a      	strb	r2, [r3, #0]
 8007b16:	e002      	b.n	8007b1e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d104      	bne.n	8007b30 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781a      	ldrb	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b44:	2300      	movs	r3, #0
 8007b46:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007b48:	f107 030e 	add.w	r3, r7, #14
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff fbd4 	bl	80072fc <VL53L0X_GetDeviceMode>
 8007b54:	4603      	mov	r3, r0
 8007b56:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d107      	bne.n	8007b70 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d104      	bne.n	8007b70 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f898 	bl	8007c9c <VL53L0X_StartMeasurement>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d104      	bne.n	8007b82 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 fb33 	bl	80091e4 <VL53L0X_measurement_poll_for_completion>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d106      	bne.n	8007b98 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d103      	bne.n	8007b98 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2203      	movs	r2, #3
 8007b94:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8007b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	68b9      	ldr	r1, [r7, #8]
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f001 fad5 	bl	800916a <VL53L0X_perform_ref_calibration>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8007bc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 8007be6:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8007be8:	7dbb      	ldrb	r3, [r7, #22]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d005      	beq.n	8007bfa <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8007bee:	7dbb      	ldrb	r3, [r7, #22]
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d002      	beq.n	8007bfa <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8007bf4:	7dbb      	ldrb	r3, [r7, #22]
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d147      	bne.n	8007c8a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8007bfa:	f107 030c 	add.w	r3, r7, #12
 8007bfe:	f107 0210 	add.w	r2, r7, #16
 8007c02:	2101      	movs	r1, #1
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fbb9 	bl	800837c <VL53L0X_GetInterruptThresholds>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 8007c14:	d803      	bhi.n	8007c1e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8007c16:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8007c18:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 8007c1c:	d935      	bls.n	8007c8a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8007c1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d131      	bne.n	8007c8a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8007c26:	78fb      	ldrb	r3, [r7, #3]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d006      	beq.n	8007c3a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8007c2c:	491a      	ldr	r1, [pc, #104]	@ (8007c98 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f002 ff46 	bl	800aac0 <VL53L0X_load_tuning_settings>
 8007c34:	4603      	mov	r3, r0
 8007c36:	75fb      	strb	r3, [r7, #23]
 8007c38:	e027      	b.n	8007c8a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8007c3a:	2204      	movs	r2, #4
 8007c3c:	21ff      	movs	r1, #255	@ 0xff
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f003 fe54 	bl	800b8ec <VL53L0X_WrByte>
 8007c44:	4603      	mov	r3, r0
 8007c46:	461a      	mov	r2, r3
 8007c48:	7dfb      	ldrb	r3, [r7, #23]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2170      	movs	r1, #112	@ 0x70
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f003 fe4a 	bl	800b8ec <VL53L0X_WrByte>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	7dfb      	ldrb	r3, [r7, #23]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007c62:	2200      	movs	r2, #0
 8007c64:	21ff      	movs	r1, #255	@ 0xff
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f003 fe40 	bl	800b8ec <VL53L0X_WrByte>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	461a      	mov	r2, r3
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007c76:	2200      	movs	r2, #0
 8007c78:	2180      	movs	r1, #128	@ 0x80
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f003 fe36 	bl	800b8ec <VL53L0X_WrByte>
 8007c80:	4603      	mov	r3, r0
 8007c82:	461a      	mov	r2, r3
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8007c8a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	24000108 	.word	0x24000108

08007c9c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007cac:	f107 030e 	add.w	r3, r7, #14
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7ff fb22 	bl	80072fc <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007cb8:	2201      	movs	r2, #1
 8007cba:	2180      	movs	r1, #128	@ 0x80
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f003 fe15 	bl	800b8ec <VL53L0X_WrByte>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	21ff      	movs	r1, #255	@ 0xff
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f003 fe0e 	bl	800b8ec <VL53L0X_WrByte>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f003 fe07 	bl	800b8ec <VL53L0X_WrByte>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 8007ce8:	461a      	mov	r2, r3
 8007cea:	2191      	movs	r1, #145	@ 0x91
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f003 fdfd 	bl	800b8ec <VL53L0X_WrByte>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f003 fdf6 	bl	800b8ec <VL53L0X_WrByte>
 8007d00:	4603      	mov	r3, r0
 8007d02:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007d04:	2200      	movs	r2, #0
 8007d06:	21ff      	movs	r1, #255	@ 0xff
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f003 fdef 	bl	800b8ec <VL53L0X_WrByte>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007d12:	2200      	movs	r2, #0
 8007d14:	2180      	movs	r1, #128	@ 0x80
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f003 fde8 	bl	800b8ec <VL53L0X_WrByte>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	d054      	beq.n	8007dd0 <VL53L0X_StartMeasurement+0x134>
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	dc6c      	bgt.n	8007e04 <VL53L0X_StartMeasurement+0x168>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <VL53L0X_StartMeasurement+0x98>
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d034      	beq.n	8007d9c <VL53L0X_StartMeasurement+0x100>
 8007d32:	e067      	b.n	8007e04 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8007d34:	2201      	movs	r2, #1
 8007d36:	2100      	movs	r1, #0
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f003 fdd7 	bl	800b8ec <VL53L0X_WrByte>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
 8007d44:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8007d46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d15d      	bne.n	8007e0a <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d008      	beq.n	8007d6a <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8007d58:	f107 030d 	add.w	r3, r7, #13
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	2100      	movs	r1, #0
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f003 fe45 	bl	800b9f0 <VL53L0X_RdByte>
 8007d66:	4603      	mov	r3, r0
 8007d68:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8007d70:	7b7a      	ldrb	r2, [r7, #13]
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
 8007d74:	4013      	ands	r3, r2
 8007d76:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007d78:	7bfa      	ldrb	r2, [r7, #15]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d107      	bne.n	8007d8e <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8007d7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d103      	bne.n	8007d8e <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8007d8c:	d3e1      	bcc.n	8007d52 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8007d94:	d339      	bcc.n	8007e0a <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8007d96:	23f9      	movs	r3, #249	@ 0xf9
 8007d98:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8007d9a:	e036      	b.n	8007e0a <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007d9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d105      	bne.n	8007db0 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007da4:	2101      	movs	r1, #1
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7ff ff12 	bl	8007bd0 <VL53L0X_CheckAndLoadInterruptSettings>
 8007dac:	4603      	mov	r3, r0
 8007dae:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007db0:	2202      	movs	r2, #2
 8007db2:	2100      	movs	r1, #0
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f003 fd99 	bl	800b8ec <VL53L0X_WrByte>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8007dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d123      	bne.n	8007e0e <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2204      	movs	r2, #4
 8007dca:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 8007dce:	e01e      	b.n	8007e0e <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007dd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d105      	bne.n	8007de4 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007dd8:	2101      	movs	r1, #1
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7ff fef8 	bl	8007bd0 <VL53L0X_CheckAndLoadInterruptSettings>
 8007de0:	4603      	mov	r3, r0
 8007de2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007de4:	2204      	movs	r2, #4
 8007de6:	2100      	movs	r1, #0
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f003 fd7f 	bl	800b8ec <VL53L0X_WrByte>
 8007dee:	4603      	mov	r3, r0
 8007df0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8007df2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10b      	bne.n	8007e12 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2204      	movs	r2, #4
 8007dfe:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 8007e02:	e006      	b.n	8007e12 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007e04:	23f8      	movs	r3, #248	@ 0xf8
 8007e06:	75fb      	strb	r3, [r7, #23]
 8007e08:	e004      	b.n	8007e14 <VL53L0X_StartMeasurement+0x178>
		break;
 8007e0a:	bf00      	nop
 8007e0c:	e002      	b.n	8007e14 <VL53L0X_StartMeasurement+0x178>
		break;
 8007e0e:	bf00      	nop
 8007e10:	e000      	b.n	8007e14 <VL53L0X_StartMeasurement+0x178>
		break;
 8007e12:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8007e14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 8007e34:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8007e36:	7bbb      	ldrb	r3, [r7, #14]
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	d112      	bne.n	8007e62 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8007e3c:	f107 0308 	add.w	r3, r7, #8
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fb0e 	bl	8008464 <VL53L0X_GetInterruptMaskStatus>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	d103      	bne.n	8007e5a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2201      	movs	r2, #1
 8007e56:	701a      	strb	r2, [r3, #0]
 8007e58:	e01c      	b.n	8007e94 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	701a      	strb	r2, [r3, #0]
 8007e60:	e018      	b.n	8007e94 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8007e62:	f107 030d 	add.w	r3, r7, #13
 8007e66:	461a      	mov	r2, r3
 8007e68:	2114      	movs	r1, #20
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f003 fdc0 	bl	800b9f0 <VL53L0X_RdByte>
 8007e70:	4603      	mov	r3, r0
 8007e72:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8007e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10b      	bne.n	8007e94 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007e7c:	7b7b      	ldrb	r3, [r7, #13]
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	701a      	strb	r2, [r3, #0]
 8007e8c:	e002      	b.n	8007e94 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2200      	movs	r2, #0
 8007e92:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007ea0:	b5b0      	push	{r4, r5, r7, lr}
 8007ea2:	b096      	sub	sp, #88	@ 0x58
 8007ea4:	af02      	add	r7, sp, #8
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8007eb0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8007eb4:	230c      	movs	r3, #12
 8007eb6:	2114      	movs	r1, #20
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f003 fceb 	bl	800b894 <VL53L0X_ReadMulti>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8007ec4:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f040 80c8 	bne.w	800805e <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8007eda:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007ede:	021b      	lsls	r3, r3, #8
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8007ef2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007ef6:	021b      	lsls	r3, r3, #8
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007efe:	4413      	add	r3, r2
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	025b      	lsls	r3, r3, #9
 8007f04:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f0a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8007f0c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8007f10:	021b      	lsls	r3, r3, #8
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8007f18:	4413      	add	r3, r2
 8007f1a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8007f1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007f22:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8007f28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007f2c:	021b      	lsls	r3, r3, #8
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8007f34:	4413      	add	r3, r2
 8007f36:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8007f40:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8007f42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007f46:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8b3 3152 	ldrh.w	r3, [r3, #338]	@ 0x152
 8007f50:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8007f58:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8007f5c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007f5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f62:	d046      	beq.n	8007ff2 <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8007f64:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007f66:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8007f6a:	fb02 f303 	mul.w	r3, r2, r3
 8007f6e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8007f72:	4a58      	ldr	r2, [pc, #352]	@ (80080d4 <VL53L0X_GetRangingMeasurementData+0x234>)
 8007f74:	fb82 1203 	smull	r1, r2, r2, r3
 8007f78:	1192      	asrs	r2, r2, #6
 8007f7a:	17db      	asrs	r3, r3, #31
 8007f7c:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8007f7e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	7f1b      	ldrb	r3, [r3, #28]
 8007f8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8007f90:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d02c      	beq.n	8007ff2 <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8007f98:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007f9a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8007f9e:	fb02 f303 	mul.w	r3, r2, r3
 8007fa2:	121a      	asrs	r2, r3, #8
					<= 0) {
 8007fa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d10d      	bne.n	8007fc6 <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 8007faa:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d004      	beq.n	8007fbc <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 8007fb2:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 8007fb6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007fba:	e016      	b.n	8007fea <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 8007fbc:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 8007fc0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007fc4:	e011      	b.n	8007fea <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8007fc6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007fca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fcc:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8007fd0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007fd2:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8007fd6:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8007fda:	121b      	asrs	r3, r3, #8
 8007fdc:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8007fde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fe0:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8007fe2:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8007fe6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8007fea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007fee:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8007ff2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00d      	beq.n	8008016 <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8007ffa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007ffe:	089b      	lsrs	r3, r3, #2
 8008000:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8008006:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800800a:	b2db      	uxtb	r3, r3
 800800c:	019b      	lsls	r3, r3, #6
 800800e:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	75da      	strb	r2, [r3, #23]
 8008014:	e006      	b.n	8008024 <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800801c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2200      	movs	r2, #0
 8008022:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8008024:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8008028:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800802c:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 8008030:	9301      	str	r3, [sp, #4]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	4613      	mov	r3, r2
 8008038:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f003 f9de 	bl	800b3fc <VL53L0X_get_pal_range_status>
 8008040:	4603      	mov	r3, r0
 8008042:	461a      	mov	r2, r3
 8008044:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008048:	4313      	orrs	r3, r2
 800804a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800804e:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8008052:	2b00      	cmp	r3, #0
 8008054:	d103      	bne.n	800805e <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8008056:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800805e:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8008062:	2b00      	cmp	r3, #0
 8008064:	d12f      	bne.n	80080c6 <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f107 040c 	add.w	r4, r7, #12
 800806c:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 8008070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008074:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008078:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8008080:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8008086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800808e:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8008094:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800809a:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80080a0:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80080a6:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80080ac:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 80080b6:	f107 050c 	add.w	r5, r7, #12
 80080ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80080c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80080c6:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3750      	adds	r7, #80	@ 0x50
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bdb0      	pop	{r4, r5, r7, pc}
 80080d2:	bf00      	nop
 80080d4:	10624dd3 	.word	0x10624dd3

080080d8 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080e2:	2300      	movs	r3, #0
 80080e4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80080e6:	2100      	movs	r1, #0
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7ff f8db 	bl	80072a4 <VL53L0X_SetDeviceMode>
 80080ee:	4603      	mov	r3, r0
 80080f0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80080f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d104      	bne.n	8008104 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff fd1e 	bl	8007b3c <VL53L0X_PerformSingleMeasurement>
 8008100:	4603      	mov	r3, r0
 8008102:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d105      	bne.n	8008118 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7ff fec6 	bl	8007ea0 <VL53L0X_GetRangingMeasurementData>
 8008114:	4603      	mov	r3, r0
 8008116:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8008118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d105      	bne.n	800812c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008120:	2100      	movs	r1, #0
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f95e 	bl	80083e4 <VL53L0X_ClearInterruptMask>
 8008128:	4603      	mov	r3, r0
 800812a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800812c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	4608      	mov	r0, r1
 8008142:	4611      	mov	r1, r2
 8008144:	461a      	mov	r2, r3
 8008146:	4603      	mov	r3, r0
 8008148:	70fb      	strb	r3, [r7, #3]
 800814a:	460b      	mov	r3, r1
 800814c:	70bb      	strb	r3, [r7, #2]
 800814e:	4613      	mov	r3, r2
 8008150:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008152:	2300      	movs	r3, #0
 8008154:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8008156:	78fb      	ldrb	r3, [r7, #3]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800815c:	23f6      	movs	r3, #246	@ 0xf6
 800815e:	73fb      	strb	r3, [r7, #15]
 8008160:	e105      	b.n	800836e <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8008162:	78bb      	ldrb	r3, [r7, #2]
 8008164:	2b14      	cmp	r3, #20
 8008166:	d110      	bne.n	800818a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008168:	7e3b      	ldrb	r3, [r7, #24]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d102      	bne.n	8008174 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800816e:	2310      	movs	r3, #16
 8008170:	73bb      	strb	r3, [r7, #14]
 8008172:	e001      	b.n	8008178 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8008174:	2301      	movs	r3, #1
 8008176:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8008178:	7bbb      	ldrb	r3, [r7, #14]
 800817a:	461a      	mov	r2, r3
 800817c:	2184      	movs	r1, #132	@ 0x84
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f003 fbb4 	bl	800b8ec <VL53L0X_WrByte>
 8008184:	4603      	mov	r3, r0
 8008186:	73fb      	strb	r3, [r7, #15]
 8008188:	e0f1      	b.n	800836e <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800818a:	78bb      	ldrb	r3, [r7, #2]
 800818c:	2b15      	cmp	r3, #21
 800818e:	f040 8097 	bne.w	80082c0 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008192:	2201      	movs	r2, #1
 8008194:	21ff      	movs	r1, #255	@ 0xff
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f003 fba8 	bl	800b8ec <VL53L0X_WrByte>
 800819c:	4603      	mov	r3, r0
 800819e:	461a      	mov	r2, r3
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80081a6:	2200      	movs	r2, #0
 80081a8:	2100      	movs	r1, #0
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f003 fb9e 	bl	800b8ec <VL53L0X_WrByte>
 80081b0:	4603      	mov	r3, r0
 80081b2:	461a      	mov	r2, r3
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80081ba:	2200      	movs	r2, #0
 80081bc:	21ff      	movs	r1, #255	@ 0xff
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f003 fb94 	bl	800b8ec <VL53L0X_WrByte>
 80081c4:	4603      	mov	r3, r0
 80081c6:	461a      	mov	r2, r3
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80081ce:	2201      	movs	r2, #1
 80081d0:	2180      	movs	r1, #128	@ 0x80
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f003 fb8a 	bl	800b8ec <VL53L0X_WrByte>
 80081d8:	4603      	mov	r3, r0
 80081da:	461a      	mov	r2, r3
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	4313      	orrs	r3, r2
 80081e0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80081e2:	2202      	movs	r2, #2
 80081e4:	2185      	movs	r1, #133	@ 0x85
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f003 fb80 	bl	800b8ec <VL53L0X_WrByte>
 80081ec:	4603      	mov	r3, r0
 80081ee:	461a      	mov	r2, r3
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80081f6:	2204      	movs	r2, #4
 80081f8:	21ff      	movs	r1, #255	@ 0xff
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f003 fb76 	bl	800b8ec <VL53L0X_WrByte>
 8008200:	4603      	mov	r3, r0
 8008202:	461a      	mov	r2, r3
 8008204:	7bfb      	ldrb	r3, [r7, #15]
 8008206:	4313      	orrs	r3, r2
 8008208:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800820a:	2200      	movs	r2, #0
 800820c:	21cd      	movs	r1, #205	@ 0xcd
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f003 fb6c 	bl	800b8ec <VL53L0X_WrByte>
 8008214:	4603      	mov	r3, r0
 8008216:	461a      	mov	r2, r3
 8008218:	7bfb      	ldrb	r3, [r7, #15]
 800821a:	4313      	orrs	r3, r2
 800821c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800821e:	2211      	movs	r2, #17
 8008220:	21cc      	movs	r1, #204	@ 0xcc
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f003 fb62 	bl	800b8ec <VL53L0X_WrByte>
 8008228:	4603      	mov	r3, r0
 800822a:	461a      	mov	r2, r3
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	4313      	orrs	r3, r2
 8008230:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8008232:	2207      	movs	r2, #7
 8008234:	21ff      	movs	r1, #255	@ 0xff
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f003 fb58 	bl	800b8ec <VL53L0X_WrByte>
 800823c:	4603      	mov	r3, r0
 800823e:	461a      	mov	r2, r3
 8008240:	7bfb      	ldrb	r3, [r7, #15]
 8008242:	4313      	orrs	r3, r2
 8008244:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8008246:	2200      	movs	r2, #0
 8008248:	21be      	movs	r1, #190	@ 0xbe
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f003 fb4e 	bl	800b8ec <VL53L0X_WrByte>
 8008250:	4603      	mov	r3, r0
 8008252:	461a      	mov	r2, r3
 8008254:	7bfb      	ldrb	r3, [r7, #15]
 8008256:	4313      	orrs	r3, r2
 8008258:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800825a:	2206      	movs	r2, #6
 800825c:	21ff      	movs	r1, #255	@ 0xff
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f003 fb44 	bl	800b8ec <VL53L0X_WrByte>
 8008264:	4603      	mov	r3, r0
 8008266:	461a      	mov	r2, r3
 8008268:	7bfb      	ldrb	r3, [r7, #15]
 800826a:	4313      	orrs	r3, r2
 800826c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800826e:	2209      	movs	r2, #9
 8008270:	21cc      	movs	r1, #204	@ 0xcc
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f003 fb3a 	bl	800b8ec <VL53L0X_WrByte>
 8008278:	4603      	mov	r3, r0
 800827a:	461a      	mov	r2, r3
 800827c:	7bfb      	ldrb	r3, [r7, #15]
 800827e:	4313      	orrs	r3, r2
 8008280:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008282:	2200      	movs	r2, #0
 8008284:	21ff      	movs	r1, #255	@ 0xff
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f003 fb30 	bl	800b8ec <VL53L0X_WrByte>
 800828c:	4603      	mov	r3, r0
 800828e:	461a      	mov	r2, r3
 8008290:	7bfb      	ldrb	r3, [r7, #15]
 8008292:	4313      	orrs	r3, r2
 8008294:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008296:	2201      	movs	r2, #1
 8008298:	21ff      	movs	r1, #255	@ 0xff
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f003 fb26 	bl	800b8ec <VL53L0X_WrByte>
 80082a0:	4603      	mov	r3, r0
 80082a2:	461a      	mov	r2, r3
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80082aa:	2200      	movs	r2, #0
 80082ac:	2100      	movs	r1, #0
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f003 fb1c 	bl	800b8ec <VL53L0X_WrByte>
 80082b4:	4603      	mov	r3, r0
 80082b6:	461a      	mov	r2, r3
 80082b8:	7bfb      	ldrb	r3, [r7, #15]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	73fb      	strb	r3, [r7, #15]
 80082be:	e056      	b.n	800836e <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80082c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d120      	bne.n	800830a <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 80082c8:	787b      	ldrb	r3, [r7, #1]
 80082ca:	2b04      	cmp	r3, #4
 80082cc:	d81b      	bhi.n	8008306 <VL53L0X_SetGpioConfig+0x1ce>
 80082ce:	a201      	add	r2, pc, #4	@ (adr r2, 80082d4 <VL53L0X_SetGpioConfig+0x19c>)
 80082d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d4:	080082e9 	.word	0x080082e9
 80082d8:	080082ef 	.word	0x080082ef
 80082dc:	080082f5 	.word	0x080082f5
 80082e0:	080082fb 	.word	0x080082fb
 80082e4:	08008301 	.word	0x08008301
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80082e8:	2300      	movs	r3, #0
 80082ea:	73bb      	strb	r3, [r7, #14]
				break;
 80082ec:	e00d      	b.n	800830a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80082ee:	2301      	movs	r3, #1
 80082f0:	73bb      	strb	r3, [r7, #14]
				break;
 80082f2:	e00a      	b.n	800830a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80082f4:	2302      	movs	r3, #2
 80082f6:	73bb      	strb	r3, [r7, #14]
				break;
 80082f8:	e007      	b.n	800830a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80082fa:	2303      	movs	r3, #3
 80082fc:	73bb      	strb	r3, [r7, #14]
				break;
 80082fe:	e004      	b.n	800830a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008300:	2304      	movs	r3, #4
 8008302:	73bb      	strb	r3, [r7, #14]
				break;
 8008304:	e001      	b.n	800830a <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 8008306:	23f5      	movs	r3, #245	@ 0xf5
 8008308:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 800830a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d107      	bne.n	8008322 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 8008312:	7bbb      	ldrb	r3, [r7, #14]
 8008314:	461a      	mov	r2, r3
 8008316:	210a      	movs	r1, #10
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f003 fae7 	bl	800b8ec <VL53L0X_WrByte>
 800831e:	4603      	mov	r3, r0
 8008320:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8008322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10f      	bne.n	800834a <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800832a:	7e3b      	ldrb	r3, [r7, #24]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d102      	bne.n	8008336 <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8008330:	2300      	movs	r3, #0
 8008332:	73bb      	strb	r3, [r7, #14]
 8008334:	e001      	b.n	800833a <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 8008336:	2310      	movs	r3, #16
 8008338:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800833a:	7bbb      	ldrb	r3, [r7, #14]
 800833c:	22ef      	movs	r2, #239	@ 0xef
 800833e:	2184      	movs	r1, #132	@ 0x84
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f003 fb21 	bl	800b988 <VL53L0X_UpdateByte>
 8008346:	4603      	mov	r3, r0
 8008348:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800834a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d103      	bne.n	800835a <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	787a      	ldrb	r2, [r7, #1]
 8008356:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800835a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d105      	bne.n	800836e <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008362:	2100      	movs	r1, #0
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f83d 	bl	80083e4 <VL53L0X_ClearInterruptMask>
 800836a:	4603      	mov	r3, r0
 800836c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800836e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop

0800837c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	607a      	str	r2, [r7, #4]
 8008386:	603b      	str	r3, [r7, #0]
 8008388:	460b      	mov	r3, r1
 800838a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800838c:	2300      	movs	r3, #0
 800838e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8008390:	f107 0314 	add.w	r3, r7, #20
 8008394:	461a      	mov	r2, r3
 8008396:	210e      	movs	r1, #14
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f003 fb53 	bl	800ba44 <VL53L0X_RdWord>
 800839e:	4603      	mov	r3, r0
 80083a0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80083a2:	8abb      	ldrh	r3, [r7, #20]
 80083a4:	045a      	lsls	r2, r3, #17
 80083a6:	4b0e      	ldr	r3, [pc, #56]	@ (80083e0 <VL53L0X_GetInterruptThresholds+0x64>)
 80083a8:	4013      	ands	r3, r2
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80083ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10e      	bne.n	80083d4 <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80083b6:	f107 0314 	add.w	r3, r7, #20
 80083ba:	461a      	mov	r2, r3
 80083bc:	210c      	movs	r1, #12
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f003 fb40 	bl	800ba44 <VL53L0X_RdWord>
 80083c4:	4603      	mov	r3, r0
 80083c6:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80083c8:	8abb      	ldrh	r3, [r7, #20]
 80083ca:	045a      	lsls	r2, r3, #17
 80083cc:	4b04      	ldr	r3, [pc, #16]	@ (80083e0 <VL53L0X_GetInterruptThresholds+0x64>)
 80083ce:	4013      	ands	r3, r2
		*pThresholdHigh =
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80083d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3718      	adds	r7, #24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	1ffe0000 	.word	0x1ffe0000

080083e4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083ee:	2300      	movs	r3, #0
 80083f0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80083f2:	2300      	movs	r3, #0
 80083f4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80083f6:	2201      	movs	r2, #1
 80083f8:	210b      	movs	r1, #11
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f003 fa76 	bl	800b8ec <VL53L0X_WrByte>
 8008400:	4603      	mov	r3, r0
 8008402:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8008404:	2200      	movs	r2, #0
 8008406:	210b      	movs	r1, #11
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f003 fa6f 	bl	800b8ec <VL53L0X_WrByte>
 800840e:	4603      	mov	r3, r0
 8008410:	461a      	mov	r2, r3
 8008412:	7bfb      	ldrb	r3, [r7, #15]
 8008414:	4313      	orrs	r3, r2
 8008416:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8008418:	f107 030d 	add.w	r3, r7, #13
 800841c:	461a      	mov	r2, r3
 800841e:	2113      	movs	r1, #19
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f003 fae5 	bl	800b9f0 <VL53L0X_RdByte>
 8008426:	4603      	mov	r3, r0
 8008428:	461a      	mov	r2, r3
 800842a:	7bfb      	ldrb	r3, [r7, #15]
 800842c:	4313      	orrs	r3, r2
 800842e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	3301      	adds	r3, #1
 8008434:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8008436:	7b7b      	ldrb	r3, [r7, #13]
 8008438:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800843c:	2b00      	cmp	r3, #0
 800843e:	d006      	beq.n	800844e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8008440:	7bbb      	ldrb	r3, [r7, #14]
 8008442:	2b02      	cmp	r3, #2
 8008444:	d803      	bhi.n	800844e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8008446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d0d3      	beq.n	80083f6 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	2b02      	cmp	r3, #2
 8008452:	d901      	bls.n	8008458 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8008454:	23f4      	movs	r3, #244	@ 0xf4
 8008456:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008458:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800846e:	2300      	movs	r3, #0
 8008470:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8008472:	f107 030e 	add.w	r3, r7, #14
 8008476:	461a      	mov	r2, r3
 8008478:	2113      	movs	r1, #19
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f003 fab8 	bl	800b9f0 <VL53L0X_RdByte>
 8008480:	4603      	mov	r3, r0
 8008482:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8008484:	7bbb      	ldrb	r3, [r7, #14]
 8008486:	f003 0207 	and.w	r2, r3, #7
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800848e:	7bbb      	ldrb	r3, [r7, #14]
 8008490:	f003 0318 	and.w	r3, r3, #24
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8008498:	23fa      	movs	r3, #250	@ 0xfa
 800849a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800849c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084b4:	2300      	movs	r3, #0
 80084b6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	68b9      	ldr	r1, [r7, #8]
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 fa03 	bl	80088c8 <VL53L0X_perform_ref_spad_management>
 80084c2:	4603      	mov	r3, r0
 80084c4:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80084c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b084      	sub	sp, #16
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084dc:	2300      	movs	r3, #0
 80084de:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80084e0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80084e4:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80084e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80084ea:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80084ec:	f107 0308 	add.w	r3, r7, #8
 80084f0:	461a      	mov	r2, r3
 80084f2:	2128      	movs	r1, #40	@ 0x28
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f003 faa5 	bl	800ba44 <VL53L0X_RdWord>
 80084fa:	4603      	mov	r3, r0
 80084fc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80084fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d11e      	bne.n	8008544 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8008506:	893b      	ldrh	r3, [r7, #8]
 8008508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800850c:	b29b      	uxth	r3, r3
 800850e:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8008510:	893b      	ldrh	r3, [r7, #8]
 8008512:	461a      	mov	r2, r3
 8008514:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008518:	429a      	cmp	r2, r3
 800851a:	dd0b      	ble.n	8008534 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800851c:	893a      	ldrh	r2, [r7, #8]
 800851e:	897b      	ldrh	r3, [r7, #10]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	b29b      	uxth	r3, r3
 8008524:	b21b      	sxth	r3, r3
 8008526:	461a      	mov	r2, r3
					* 250;
 8008528:	23fa      	movs	r3, #250	@ 0xfa
 800852a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	601a      	str	r2, [r3, #0]
 8008532:	e007      	b.n	8008544 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8008534:	893b      	ldrh	r3, [r7, #8]
 8008536:	b21b      	sxth	r3, r3
 8008538:	461a      	mov	r2, r3
 800853a:	23fa      	movs	r3, #250	@ 0xfa
 800853c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8008544:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8008550:	b480      	push	{r7}
 8008552:	b08b      	sub	sp, #44	@ 0x2c
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
 800855c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800855e:	2308      	movs	r3, #8
 8008560:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	f04f 32ff 	mov.w	r2, #4294967295
 800856c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	fbb2 f3f3 	udiv	r3, r2, r3
 8008576:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	69ba      	ldr	r2, [r7, #24]
 800857c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008580:	69b9      	ldr	r1, [r7, #24]
 8008582:	fb01 f202 	mul.w	r2, r1, r2
 8008586:	1a9b      	subs	r3, r3, r2
 8008588:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	627b      	str	r3, [r7, #36]	@ 0x24
 800858e:	e030      	b.n	80085f2 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008590:	2300      	movs	r3, #0
 8008592:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008598:	4413      	add	r3, r2
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800859e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d11e      	bne.n	80085e4 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80085a6:	7ffa      	ldrb	r2, [r7, #31]
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	fa42 f303 	asr.w	r3, r2, r3
 80085ae:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80085b4:	e016      	b.n	80085e4 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80085b6:	7ffb      	ldrb	r3, [r7, #31]
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00b      	beq.n	80085d8 <get_next_good_spad+0x88>
				success = 1;
 80085c0:	2301      	movs	r3, #1
 80085c2:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80085c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	fb03 f202 	mul.w	r2, r3, r2
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	4413      	add	r3, r2
 80085d0:	461a      	mov	r2, r3
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	601a      	str	r2, [r3, #0]
				break;
 80085d6:	e009      	b.n	80085ec <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80085d8:	7ffb      	ldrb	r3, [r7, #31]
 80085da:	085b      	lsrs	r3, r3, #1
 80085dc:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	3301      	adds	r3, #1
 80085e2:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80085e4:	6a3a      	ldr	r2, [r7, #32]
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d3e4      	bcc.n	80085b6 <get_next_good_spad+0x66>
				coarseIndex++) {
 80085ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ee:	3301      	adds	r3, #1
 80085f0:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80085f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d202      	bcs.n	8008600 <get_next_good_spad+0xb0>
 80085fa:	7fbb      	ldrb	r3, [r7, #30]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d0c7      	beq.n	8008590 <get_next_good_spad+0x40>
		}
	}
}
 8008600:	bf00      	nop
 8008602:	372c      	adds	r7, #44	@ 0x2c
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8008614:	2301      	movs	r3, #1
 8008616:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	099b      	lsrs	r3, r3, #6
 800861c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800861e:	4a07      	ldr	r2, [pc, #28]	@ (800863c <is_aperture+0x30>)
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <is_aperture+0x22>
		isAperture = 0;
 800862a:	2300      	movs	r3, #0
 800862c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800862e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	240002c0 	.word	0x240002c0

08008640 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8008640:	b480      	push	{r7}
 8008642:	b089      	sub	sp, #36	@ 0x24
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800864c:	2300      	movs	r3, #0
 800864e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8008650:	2308      	movs	r3, #8
 8008652:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	fbb2 f3f3 	udiv	r3, r2, r3
 800865c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	fbb3 f2f2 	udiv	r2, r3, r2
 8008666:	69b9      	ldr	r1, [r7, #24]
 8008668:	fb01 f202 	mul.w	r2, r1, r2
 800866c:	1a9b      	subs	r3, r3, r2
 800866e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	429a      	cmp	r2, r3
 8008676:	d302      	bcc.n	800867e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008678:	23ce      	movs	r3, #206	@ 0xce
 800867a:	77fb      	strb	r3, [r7, #31]
 800867c:	e010      	b.n	80086a0 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	4413      	add	r3, r2
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	b25a      	sxtb	r2, r3
 8008688:	2101      	movs	r1, #1
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	fa01 f303 	lsl.w	r3, r1, r3
 8008690:	b25b      	sxtb	r3, r3
 8008692:	4313      	orrs	r3, r2
 8008694:	b259      	sxtb	r1, r3
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	4413      	add	r3, r2
 800869c:	b2ca      	uxtb	r2, r1
 800869e:	701a      	strb	r2, [r3, #0]

	return status;
 80086a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3724      	adds	r7, #36	@ 0x24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80086ba:	2306      	movs	r3, #6
 80086bc:	683a      	ldr	r2, [r7, #0]
 80086be:	21b0      	movs	r1, #176	@ 0xb0
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f003 f8b7 	bl	800b834 <VL53L0X_WriteMulti>
 80086c6:	4603      	mov	r3, r0
 80086c8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80086ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80086e0:	2306      	movs	r3, #6
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	21b0      	movs	r1, #176	@ 0xb0
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f003 f8d4 	bl	800b894 <VL53L0X_ReadMulti>
 80086ec:	4603      	mov	r3, r0
 80086ee:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80086f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b08c      	sub	sp, #48	@ 0x30
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	607a      	str	r2, [r7, #4]
 8008706:	603b      	str	r3, [r7, #0]
 8008708:	460b      	mov	r3, r1
 800870a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800870c:	2300      	movs	r3, #0
 800870e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8008712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008714:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8008716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008718:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800871a:	2300      	movs	r3, #0
 800871c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800871e:	e02b      	b.n	8008778 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8008720:	f107 031c 	add.w	r3, r7, #28
 8008724:	6a3a      	ldr	r2, [r7, #32]
 8008726:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f7ff ff11 	bl	8008550 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008734:	d103      	bne.n	800873e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008736:	23ce      	movs	r3, #206	@ 0xce
 8008738:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 800873c:	e020      	b.n	8008780 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	461a      	mov	r2, r3
 8008742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008744:	4413      	add	r3, r2
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff ff60 	bl	800860c <is_aperture>
 800874c:	4603      	mov	r3, r0
 800874e:	461a      	mov	r2, r3
 8008750:	7afb      	ldrb	r3, [r7, #11]
 8008752:	4293      	cmp	r3, r2
 8008754:	d003      	beq.n	800875e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008756:	23ce      	movs	r3, #206	@ 0xce
 8008758:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 800875c:	e010      	b.n	8008780 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8008762:	6a3a      	ldr	r2, [r7, #32]
 8008764:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008766:	6838      	ldr	r0, [r7, #0]
 8008768:	f7ff ff6a 	bl	8008640 <enable_spad_bit>
		currentSpad++;
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	3301      	adds	r3, #1
 8008770:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008774:	3301      	adds	r3, #1
 8008776:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008778:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800877a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800877c:	429a      	cmp	r2, r3
 800877e:	d3cf      	bcc.n	8008720 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008780:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008782:	6a3a      	ldr	r2, [r7, #32]
 8008784:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8008786:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800878a:	2b00      	cmp	r3, #0
 800878c:	d106      	bne.n	800879c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f7ff ff8d 	bl	80086b0 <set_ref_spad_map>
 8008796:	4603      	mov	r3, r0
 8008798:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800879c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d121      	bne.n	80087e8 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80087a4:	f107 0314 	add.w	r3, r7, #20
 80087a8:	4619      	mov	r1, r3
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f7ff ff93 	bl	80086d6 <get_ref_spad_map>
 80087b0:	4603      	mov	r3, r0
 80087b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 80087b6:	2300      	movs	r3, #0
 80087b8:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80087ba:	e011      	b.n	80087e0 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80087bc:	683a      	ldr	r2, [r7, #0]
 80087be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c0:	4413      	add	r3, r2
 80087c2:	781a      	ldrb	r2, [r3, #0]
 80087c4:	f107 0114 	add.w	r1, r7, #20
 80087c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ca:	440b      	add	r3, r1
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d003      	beq.n	80087da <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80087d2:	23ce      	movs	r3, #206	@ 0xce
 80087d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 80087d8:	e006      	b.n	80087e8 <enable_ref_spads+0xec>
			}
			i++;
 80087da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087dc:	3301      	adds	r3, #1
 80087de:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 80087e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d3e9      	bcc.n	80087bc <enable_ref_spads+0xc0>
		}
	}
	return status;
 80087e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3730      	adds	r7, #48	@ 0x30
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08a      	sub	sp, #40	@ 0x28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80087fe:	2300      	movs	r3, #0
 8008800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8008810:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8008814:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008818:	2b00      	cmp	r3, #0
 800881a:	d107      	bne.n	800882c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800881c:	22c0      	movs	r2, #192	@ 0xc0
 800881e:	2101      	movs	r1, #1
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f003 f863 	bl	800b8ec <VL53L0X_WrByte>
 8008826:	4603      	mov	r3, r0
 8008828:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800882c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008830:	2b00      	cmp	r3, #0
 8008832:	d108      	bne.n	8008846 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8008834:	f107 0308 	add.w	r3, r7, #8
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7ff fc4c 	bl	80080d8 <VL53L0X_PerformSingleRangingMeasurement>
 8008840:	4603      	mov	r3, r0
 8008842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8008846:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800884a:	2b00      	cmp	r3, #0
 800884c:	d107      	bne.n	800885e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800884e:	2201      	movs	r2, #1
 8008850:	21ff      	movs	r1, #255	@ 0xff
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f003 f84a 	bl	800b8ec <VL53L0X_WrByte>
 8008858:	4603      	mov	r3, r0
 800885a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 800885e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008862:	2b00      	cmp	r3, #0
 8008864:	d107      	bne.n	8008876 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	21b6      	movs	r1, #182	@ 0xb6
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f003 f8ea 	bl	800ba44 <VL53L0X_RdWord>
 8008870:	4603      	mov	r3, r0
 8008872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8008876:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800887a:	2b00      	cmp	r3, #0
 800887c:	d107      	bne.n	800888e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800887e:	2200      	movs	r2, #0
 8008880:	21ff      	movs	r1, #255	@ 0xff
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f003 f832 	bl	800b8ec <VL53L0X_WrByte>
 8008888:	4603      	mov	r3, r0
 800888a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800888e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008892:	2b00      	cmp	r3, #0
 8008894:	d112      	bne.n	80088bc <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008896:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800889a:	461a      	mov	r2, r3
 800889c:	2101      	movs	r1, #1
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f003 f824 	bl	800b8ec <VL53L0X_WrByte>
 80088a4:	4603      	mov	r3, r0
 80088a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80088aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d104      	bne.n	80088bc <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80088b8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}

	return status;
 80088bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3728      	adds	r7, #40	@ 0x28
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80088c8:	b590      	push	{r4, r7, lr}
 80088ca:	b09d      	sub	sp, #116	@ 0x74
 80088cc:	af06      	add	r7, sp, #24
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088d4:	2300      	movs	r3, #0
 80088d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80088da:	23b4      	movs	r3, #180	@ 0xb4
 80088dc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 80088e0:	2303      	movs	r3, #3
 80088e2:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 80088e4:	232c      	movs	r3, #44	@ 0x2c
 80088e6:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 80088e8:	2300      	movs	r3, #0
 80088ea:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 80088ec:	2300      	movs	r3, #0
 80088ee:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80088f0:	2300      	movs	r3, #0
 80088f2:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80088f4:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80088f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80088fa:	2300      	movs	r3, #0
 80088fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 80088fe:	2300      	movs	r3, #0
 8008900:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 8008902:	2306      	movs	r3, #6
 8008904:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 800890a:	2300      	movs	r3, #0
 800890c:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 800890e:	2300      	movs	r3, #0
 8008910:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 8008914:	2300      	movs	r3, #0
 8008916:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800891c:	2300      	movs	r3, #0
 800891e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 800892c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800892e:	2300      	movs	r3, #0
 8008930:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008932:	e009      	b.n	8008948 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008938:	4413      	add	r3, r2
 800893a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800893e:	2200      	movs	r2, #0
 8008940:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008944:	3301      	adds	r3, #1
 8008946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008948:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800894a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894c:	429a      	cmp	r2, r3
 800894e:	d3f1      	bcc.n	8008934 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008950:	2201      	movs	r2, #1
 8008952:	21ff      	movs	r1, #255	@ 0xff
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f002 ffc9 	bl	800b8ec <VL53L0X_WrByte>
 800895a:	4603      	mov	r3, r0
 800895c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008960:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8008964:	2b00      	cmp	r3, #0
 8008966:	d107      	bne.n	8008978 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8008968:	2200      	movs	r2, #0
 800896a:	214f      	movs	r1, #79	@ 0x4f
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f002 ffbd 	bl	800b8ec <VL53L0X_WrByte>
 8008972:	4603      	mov	r3, r0
 8008974:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008978:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800897c:	2b00      	cmp	r3, #0
 800897e:	d107      	bne.n	8008990 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008980:	222c      	movs	r2, #44	@ 0x2c
 8008982:	214e      	movs	r1, #78	@ 0x4e
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f002 ffb1 	bl	800b8ec <VL53L0X_WrByte>
 800898a:	4603      	mov	r3, r0
 800898c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008990:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8008994:	2b00      	cmp	r3, #0
 8008996:	d107      	bne.n	80089a8 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008998:	2200      	movs	r2, #0
 800899a:	21ff      	movs	r1, #255	@ 0xff
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f002 ffa5 	bl	800b8ec <VL53L0X_WrByte>
 80089a2:	4603      	mov	r3, r0
 80089a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80089a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d109      	bne.n	80089c4 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80089b0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80089b4:	461a      	mov	r2, r3
 80089b6:	21b6      	movs	r1, #182	@ 0xb6
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f002 ff97 	bl	800b8ec <VL53L0X_WrByte>
 80089be:	4603      	mov	r3, r0
 80089c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80089c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d107      	bne.n	80089dc <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80089cc:	2200      	movs	r2, #0
 80089ce:	2180      	movs	r1, #128	@ 0x80
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f002 ff8b 	bl	800b8ec <VL53L0X_WrByte>
 80089d6:	4603      	mov	r3, r0
 80089d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80089dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10a      	bne.n	80089fa <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80089e4:	f107 0210 	add.w	r2, r7, #16
 80089e8:	f107 0111 	add.w	r1, r7, #17
 80089ec:	2300      	movs	r3, #0
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f000 fbbb 	bl	800916a <VL53L0X_perform_ref_calibration>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80089fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d121      	bne.n	8008a46 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8008a02:	2300      	movs	r3, #0
 8008a04:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 8008a06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a08:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 8008a0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a10:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f503 7492 	add.w	r4, r3, #292	@ 0x124
		Status = enable_ref_spads(Dev,
 8008a1e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8008a22:	f107 0218 	add.w	r2, r7, #24
 8008a26:	9204      	str	r2, [sp, #16]
 8008a28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a2a:	9203      	str	r2, [sp, #12]
 8008a2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008a2e:	9202      	str	r2, [sp, #8]
 8008a30:	9301      	str	r3, [sp, #4]
 8008a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	4623      	mov	r3, r4
 8008a38:	4602      	mov	r2, r0
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f7ff fe5e 	bl	80086fc <enable_ref_spads>
 8008a40:	4603      	mov	r3, r0
 8008a42:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008a46:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d174      	bne.n	8008b38 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 8008a52:	f107 0312 	add.w	r3, r7, #18
 8008a56:	4619      	mov	r1, r3
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f7ff fecb 	bl	80087f4 <perform_ref_signal_measurement>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008a64:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d161      	bne.n	8008b30 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8008a6c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008a6e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d25d      	bcs.n	8008b30 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008a74:	2300      	movs	r3, #0
 8008a76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a78:	e009      	b.n	8008a8e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8008a84:	2200      	movs	r2, #0
 8008a86:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8008a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d3f1      	bcc.n	8008a7a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8008a96:	e002      	b.n	8008a9e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8008a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8008a9e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8008aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008aa4:	4413      	add	r3, r2
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7ff fdb0 	bl	800860c <is_aperture>
 8008aac:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d103      	bne.n	8008aba <VL53L0X_perform_ref_spad_management+0x1f2>
 8008ab2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d3ee      	bcc.n	8008a98 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8008aba:	2301      	movs	r3, #1
 8008abc:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 8008abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ac0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f503 7492 	add.w	r4, r3, #292	@ 0x124
			Status = enable_ref_spads(Dev,
 8008ace:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8008ad2:	f107 0218 	add.w	r2, r7, #24
 8008ad6:	9204      	str	r2, [sp, #16]
 8008ad8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ada:	9203      	str	r2, [sp, #12]
 8008adc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ade:	9202      	str	r2, [sp, #8]
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	4623      	mov	r3, r4
 8008ae8:	4602      	mov	r2, r0
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f7ff fe06 	bl	80086fc <enable_ref_spads>
 8008af0:	4603      	mov	r3, r0
 8008af2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008af6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d11b      	bne.n	8008b36 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 8008b02:	f107 0312 	add.w	r3, r7, #18
 8008b06:	4619      	mov	r1, r3
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f7ff fe73 	bl	80087f4 <perform_ref_signal_measurement>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8008b14:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10c      	bne.n	8008b36 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8008b1c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8008b1e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d208      	bcs.n	8008b36 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8008b24:	2301      	movs	r3, #1
 8008b26:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 8008b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8008b2e:	e002      	b.n	8008b36 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8008b30:	2300      	movs	r3, #0
 8008b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b34:	e000      	b.n	8008b38 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8008b36:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008b38:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f040 80af 	bne.w	8008ca0 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8008b42:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008b44:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008b46:	429a      	cmp	r2, r3
 8008b48:	f240 80aa 	bls.w	8008ca0 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8008b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b4e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 8008b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b54:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 8008b5c:	f107 031c 	add.w	r3, r7, #28
 8008b60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b62:	4618      	mov	r0, r3
 8008b64:	f003 f84c 	bl	800bc00 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8008b68:	8a7b      	ldrh	r3, [r7, #18]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	bfb8      	it	lt
 8008b74:	425b      	neglt	r3, r3
 8008b76:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 8008b7e:	e086      	b.n	8008c8e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
			get_next_good_spad(
 8008b86:	f107 0314 	add.w	r3, r7, #20
 8008b8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008b8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b8e:	f7ff fcdf 	bl	8008550 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b98:	d103      	bne.n	8008ba2 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008b9a:	23ce      	movs	r3, #206	@ 0xce
 8008b9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 8008ba0:	e07e      	b.n	8008ca0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8008ba2:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	4413      	add	r3, r2
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7ff fd2e 	bl	800860c <is_aperture>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d003      	beq.n	8008bc2 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				break;
 8008bc0:	e06e      	b.n	8008ca0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8008bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c

			currentSpadIndex = nextGoodSpad;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f503 7392 	add.w	r3, r3, #292	@ 0x124
			Status = enable_spad_bit(
 8008bd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008bd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7ff fd32 	bl	8008640 <enable_spad_bit>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008be2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10c      	bne.n	8008c04 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8008bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bec:	3301      	adds	r3, #1
 8008bee:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f503 7392 	add.w	r3, r3, #292	@ 0x124
				Status = set_ref_spad_map(Dev,
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f7ff fd59 	bl	80086b0 <set_ref_spad_map>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8008c04:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d146      	bne.n	8008c9a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8008c0c:	f107 0312 	add.w	r3, r7, #18
 8008c10:	4619      	mov	r1, r3
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f7ff fdee 	bl	80087f4 <perform_ref_signal_measurement>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8008c1e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d13b      	bne.n	8008c9e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8008c26:	8a7b      	ldrh	r3, [r7, #18]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	bfb8      	it	lt
 8008c32:	425b      	neglt	r3, r3
 8008c34:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 8008c36:	8a7b      	ldrh	r3, [r7, #18]
 8008c38:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d21c      	bcs.n	8008c78 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8008c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d914      	bls.n	8008c70 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8008c46:	f107 031c 	add.w	r3, r7, #28
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f7ff fd2f 	bl	80086b0 <set_ref_spad_map>
 8008c52:	4603      	mov	r3, r0
 8008c54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
					memcpy(
 8008c5e:	f107 011c 	add.w	r1, r7, #28
 8008c62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c64:	4618      	mov	r0, r3
 8008c66:	f002 ffcb 	bl	800bc00 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8008c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 8008c70:	2301      	movs	r3, #1
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c76:	e00a      	b.n	8008c8e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8008c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7a:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f503 7192 	add.w	r1, r3, #292	@ 0x124
				memcpy(lastSpadArray,
 8008c82:	f107 031c 	add.w	r3, r7, #28
 8008c86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f002 ffb9 	bl	800bc00 <memcpy>
		while (!complete) {
 8008c8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f43f af74 	beq.w	8008b80 <VL53L0X_perform_ref_spad_management+0x2b8>
 8008c98:	e002      	b.n	8008ca0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008c9a:	bf00      	nop
 8008c9c:	e000      	b.n	8008ca0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008c9e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008ca0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d115      	bne.n	8008cd4 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008cac:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8008cb4:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	b2da      	uxtb	r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	781a      	ldrb	r2, [r3, #0]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8008cd4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	375c      	adds	r7, #92	@ 0x5c
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd90      	pop	{r4, r7, pc}

08008ce0 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8008ce0:	b590      	push	{r4, r7, lr}
 8008ce2:	b093      	sub	sp, #76	@ 0x4c
 8008ce4:	af06      	add	r7, sp, #24
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	4613      	mov	r3, r2
 8008cec:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 8008cf8:	23b4      	movs	r3, #180	@ 0xb4
 8008cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 8008cfe:	2306      	movs	r3, #6
 8008d00:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8008d02:	232c      	movs	r3, #44	@ 0x2c
 8008d04:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008d06:	2201      	movs	r2, #1
 8008d08:	21ff      	movs	r1, #255	@ 0xff
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f002 fdee 	bl	800b8ec <VL53L0X_WrByte>
 8008d10:	4603      	mov	r3, r0
 8008d12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008d16:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d107      	bne.n	8008d2e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8008d1e:	2200      	movs	r2, #0
 8008d20:	214f      	movs	r1, #79	@ 0x4f
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f002 fde2 	bl	800b8ec <VL53L0X_WrByte>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008d2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d107      	bne.n	8008d46 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8008d36:	222c      	movs	r2, #44	@ 0x2c
 8008d38:	214e      	movs	r1, #78	@ 0x4e
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f002 fdd6 	bl	800b8ec <VL53L0X_WrByte>
 8008d40:	4603      	mov	r3, r0
 8008d42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008d46:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d107      	bne.n	8008d5e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008d4e:	2200      	movs	r2, #0
 8008d50:	21ff      	movs	r1, #255	@ 0xff
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f002 fdca 	bl	800b8ec <VL53L0X_WrByte>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008d5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d109      	bne.n	8008d7a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8008d66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	21b6      	movs	r1, #182	@ 0xb6
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f002 fdbc 	bl	800b8ec <VL53L0X_WrByte>
 8008d74:	4603      	mov	r3, r0
 8008d76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d7e:	e009      	b.n	8008d94 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d90:	3301      	adds	r3, #1
 8008d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d3f1      	bcc.n	8008d80 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8008d9c:	79fb      	ldrb	r3, [r7, #7]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d011      	beq.n	8008dc6 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008da2:	e002      	b.n	8008daa <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8008da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da6:	3301      	adds	r3, #1
 8008da8:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008daa:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8008dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db0:	4413      	add	r3, r2
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7ff fc2a 	bl	800860c <is_aperture>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d103      	bne.n	8008dc6 <VL53L0X_set_reference_spads+0xe6>
 8008dbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d3ee      	bcc.n	8008da4 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f503 7492 	add.w	r4, r3, #292	@ 0x124
	Status = enable_ref_spads(Dev,
 8008dd2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008dd6:	79f9      	ldrb	r1, [r7, #7]
 8008dd8:	f107 0214 	add.w	r2, r7, #20
 8008ddc:	9204      	str	r2, [sp, #16]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	9203      	str	r2, [sp, #12]
 8008de2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008de4:	9202      	str	r2, [sp, #8]
 8008de6:	9301      	str	r3, [sp, #4]
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	4623      	mov	r3, r4
 8008dee:	4602      	mov	r2, r0
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f7ff fc83 	bl	80086fc <enable_ref_spads>
 8008df6:	4603      	mov	r3, r0
 8008df8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8008dfc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10c      	bne.n	8008e1e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	79fa      	ldrb	r2, [r7, #7]
 8008e1a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8008e1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3734      	adds	r7, #52	@ 0x34
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd90      	pop	{r4, r7, pc}

08008e2a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b084      	sub	sp, #16
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	460b      	mov	r3, r1
 8008e34:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e36:	2300      	movs	r3, #0
 8008e38:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10a      	bne.n	8008e58 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8008e42:	78fb      	ldrb	r3, [r7, #3]
 8008e44:	f043 0301 	orr.w	r3, r3, #1
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f002 fd4c 	bl	800b8ec <VL53L0X_WrByte>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8008e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d104      	bne.n	8008e6a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f9bf 	bl	80091e4 <VL53L0X_measurement_poll_for_completion>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d105      	bne.n	8008e7e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008e72:	2100      	movs	r1, #0
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f7ff fab5 	bl	80083e4 <VL53L0X_ClearInterruptMask>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d106      	bne.n	8008e94 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8008e86:	2200      	movs	r2, #0
 8008e88:	2100      	movs	r1, #0
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f002 fd2e 	bl	800b8ec <VL53L0X_WrByte>
 8008e90:	4603      	mov	r3, r0
 8008e92:	73fb      	strb	r3, [r7, #15]

	return Status;
 8008e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	4608      	mov	r0, r1
 8008eaa:	4611      	mov	r1, r2
 8008eac:	461a      	mov	r2, r3
 8008eae:	4603      	mov	r3, r0
 8008eb0:	70fb      	strb	r3, [r7, #3]
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	70bb      	strb	r3, [r7, #2]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	21ff      	movs	r1, #255	@ 0xff
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f002 fd10 	bl	800b8ec <VL53L0X_WrByte>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	461a      	mov	r2, r3
 8008ed0:	7bfb      	ldrb	r3, [r7, #15]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	2100      	movs	r1, #0
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f002 fd06 	bl	800b8ec <VL53L0X_WrByte>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008eea:	2200      	movs	r2, #0
 8008eec:	21ff      	movs	r1, #255	@ 0xff
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f002 fcfc 	bl	800b8ec <VL53L0X_WrByte>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8008efe:	78fb      	ldrb	r3, [r7, #3]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d01e      	beq.n	8008f42 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8008f04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d009      	beq.n	8008f20 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8008f0c:	69ba      	ldr	r2, [r7, #24]
 8008f0e:	21cb      	movs	r1, #203	@ 0xcb
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f002 fd6d 	bl	800b9f0 <VL53L0X_RdByte>
 8008f16:	4603      	mov	r3, r0
 8008f18:	461a      	mov	r2, r3
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008f20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d02a      	beq.n	8008f7e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8008f28:	f107 030e 	add.w	r3, r7, #14
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	21ee      	movs	r1, #238	@ 0xee
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f002 fd5d 	bl	800b9f0 <VL53L0X_RdByte>
 8008f36:	4603      	mov	r3, r0
 8008f38:	461a      	mov	r2, r3
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	73fb      	strb	r3, [r7, #15]
 8008f40:	e01d      	b.n	8008f7e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8008f42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00a      	beq.n	8008f60 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8008f4a:	78bb      	ldrb	r3, [r7, #2]
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	21cb      	movs	r1, #203	@ 0xcb
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f002 fccb 	bl	800b8ec <VL53L0X_WrByte>
 8008f56:	4603      	mov	r3, r0
 8008f58:	461a      	mov	r2, r3
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008f60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00a      	beq.n	8008f7e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8008f68:	787b      	ldrb	r3, [r7, #1]
 8008f6a:	2280      	movs	r2, #128	@ 0x80
 8008f6c:	21ee      	movs	r1, #238	@ 0xee
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f002 fd0a 	bl	800b988 <VL53L0X_UpdateByte>
 8008f74:	4603      	mov	r3, r0
 8008f76:	461a      	mov	r2, r3
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008f7e:	2201      	movs	r2, #1
 8008f80:	21ff      	movs	r1, #255	@ 0xff
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f002 fcb2 	bl	800b8ec <VL53L0X_WrByte>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008f92:	2201      	movs	r2, #1
 8008f94:	2100      	movs	r1, #0
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f002 fca8 	bl	800b8ec <VL53L0X_WrByte>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	21ff      	movs	r1, #255	@ 0xff
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f002 fc9e 	bl	800b8ec <VL53L0X_WrByte>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8008fba:	7bbb      	ldrb	r3, [r7, #14]
 8008fbc:	f023 0310 	bic.w	r3, r3, #16
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	701a      	strb	r2, [r3, #0]

	return Status;
 8008fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b08a      	sub	sp, #40	@ 0x28
 8008fd6:	af04      	add	r7, sp, #16
 8008fd8:	60f8      	str	r0, [r7, #12]
 8008fda:	60b9      	str	r1, [r7, #8]
 8008fdc:	4611      	mov	r1, r2
 8008fde:	461a      	mov	r2, r3
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	71fb      	strb	r3, [r7, #7]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008ffc:	79bb      	ldrb	r3, [r7, #6]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d003      	beq.n	800900a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8009008:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800900a:	2201      	movs	r2, #1
 800900c:	2101      	movs	r1, #1
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f002 fc6c 	bl	800b8ec <VL53L0X_WrByte>
 8009014:	4603      	mov	r3, r0
 8009016:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009018:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d105      	bne.n	800902c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8009020:	2140      	movs	r1, #64	@ 0x40
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f7ff ff01 	bl	8008e2a <VL53L0X_perform_single_ref_calibration>
 8009028:	4603      	mov	r3, r0
 800902a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800902c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d115      	bne.n	8009060 <VL53L0X_perform_vhv_calibration+0x8e>
 8009034:	79fb      	ldrb	r3, [r7, #7]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d112      	bne.n	8009060 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800903a:	7d39      	ldrb	r1, [r7, #20]
 800903c:	7d7a      	ldrb	r2, [r7, #21]
 800903e:	2300      	movs	r3, #0
 8009040:	9303      	str	r3, [sp, #12]
 8009042:	2301      	movs	r3, #1
 8009044:	9302      	str	r3, [sp, #8]
 8009046:	f107 0313 	add.w	r3, r7, #19
 800904a:	9301      	str	r3, [sp, #4]
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	460b      	mov	r3, r1
 8009052:	2101      	movs	r1, #1
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f7ff ff23 	bl	8008ea0 <VL53L0X_ref_calibration_io>
 800905a:	4603      	mov	r3, r0
 800905c:	75fb      	strb	r3, [r7, #23]
 800905e:	e002      	b.n	8009066 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	2200      	movs	r2, #0
 8009064:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009066:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d112      	bne.n	8009094 <VL53L0X_perform_vhv_calibration+0xc2>
 800906e:	79bb      	ldrb	r3, [r7, #6]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00f      	beq.n	8009094 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009074:	7dbb      	ldrb	r3, [r7, #22]
 8009076:	461a      	mov	r2, r3
 8009078:	2101      	movs	r1, #1
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f002 fc36 	bl	800b8ec <VL53L0X_WrByte>
 8009080:	4603      	mov	r3, r0
 8009082:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009084:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d103      	bne.n	8009094 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	7dba      	ldrb	r2, [r7, #22]
 8009090:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8009094:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b08a      	sub	sp, #40	@ 0x28
 80090a4:	af04      	add	r7, sp, #16
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	4611      	mov	r1, r2
 80090ac:	461a      	mov	r2, r3
 80090ae:	460b      	mov	r3, r1
 80090b0:	71fb      	strb	r3, [r7, #7]
 80090b2:	4613      	mov	r3, r2
 80090b4:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090b6:	2300      	movs	r3, #0
 80090b8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80090ba:	2300      	movs	r3, #0
 80090bc:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80090be:	2300      	movs	r3, #0
 80090c0:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80090c2:	2300      	movs	r3, #0
 80090c4:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80090c6:	79bb      	ldrb	r3, [r7, #6]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80090d2:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80090d4:	2202      	movs	r2, #2
 80090d6:	2101      	movs	r1, #1
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f002 fc07 	bl	800b8ec <VL53L0X_WrByte>
 80090de:	4603      	mov	r3, r0
 80090e0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80090e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d105      	bne.n	80090f6 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80090ea:	2100      	movs	r1, #0
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f7ff fe9c 	bl	8008e2a <VL53L0X_perform_single_ref_calibration>
 80090f2:	4603      	mov	r3, r0
 80090f4:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80090f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d115      	bne.n	800912a <VL53L0X_perform_phase_calibration+0x8a>
 80090fe:	79fb      	ldrb	r3, [r7, #7]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d112      	bne.n	800912a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009104:	7d39      	ldrb	r1, [r7, #20]
 8009106:	7d7a      	ldrb	r2, [r7, #21]
 8009108:	2301      	movs	r3, #1
 800910a:	9303      	str	r3, [sp, #12]
 800910c:	2300      	movs	r3, #0
 800910e:	9302      	str	r3, [sp, #8]
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	9301      	str	r3, [sp, #4]
 8009114:	f107 0313 	add.w	r3, r7, #19
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	460b      	mov	r3, r1
 800911c:	2101      	movs	r1, #1
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f7ff febe 	bl	8008ea0 <VL53L0X_ref_calibration_io>
 8009124:	4603      	mov	r3, r0
 8009126:	75fb      	strb	r3, [r7, #23]
 8009128:	e002      	b.n	8009130 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	2200      	movs	r2, #0
 800912e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009130:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d112      	bne.n	800915e <VL53L0X_perform_phase_calibration+0xbe>
 8009138:	79bb      	ldrb	r3, [r7, #6]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00f      	beq.n	800915e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800913e:	7dbb      	ldrb	r3, [r7, #22]
 8009140:	461a      	mov	r2, r3
 8009142:	2101      	movs	r1, #1
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f002 fbd1 	bl	800b8ec <VL53L0X_WrByte>
 800914a:	4603      	mov	r3, r0
 800914c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800914e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d103      	bne.n	800915e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	7dba      	ldrb	r2, [r7, #22]
 800915a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800915e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b086      	sub	sp, #24
 800916e:	af00      	add	r7, sp, #0
 8009170:	60f8      	str	r0, [r7, #12]
 8009172:	60b9      	str	r1, [r7, #8]
 8009174:	607a      	str	r2, [r7, #4]
 8009176:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009178:	2300      	movs	r3, #0
 800917a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800917c:	2300      	movs	r3, #0
 800917e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8009186:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8009188:	78fa      	ldrb	r2, [r7, #3]
 800918a:	2300      	movs	r3, #0
 800918c:	68b9      	ldr	r1, [r7, #8]
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f7ff ff1f 	bl	8008fd2 <VL53L0X_perform_vhv_calibration>
 8009194:	4603      	mov	r3, r0
 8009196:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009198:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d107      	bne.n	80091b0 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80091a0:	78fa      	ldrb	r2, [r7, #3]
 80091a2:	2300      	movs	r3, #0
 80091a4:	6879      	ldr	r1, [r7, #4]
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f7ff ff7a 	bl	80090a0 <VL53L0X_perform_phase_calibration>
 80091ac:	4603      	mov	r3, r0
 80091ae:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80091b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10f      	bne.n	80091d8 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80091b8:	7dbb      	ldrb	r3, [r7, #22]
 80091ba:	461a      	mov	r2, r3
 80091bc:	2101      	movs	r1, #1
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f002 fb94 	bl	800b8ec <VL53L0X_WrByte>
 80091c4:	4603      	mov	r3, r0
 80091c6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80091c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d103      	bne.n	80091d8 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	7dba      	ldrb	r2, [r7, #22]
 80091d4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 80091d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80091ec:	2300      	movs	r3, #0
 80091ee:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80091f8:	f107 030f 	add.w	r3, r7, #15
 80091fc:	4619      	mov	r1, r3
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7fe fe0e 	bl	8007e20 <VL53L0X_GetMeasurementDataReady>
 8009204:	4603      	mov	r3, r0
 8009206:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8009208:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d110      	bne.n	8009232 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8009210:	7bfb      	ldrb	r3, [r7, #15]
 8009212:	2b01      	cmp	r3, #1
 8009214:	d00f      	beq.n	8009236 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	3301      	adds	r3, #1
 800921a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8009222:	d302      	bcc.n	800922a <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009224:	23f9      	movs	r3, #249	@ 0xf9
 8009226:	75fb      	strb	r3, [r7, #23]
			break;
 8009228:	e006      	b.n	8009238 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f002 fc7c 	bl	800bb28 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009230:	e7e2      	b.n	80091f8 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8009232:	bf00      	nop
 8009234:	e000      	b.n	8009238 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8009236:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8009238:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3718      	adds	r7, #24
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	4603      	mov	r3, r0
 800924c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	3301      	adds	r3, #1
 8009256:	b2db      	uxtb	r3, r3
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800925c:	7bfb      	ldrb	r3, [r7, #15]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3714      	adds	r7, #20
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800926a:	b480      	push	{r7}
 800926c:	b085      	sub	sp, #20
 800926e:	af00      	add	r7, sp, #0
 8009270:	4603      	mov	r3, r0
 8009272:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8009278:	79fb      	ldrb	r3, [r7, #7]
 800927a:	085b      	lsrs	r3, r3, #1
 800927c:	b2db      	uxtb	r3, r3
 800927e:	3b01      	subs	r3, #1
 8009280:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8009282:	7bfb      	ldrb	r3, [r7, #15]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800929c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80092a0:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80092a2:	e002      	b.n	80092aa <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	089b      	lsrs	r3, r3, #2
 80092a8:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d8f8      	bhi.n	80092a4 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80092b2:	e017      	b.n	80092e4 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	4413      	add	r3, r2
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d30b      	bcc.n	80092d8 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	4413      	add	r3, r2
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	085b      	lsrs	r3, r3, #1
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	4413      	add	r3, r2
 80092d4:	60fb      	str	r3, [r7, #12]
 80092d6:	e002      	b.n	80092de <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	085b      	lsrs	r3, r3, #1
 80092dc:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	089b      	lsrs	r3, r3, #2
 80092e2:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1e4      	bne.n	80092b4 <VL53L0X_isqrt+0x24>
	}

	return res;
 80092ea:	68fb      	ldr	r3, [r7, #12]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009300:	2300      	movs	r3, #0
 8009302:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8009304:	2200      	movs	r2, #0
 8009306:	2183      	movs	r1, #131	@ 0x83
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f002 faef 	bl	800b8ec <VL53L0X_WrByte>
 800930e:	4603      	mov	r3, r0
 8009310:	461a      	mov	r2, r3
 8009312:	7dfb      	ldrb	r3, [r7, #23]
 8009314:	4313      	orrs	r3, r2
 8009316:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8009318:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d11e      	bne.n	800935e <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8009320:	2300      	movs	r3, #0
 8009322:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8009324:	f107 030f 	add.w	r3, r7, #15
 8009328:	461a      	mov	r2, r3
 800932a:	2183      	movs	r1, #131	@ 0x83
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f002 fb5f 	bl	800b9f0 <VL53L0X_RdByte>
 8009332:	4603      	mov	r3, r0
 8009334:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8009336:	7bfb      	ldrb	r3, [r7, #15]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10a      	bne.n	8009352 <VL53L0X_device_read_strobe+0x5a>
 800933c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d106      	bne.n	8009352 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	3301      	adds	r3, #1
 8009348:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8009350:	d3e8      	bcc.n	8009324 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8009358:	d301      	bcc.n	800935e <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800935a:	23f9      	movs	r3, #249	@ 0xf9
 800935c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800935e:	2201      	movs	r2, #1
 8009360:	2183      	movs	r1, #131	@ 0x83
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f002 fac2 	bl	800b8ec <VL53L0X_WrByte>
 8009368:	4603      	mov	r3, r0
 800936a:	461a      	mov	r2, r3
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	4313      	orrs	r3, r2
 8009370:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8009372:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b098      	sub	sp, #96	@ 0x60
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	460b      	mov	r3, r1
 8009388:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800938a:	2300      	movs	r3, #0
 800938c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8009390:	2300      	movs	r3, #0
 8009392:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 800939c:	2300      	movs	r3, #0
 800939e:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80093a4:	2300      	movs	r3, #0
 80093a6:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 80093a8:	2300      	movs	r3, #0
 80093aa:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80093ae:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80093b2:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80093b4:	2300      	movs	r3, #0
 80093b6:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80093c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80093ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80093ce:	2b07      	cmp	r3, #7
 80093d0:	f000 8408 	beq.w	8009be4 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80093d4:	2201      	movs	r2, #1
 80093d6:	2180      	movs	r1, #128	@ 0x80
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f002 fa87 	bl	800b8ec <VL53L0X_WrByte>
 80093de:	4603      	mov	r3, r0
 80093e0:	461a      	mov	r2, r3
 80093e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80093e6:	4313      	orrs	r3, r2
 80093e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80093ec:	2201      	movs	r2, #1
 80093ee:	21ff      	movs	r1, #255	@ 0xff
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f002 fa7b 	bl	800b8ec <VL53L0X_WrByte>
 80093f6:	4603      	mov	r3, r0
 80093f8:	461a      	mov	r2, r3
 80093fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80093fe:	4313      	orrs	r3, r2
 8009400:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009404:	2200      	movs	r2, #0
 8009406:	2100      	movs	r1, #0
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f002 fa6f 	bl	800b8ec <VL53L0X_WrByte>
 800940e:	4603      	mov	r3, r0
 8009410:	461a      	mov	r2, r3
 8009412:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009416:	4313      	orrs	r3, r2
 8009418:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800941c:	2206      	movs	r2, #6
 800941e:	21ff      	movs	r1, #255	@ 0xff
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f002 fa63 	bl	800b8ec <VL53L0X_WrByte>
 8009426:	4603      	mov	r3, r0
 8009428:	461a      	mov	r2, r3
 800942a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800942e:	4313      	orrs	r3, r2
 8009430:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009434:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8009438:	461a      	mov	r2, r3
 800943a:	2183      	movs	r1, #131	@ 0x83
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f002 fad7 	bl	800b9f0 <VL53L0X_RdByte>
 8009442:	4603      	mov	r3, r0
 8009444:	461a      	mov	r2, r3
 8009446:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800944a:	4313      	orrs	r3, r2
 800944c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8009450:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009454:	f043 0304 	orr.w	r3, r3, #4
 8009458:	b2db      	uxtb	r3, r3
 800945a:	461a      	mov	r2, r3
 800945c:	2183      	movs	r1, #131	@ 0x83
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f002 fa44 	bl	800b8ec <VL53L0X_WrByte>
 8009464:	4603      	mov	r3, r0
 8009466:	461a      	mov	r2, r3
 8009468:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800946c:	4313      	orrs	r3, r2
 800946e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8009472:	2207      	movs	r2, #7
 8009474:	21ff      	movs	r1, #255	@ 0xff
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f002 fa38 	bl	800b8ec <VL53L0X_WrByte>
 800947c:	4603      	mov	r3, r0
 800947e:	461a      	mov	r2, r3
 8009480:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009484:	4313      	orrs	r3, r2
 8009486:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800948a:	2201      	movs	r2, #1
 800948c:	2181      	movs	r1, #129	@ 0x81
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f002 fa2c 	bl	800b8ec <VL53L0X_WrByte>
 8009494:	4603      	mov	r3, r0
 8009496:	461a      	mov	r2, r3
 8009498:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800949c:	4313      	orrs	r3, r2
 800949e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f002 fb40 	bl	800bb28 <VL53L0X_PollingDelay>
 80094a8:	4603      	mov	r3, r0
 80094aa:	461a      	mov	r2, r3
 80094ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80094b0:	4313      	orrs	r3, r2
 80094b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80094b6:	2201      	movs	r2, #1
 80094b8:	2180      	movs	r1, #128	@ 0x80
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f002 fa16 	bl	800b8ec <VL53L0X_WrByte>
 80094c0:	4603      	mov	r3, r0
 80094c2:	461a      	mov	r2, r3
 80094c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80094c8:	4313      	orrs	r3, r2
 80094ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 80094ce:	78fb      	ldrb	r3, [r7, #3]
 80094d0:	f003 0301 	and.w	r3, r3, #1
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 8098 	beq.w	800960a <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80094da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80094de:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f040 8091 	bne.w	800960a <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80094e8:	226b      	movs	r2, #107	@ 0x6b
 80094ea:	2194      	movs	r1, #148	@ 0x94
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f002 f9fd 	bl	800b8ec <VL53L0X_WrByte>
 80094f2:	4603      	mov	r3, r0
 80094f4:	461a      	mov	r2, r3
 80094f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80094fa:	4313      	orrs	r3, r2
 80094fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7ff fef9 	bl	80092f8 <VL53L0X_device_read_strobe>
 8009506:	4603      	mov	r3, r0
 8009508:	461a      	mov	r2, r3
 800950a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800950e:	4313      	orrs	r3, r2
 8009510:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009514:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009518:	461a      	mov	r2, r3
 800951a:	2190      	movs	r1, #144	@ 0x90
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f002 fac7 	bl	800bab0 <VL53L0X_RdDWord>
 8009522:	4603      	mov	r3, r0
 8009524:	461a      	mov	r2, r3
 8009526:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800952a:	4313      	orrs	r3, r2
 800952c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8009530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009532:	0a1b      	lsrs	r3, r3, #8
 8009534:	b2db      	uxtb	r3, r3
 8009536:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800953a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800953e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009540:	0bdb      	lsrs	r3, r3, #15
 8009542:	b2db      	uxtb	r3, r3
 8009544:	f003 0301 	and.w	r3, r3, #1
 8009548:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800954c:	2224      	movs	r2, #36	@ 0x24
 800954e:	2194      	movs	r1, #148	@ 0x94
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f002 f9cb 	bl	800b8ec <VL53L0X_WrByte>
 8009556:	4603      	mov	r3, r0
 8009558:	461a      	mov	r2, r3
 800955a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800955e:	4313      	orrs	r3, r2
 8009560:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7ff fec7 	bl	80092f8 <VL53L0X_device_read_strobe>
 800956a:	4603      	mov	r3, r0
 800956c:	461a      	mov	r2, r3
 800956e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009572:	4313      	orrs	r3, r2
 8009574:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009578:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800957c:	461a      	mov	r2, r3
 800957e:	2190      	movs	r1, #144	@ 0x90
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f002 fa95 	bl	800bab0 <VL53L0X_RdDWord>
 8009586:	4603      	mov	r3, r0
 8009588:	461a      	mov	r2, r3
 800958a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800958e:	4313      	orrs	r3, r2
 8009590:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8009594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009596:	0e1b      	lsrs	r3, r3, #24
 8009598:	b2db      	uxtb	r3, r3
 800959a:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800959c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959e:	0c1b      	lsrs	r3, r3, #16
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80095a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a6:	0a1b      	lsrs	r3, r3, #8
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80095ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80095b2:	2225      	movs	r2, #37	@ 0x25
 80095b4:	2194      	movs	r1, #148	@ 0x94
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f002 f998 	bl	800b8ec <VL53L0X_WrByte>
 80095bc:	4603      	mov	r3, r0
 80095be:	461a      	mov	r2, r3
 80095c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80095c4:	4313      	orrs	r3, r2
 80095c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff fe94 	bl	80092f8 <VL53L0X_device_read_strobe>
 80095d0:	4603      	mov	r3, r0
 80095d2:	461a      	mov	r2, r3
 80095d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80095d8:	4313      	orrs	r3, r2
 80095da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80095de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80095e2:	461a      	mov	r2, r3
 80095e4:	2190      	movs	r1, #144	@ 0x90
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f002 fa62 	bl	800bab0 <VL53L0X_RdDWord>
 80095ec:	4603      	mov	r3, r0
 80095ee:	461a      	mov	r2, r3
 80095f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80095f4:	4313      	orrs	r3, r2
 80095f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80095fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fc:	0e1b      	lsrs	r3, r3, #24
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8009602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009604:	0c1b      	lsrs	r3, r3, #16
 8009606:	b2db      	uxtb	r3, r3
 8009608:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800960a:	78fb      	ldrb	r3, [r7, #3]
 800960c:	f003 0302 	and.w	r3, r3, #2
 8009610:	2b00      	cmp	r3, #0
 8009612:	f000 8189 	beq.w	8009928 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009616:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800961a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800961e:	2b00      	cmp	r3, #0
 8009620:	f040 8182 	bne.w	8009928 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8009624:	2202      	movs	r2, #2
 8009626:	2194      	movs	r1, #148	@ 0x94
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f002 f95f 	bl	800b8ec <VL53L0X_WrByte>
 800962e:	4603      	mov	r3, r0
 8009630:	461a      	mov	r2, r3
 8009632:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009636:	4313      	orrs	r3, r2
 8009638:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7ff fe5b 	bl	80092f8 <VL53L0X_device_read_strobe>
 8009642:	4603      	mov	r3, r0
 8009644:	461a      	mov	r2, r3
 8009646:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800964a:	4313      	orrs	r3, r2
 800964c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8009650:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8009654:	461a      	mov	r2, r3
 8009656:	2190      	movs	r1, #144	@ 0x90
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f002 f9c9 	bl	800b9f0 <VL53L0X_RdByte>
 800965e:	4603      	mov	r3, r0
 8009660:	461a      	mov	r2, r3
 8009662:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009666:	4313      	orrs	r3, r2
 8009668:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800966c:	227b      	movs	r2, #123	@ 0x7b
 800966e:	2194      	movs	r1, #148	@ 0x94
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f002 f93b 	bl	800b8ec <VL53L0X_WrByte>
 8009676:	4603      	mov	r3, r0
 8009678:	461a      	mov	r2, r3
 800967a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800967e:	4313      	orrs	r3, r2
 8009680:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7ff fe37 	bl	80092f8 <VL53L0X_device_read_strobe>
 800968a:	4603      	mov	r3, r0
 800968c:	461a      	mov	r2, r3
 800968e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009692:	4313      	orrs	r3, r2
 8009694:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8009698:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800969c:	461a      	mov	r2, r3
 800969e:	2190      	movs	r1, #144	@ 0x90
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f002 f9a5 	bl	800b9f0 <VL53L0X_RdByte>
 80096a6:	4603      	mov	r3, r0
 80096a8:	461a      	mov	r2, r3
 80096aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80096ae:	4313      	orrs	r3, r2
 80096b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80096b4:	2277      	movs	r2, #119	@ 0x77
 80096b6:	2194      	movs	r1, #148	@ 0x94
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f002 f917 	bl	800b8ec <VL53L0X_WrByte>
 80096be:	4603      	mov	r3, r0
 80096c0:	461a      	mov	r2, r3
 80096c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80096c6:	4313      	orrs	r3, r2
 80096c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f7ff fe13 	bl	80092f8 <VL53L0X_device_read_strobe>
 80096d2:	4603      	mov	r3, r0
 80096d4:	461a      	mov	r2, r3
 80096d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80096da:	4313      	orrs	r3, r2
 80096dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80096e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80096e4:	461a      	mov	r2, r3
 80096e6:	2190      	movs	r1, #144	@ 0x90
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f002 f9e1 	bl	800bab0 <VL53L0X_RdDWord>
 80096ee:	4603      	mov	r3, r0
 80096f0:	461a      	mov	r2, r3
 80096f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80096f6:	4313      	orrs	r3, r2
 80096f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80096fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fe:	0e5b      	lsrs	r3, r3, #25
 8009700:	b2db      	uxtb	r3, r3
 8009702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009706:	b2db      	uxtb	r3, r3
 8009708:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800970a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800970c:	0c9b      	lsrs	r3, r3, #18
 800970e:	b2db      	uxtb	r3, r3
 8009710:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009714:	b2db      	uxtb	r3, r3
 8009716:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8009718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971a:	0adb      	lsrs	r3, r3, #11
 800971c:	b2db      	uxtb	r3, r3
 800971e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009722:	b2db      	uxtb	r3, r3
 8009724:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8009726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009728:	091b      	lsrs	r3, r3, #4
 800972a:	b2db      	uxtb	r3, r3
 800972c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009730:	b2db      	uxtb	r3, r3
 8009732:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8009734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009736:	b2db      	uxtb	r3, r3
 8009738:	00db      	lsls	r3, r3, #3
 800973a:	b2db      	uxtb	r3, r3
 800973c:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8009740:	b2db      	uxtb	r3, r3
 8009742:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8009746:	2278      	movs	r2, #120	@ 0x78
 8009748:	2194      	movs	r1, #148	@ 0x94
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f002 f8ce 	bl	800b8ec <VL53L0X_WrByte>
 8009750:	4603      	mov	r3, r0
 8009752:	461a      	mov	r2, r3
 8009754:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009758:	4313      	orrs	r3, r2
 800975a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7ff fdca 	bl	80092f8 <VL53L0X_device_read_strobe>
 8009764:	4603      	mov	r3, r0
 8009766:	461a      	mov	r2, r3
 8009768:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800976c:	4313      	orrs	r3, r2
 800976e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009772:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009776:	461a      	mov	r2, r3
 8009778:	2190      	movs	r1, #144	@ 0x90
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f002 f998 	bl	800bab0 <VL53L0X_RdDWord>
 8009780:	4603      	mov	r3, r0
 8009782:	461a      	mov	r2, r3
 8009784:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009788:	4313      	orrs	r3, r2
 800978a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800978e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009790:	0f5b      	lsrs	r3, r3, #29
 8009792:	b2db      	uxtb	r3, r3
 8009794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009798:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800979a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800979e:	4413      	add	r3, r2
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80097a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a6:	0d9b      	lsrs	r3, r3, #22
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80097b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b4:	0bdb      	lsrs	r3, r3, #15
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80097c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c2:	0a1b      	lsrs	r3, r3, #8
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80097ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d0:	085b      	lsrs	r3, r3, #1
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80097dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	019b      	lsls	r3, r3, #6
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80097ee:	2279      	movs	r2, #121	@ 0x79
 80097f0:	2194      	movs	r1, #148	@ 0x94
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f002 f87a 	bl	800b8ec <VL53L0X_WrByte>
 80097f8:	4603      	mov	r3, r0
 80097fa:	461a      	mov	r2, r3
 80097fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009800:	4313      	orrs	r3, r2
 8009802:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7ff fd76 	bl	80092f8 <VL53L0X_device_read_strobe>
 800980c:	4603      	mov	r3, r0
 800980e:	461a      	mov	r2, r3
 8009810:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009814:	4313      	orrs	r3, r2
 8009816:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800981a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800981e:	461a      	mov	r2, r3
 8009820:	2190      	movs	r1, #144	@ 0x90
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f002 f944 	bl	800bab0 <VL53L0X_RdDWord>
 8009828:	4603      	mov	r3, r0
 800982a:	461a      	mov	r2, r3
 800982c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009830:	4313      	orrs	r3, r2
 8009832:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8009836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009838:	0e9b      	lsrs	r3, r3, #26
 800983a:	b2db      	uxtb	r3, r3
 800983c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009840:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8009842:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009846:	4413      	add	r3, r2
 8009848:	b2db      	uxtb	r3, r3
 800984a:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800984c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984e:	0cdb      	lsrs	r3, r3, #19
 8009850:	b2db      	uxtb	r3, r3
 8009852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009856:	b2db      	uxtb	r3, r3
 8009858:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800985a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985c:	0b1b      	lsrs	r3, r3, #12
 800985e:	b2db      	uxtb	r3, r3
 8009860:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009864:	b2db      	uxtb	r3, r3
 8009866:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8009868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986a:	095b      	lsrs	r3, r3, #5
 800986c:	b2db      	uxtb	r3, r3
 800986e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009872:	b2db      	uxtb	r3, r3
 8009874:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8009876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009878:	b2db      	uxtb	r3, r3
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	b2db      	uxtb	r3, r3
 800987e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8009888:	227a      	movs	r2, #122	@ 0x7a
 800988a:	2194      	movs	r1, #148	@ 0x94
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f002 f82d 	bl	800b8ec <VL53L0X_WrByte>
 8009892:	4603      	mov	r3, r0
 8009894:	461a      	mov	r2, r3
 8009896:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800989a:	4313      	orrs	r3, r2
 800989c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7ff fd29 	bl	80092f8 <VL53L0X_device_read_strobe>
 80098a6:	4603      	mov	r3, r0
 80098a8:	461a      	mov	r2, r3
 80098aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80098ae:	4313      	orrs	r3, r2
 80098b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80098b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80098b8:	461a      	mov	r2, r3
 80098ba:	2190      	movs	r1, #144	@ 0x90
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f002 f8f7 	bl	800bab0 <VL53L0X_RdDWord>
 80098c2:	4603      	mov	r3, r0
 80098c4:	461a      	mov	r2, r3
 80098c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80098ca:	4313      	orrs	r3, r2
 80098cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80098d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d2:	0f9b      	lsrs	r3, r3, #30
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098da:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80098dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80098e0:	4413      	add	r3, r2
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80098e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e8:	0ddb      	lsrs	r3, r3, #23
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80098f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f6:	0c1b      	lsrs	r3, r3, #16
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8009902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009904:	0a5b      	lsrs	r3, r3, #9
 8009906:	b2db      	uxtb	r3, r3
 8009908:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800990c:	b2db      	uxtb	r3, r3
 800990e:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8009912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009914:	089b      	lsrs	r3, r3, #2
 8009916:	b2db      	uxtb	r3, r3
 8009918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800991c:	b2db      	uxtb	r3, r3
 800991e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 8009922:	2300      	movs	r3, #0
 8009924:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 8009928:	78fb      	ldrb	r3, [r7, #3]
 800992a:	f003 0304 	and.w	r3, r3, #4
 800992e:	2b00      	cmp	r3, #0
 8009930:	f000 80f1 	beq.w	8009b16 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009934:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009938:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800993c:	2b00      	cmp	r3, #0
 800993e:	f040 80ea 	bne.w	8009b16 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009942:	227b      	movs	r2, #123	@ 0x7b
 8009944:	2194      	movs	r1, #148	@ 0x94
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f001 ffd0 	bl	800b8ec <VL53L0X_WrByte>
 800994c:	4603      	mov	r3, r0
 800994e:	461a      	mov	r2, r3
 8009950:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009954:	4313      	orrs	r3, r2
 8009956:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f7ff fccc 	bl	80092f8 <VL53L0X_device_read_strobe>
 8009960:	4603      	mov	r3, r0
 8009962:	461a      	mov	r2, r3
 8009964:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009968:	4313      	orrs	r3, r2
 800996a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800996e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009972:	461a      	mov	r2, r3
 8009974:	2190      	movs	r1, #144	@ 0x90
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f002 f89a 	bl	800bab0 <VL53L0X_RdDWord>
 800997c:	4603      	mov	r3, r0
 800997e:	461a      	mov	r2, r3
 8009980:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009984:	4313      	orrs	r3, r2
 8009986:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800998a:	227c      	movs	r2, #124	@ 0x7c
 800998c:	2194      	movs	r1, #148	@ 0x94
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f001 ffac 	bl	800b8ec <VL53L0X_WrByte>
 8009994:	4603      	mov	r3, r0
 8009996:	461a      	mov	r2, r3
 8009998:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800999c:	4313      	orrs	r3, r2
 800999e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f7ff fca8 	bl	80092f8 <VL53L0X_device_read_strobe>
 80099a8:	4603      	mov	r3, r0
 80099aa:	461a      	mov	r2, r3
 80099ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80099b0:	4313      	orrs	r3, r2
 80099b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80099b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099ba:	461a      	mov	r2, r3
 80099bc:	2190      	movs	r1, #144	@ 0x90
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f002 f876 	bl	800bab0 <VL53L0X_RdDWord>
 80099c4:	4603      	mov	r3, r0
 80099c6:	461a      	mov	r2, r3
 80099c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80099cc:	4313      	orrs	r3, r2
 80099ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80099d2:	2273      	movs	r2, #115	@ 0x73
 80099d4:	2194      	movs	r1, #148	@ 0x94
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f001 ff88 	bl	800b8ec <VL53L0X_WrByte>
 80099dc:	4603      	mov	r3, r0
 80099de:	461a      	mov	r2, r3
 80099e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80099e4:	4313      	orrs	r3, r2
 80099e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7ff fc84 	bl	80092f8 <VL53L0X_device_read_strobe>
 80099f0:	4603      	mov	r3, r0
 80099f2:	461a      	mov	r2, r3
 80099f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80099f8:	4313      	orrs	r3, r2
 80099fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80099fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009a02:	461a      	mov	r2, r3
 8009a04:	2190      	movs	r1, #144	@ 0x90
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f002 f852 	bl	800bab0 <VL53L0X_RdDWord>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	461a      	mov	r2, r3
 8009a10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a14:	4313      	orrs	r3, r2
 8009a16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8009a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1c:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8009a22:	2274      	movs	r2, #116	@ 0x74
 8009a24:	2194      	movs	r1, #148	@ 0x94
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f001 ff60 	bl	800b8ec <VL53L0X_WrByte>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	461a      	mov	r2, r3
 8009a30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a34:	4313      	orrs	r3, r2
 8009a36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7ff fc5c 	bl	80092f8 <VL53L0X_device_read_strobe>
 8009a40:	4603      	mov	r3, r0
 8009a42:	461a      	mov	r2, r3
 8009a44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009a4e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009a52:	461a      	mov	r2, r3
 8009a54:	2190      	movs	r1, #144	@ 0x90
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f002 f82a 	bl	800bab0 <VL53L0X_RdDWord>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	461a      	mov	r2, r3
 8009a60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a64:	4313      	orrs	r3, r2
 8009a66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8009a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8009a6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009a70:	4313      	orrs	r3, r2
 8009a72:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009a74:	2275      	movs	r2, #117	@ 0x75
 8009a76:	2194      	movs	r1, #148	@ 0x94
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f001 ff37 	bl	800b8ec <VL53L0X_WrByte>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	461a      	mov	r2, r3
 8009a82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a86:	4313      	orrs	r3, r2
 8009a88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7ff fc33 	bl	80092f8 <VL53L0X_device_read_strobe>
 8009a92:	4603      	mov	r3, r0
 8009a94:	461a      	mov	r2, r3
 8009a96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009aa0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	2190      	movs	r1, #144	@ 0x90
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f002 f801 	bl	800bab0 <VL53L0X_RdDWord>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8009abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009abe:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8009ac4:	2276      	movs	r2, #118	@ 0x76
 8009ac6:	2194      	movs	r1, #148	@ 0x94
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f001 ff0f 	bl	800b8ec <VL53L0X_WrByte>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f7ff fc0b 	bl	80092f8 <VL53L0X_device_read_strobe>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009aea:	4313      	orrs	r3, r2
 8009aec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009af0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009af4:	461a      	mov	r2, r3
 8009af6:	2190      	movs	r1, #144	@ 0x90
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f001 ffd9 	bl	800bab0 <VL53L0X_RdDWord>
 8009afe:	4603      	mov	r3, r0
 8009b00:	461a      	mov	r2, r3
 8009b02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b06:	4313      	orrs	r3, r2
 8009b08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8009b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0e:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8009b10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b12:	4313      	orrs	r3, r2
 8009b14:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8009b16:	2200      	movs	r2, #0
 8009b18:	2181      	movs	r1, #129	@ 0x81
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f001 fee6 	bl	800b8ec <VL53L0X_WrByte>
 8009b20:	4603      	mov	r3, r0
 8009b22:	461a      	mov	r2, r3
 8009b24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009b2e:	2206      	movs	r2, #6
 8009b30:	21ff      	movs	r1, #255	@ 0xff
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f001 feda 	bl	800b8ec <VL53L0X_WrByte>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b40:	4313      	orrs	r3, r2
 8009b42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009b46:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	2183      	movs	r1, #131	@ 0x83
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f001 ff4e 	bl	800b9f0 <VL53L0X_RdByte>
 8009b54:	4603      	mov	r3, r0
 8009b56:	461a      	mov	r2, r3
 8009b58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8009b62:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b66:	f023 0304 	bic.w	r3, r3, #4
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	2183      	movs	r1, #131	@ 0x83
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f001 febb 	bl	800b8ec <VL53L0X_WrByte>
 8009b76:	4603      	mov	r3, r0
 8009b78:	461a      	mov	r2, r3
 8009b7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009b84:	2201      	movs	r2, #1
 8009b86:	21ff      	movs	r1, #255	@ 0xff
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f001 feaf 	bl	800b8ec <VL53L0X_WrByte>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	461a      	mov	r2, r3
 8009b92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b96:	4313      	orrs	r3, r2
 8009b98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f001 fea3 	bl	800b8ec <VL53L0X_WrByte>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	461a      	mov	r2, r3
 8009baa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	21ff      	movs	r1, #255	@ 0xff
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f001 fe97 	bl	800b8ec <VL53L0X_WrByte>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009bcc:	2200      	movs	r2, #0
 8009bce:	2180      	movs	r1, #128	@ 0x80
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f001 fe8b 	bl	800b8ec <VL53L0X_WrByte>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	461a      	mov	r2, r3
 8009bda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009bde:	4313      	orrs	r3, r2
 8009be0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009be4:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f040 808f 	bne.w	8009d0c <VL53L0X_get_info_from_device+0x98e>
 8009bee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009bf2:	2b07      	cmp	r3, #7
 8009bf4:	f000 808a 	beq.w	8009d0c <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8009bf8:	78fb      	ldrb	r3, [r7, #3]
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d024      	beq.n	8009c4c <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009c02:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009c06:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d11e      	bne.n	8009c4c <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 8009c14:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8009c1e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009c22:	2300      	movs	r3, #0
 8009c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c26:	e00e      	b.n	8009c46 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8009c28:	f107 0208 	add.w	r2, r7, #8
 8009c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c2e:	4413      	add	r3, r2
 8009c30:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 8009c3c:	460a      	mov	r2, r1
 8009c3e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c42:	3301      	adds	r3, #1
 8009c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c48:	2b05      	cmp	r3, #5
 8009c4a:	dded      	ble.n	8009c28 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8009c4c:	78fb      	ldrb	r3, [r7, #3]
 8009c4e:	f003 0302 	and.w	r3, r3, #2
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d018      	beq.n	8009c88 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009c56:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009c5a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d112      	bne.n	8009c88 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009c62:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009c6c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	33f3      	adds	r3, #243	@ 0xf3
 8009c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8009c7c:	f107 0310 	add.w	r3, r7, #16
 8009c80:	4619      	mov	r1, r3
 8009c82:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009c84:	f001 ffb4 	bl	800bbf0 <strcpy>

		}

		if (((option & 4) == 4) &&
 8009c88:	78fb      	ldrb	r3, [r7, #3]
 8009c8a:	f003 0304 	and.w	r3, r3, #4
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d030      	beq.n	8009cf4 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009c92:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009c96:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d12a      	bne.n	8009cf4 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009c9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8009cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cb0:	025b      	lsls	r3, r3, #9
 8009cb2:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009cb8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8009cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d011      	beq.n	8009cec <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8009cc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	64bb      	str	r3, [r7, #72]	@ 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8009cd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009cd6:	fb02 f303 	mul.w	r3, r2, r3
 8009cda:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8009cdc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
					OffsetMicroMeters *= -1;
 8009ce0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8009ce4:	425b      	negs	r3, r3
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 8009cec:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8009cf4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8009cf8:	78fb      	ldrb	r3, [r7, #3]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8009d02:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009d0c:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3760      	adds	r7, #96	@ 0x60
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	460b      	mov	r3, r1
 8009d22:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8009d24:	f240 6277 	movw	r2, #1655	@ 0x677
 8009d28:	f04f 0300 	mov.w	r3, #0
 8009d2c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8009d30:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8009d34:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8009d36:	78fb      	ldrb	r3, [r7, #3]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	fb02 f303 	mul.w	r3, r2, r3
 8009d44:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8009d46:	68bb      	ldr	r3, [r7, #8]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	371c      	adds	r7, #28
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b087      	sub	sp, #28
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009d60:	2300      	movs	r3, #0
 8009d62:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009d64:	2300      	movs	r3, #0
 8009d66:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d015      	beq.n	8009d9a <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	3b01      	subs	r3, #1
 8009d72:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009d74:	e005      	b.n	8009d82 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	085b      	lsrs	r3, r3, #1
 8009d7a:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009d7c:	89fb      	ldrh	r3, [r7, #14]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	2bff      	cmp	r3, #255	@ 0xff
 8009d86:	d8f6      	bhi.n	8009d76 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8009d88:	89fb      	ldrh	r3, [r7, #14]
 8009d8a:	021b      	lsls	r3, r3, #8
 8009d8c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8009d96:	4413      	add	r3, r2
 8009d98:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8009d9a:	8afb      	ldrh	r3, [r7, #22]

}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	371c      	adds	r7, #28
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	4603      	mov	r3, r0
 8009db0:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8009db2:	2300      	movs	r3, #0
 8009db4:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009db6:	88fb      	ldrh	r3, [r7, #6]
 8009db8:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8009dba:	88fa      	ldrh	r2, [r7, #6]
 8009dbc:	0a12      	lsrs	r2, r2, #8
 8009dbe:	b292      	uxth	r2, r2
 8009dc0:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b088      	sub	sp, #32
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	4613      	mov	r3, r2
 8009de0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8009de2:	2300      	movs	r3, #0
 8009de4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009de6:	79fb      	ldrb	r3, [r7, #7]
 8009de8:	4619      	mov	r1, r3
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f7ff ff94 	bl	8009d18 <VL53L0X_calc_macro_period_ps>
 8009df0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8009df8:	4a0a      	ldr	r2, [pc, #40]	@ (8009e24 <VL53L0X_calc_timeout_mclks+0x50>)
 8009dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8009dfe:	099b      	lsrs	r3, r3, #6
 8009e00:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009e08:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	085b      	lsrs	r3, r3, #1
 8009e10:	441a      	add	r2, r3
	timeout_period_mclks =
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e18:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8009e1a:	69fb      	ldr	r3, [r7, #28]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3720      	adds	r7, #32
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	10624dd3 	.word	0x10624dd3

08009e28 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	460b      	mov	r3, r1
 8009e32:	807b      	strh	r3, [r7, #2]
 8009e34:	4613      	mov	r3, r2
 8009e36:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009e3c:	787b      	ldrb	r3, [r7, #1]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7ff ff69 	bl	8009d18 <VL53L0X_calc_macro_period_ps>
 8009e46:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8009e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8009e78 <VL53L0X_calc_timeout_us+0x50>)
 8009e50:	fba2 2303 	umull	r2, r3, r2, r3
 8009e54:	099b      	lsrs	r3, r3, #6
 8009e56:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8009e58:	887b      	ldrh	r3, [r7, #2]
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	fb02 f303 	mul.w	r3, r2, r3
 8009e60:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
	actual_timeout_period_us =
 8009e64:	4a04      	ldr	r2, [pc, #16]	@ (8009e78 <VL53L0X_calc_timeout_us+0x50>)
 8009e66:	fba2 2303 	umull	r2, r3, r2, r3
 8009e6a:	099b      	lsrs	r3, r3, #6
 8009e6c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8009e6e:	697b      	ldr	r3, [r7, #20]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3718      	adds	r7, #24
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	10624dd3 	.word	0x10624dd3

08009e7c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b08c      	sub	sp, #48	@ 0x30
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	460b      	mov	r3, r1
 8009e86:	607a      	str	r2, [r7, #4]
 8009e88:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8009e96:	2300      	movs	r3, #0
 8009e98:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009ea2:	7afb      	ldrb	r3, [r7, #11]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d005      	beq.n	8009eb4 <get_sequence_step_timeout+0x38>
 8009ea8:	7afb      	ldrb	r3, [r7, #11]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d002      	beq.n	8009eb4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009eae:	7afb      	ldrb	r3, [r7, #11]
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d127      	bne.n	8009f04 <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009eb4:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8009eb8:	461a      	mov	r2, r3
 8009eba:	2100      	movs	r1, #0
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	f7fd fa8d 	bl	80073dc <VL53L0X_GetVcselPulsePeriod>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8009ec8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d109      	bne.n	8009ee4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8009ed0:	f107 0320 	add.w	r3, r7, #32
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	2146      	movs	r1, #70	@ 0x46
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f001 fd89 	bl	800b9f0 <VL53L0X_RdByte>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8009ee4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7ff ff5d 	bl	8009da8 <VL53L0X_decode_timeout>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009ef2:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8009ef6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009ef8:	4619      	mov	r1, r3
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f7ff ff94 	bl	8009e28 <VL53L0X_calc_timeout_us>
 8009f00:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009f02:	e092      	b.n	800a02a <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009f04:	7afb      	ldrb	r3, [r7, #11]
 8009f06:	2b03      	cmp	r3, #3
 8009f08:	d135      	bne.n	8009f76 <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009f0a:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8009f0e:	461a      	mov	r2, r3
 8009f10:	2100      	movs	r1, #0
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f7fd fa62 	bl	80073dc <VL53L0X_GetVcselPulsePeriod>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009f1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f040 8081 	bne.w	800a02a <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009f28:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	2100      	movs	r1, #0
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f7fd fa53 	bl	80073dc <VL53L0X_GetVcselPulsePeriod>
 8009f36:	4603      	mov	r3, r0
 8009f38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8009f3c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d109      	bne.n	8009f58 <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 8009f44:	f107 031e 	add.w	r3, r7, #30
 8009f48:	461a      	mov	r2, r3
 8009f4a:	2151      	movs	r1, #81	@ 0x51
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f001 fd79 	bl	800ba44 <VL53L0X_RdWord>
 8009f52:	4603      	mov	r3, r0
 8009f54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009f58:	8bfb      	ldrh	r3, [r7, #30]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7ff ff24 	bl	8009da8 <VL53L0X_decode_timeout>
 8009f60:	4603      	mov	r3, r0
 8009f62:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009f64:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8009f68:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f7ff ff5b 	bl	8009e28 <VL53L0X_calc_timeout_us>
 8009f72:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009f74:	e059      	b.n	800a02a <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009f76:	7afb      	ldrb	r3, [r7, #11]
 8009f78:	2b04      	cmp	r3, #4
 8009f7a:	d156      	bne.n	800a02a <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009f7c:	f107 0314 	add.w	r3, r7, #20
 8009f80:	4619      	mov	r1, r3
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f7fd fb34 	bl	80075f0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8009f8c:	7dfb      	ldrb	r3, [r7, #23]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d01d      	beq.n	8009fce <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009f92:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8009f96:	461a      	mov	r2, r3
 8009f98:	2100      	movs	r1, #0
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f7fd fa1e 	bl	80073dc <VL53L0X_GetVcselPulsePeriod>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8009fa6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10f      	bne.n	8009fce <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 8009fae:	f107 031e 	add.w	r3, r7, #30
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	2151      	movs	r1, #81	@ 0x51
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f001 fd44 	bl	800ba44 <VL53L0X_RdWord>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009fc2:	8bfb      	ldrh	r3, [r7, #30]
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7ff feef 	bl	8009da8 <VL53L0X_decode_timeout>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009fce:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d109      	bne.n	8009fea <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009fd6:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8009fda:	461a      	mov	r2, r3
 8009fdc:	2101      	movs	r1, #1
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7fd f9fc 	bl	80073dc <VL53L0X_GetVcselPulsePeriod>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009fea:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10f      	bne.n	800a012 <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 8009ff2:	f107 031c 	add.w	r3, r7, #28
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	2171      	movs	r1, #113	@ 0x71
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f001 fd22 	bl	800ba44 <VL53L0X_RdWord>
 800a000:	4603      	mov	r3, r0
 800a002:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a006:	8bbb      	ldrh	r3, [r7, #28]
 800a008:	4618      	mov	r0, r3
 800a00a:	f7ff fecd 	bl	8009da8 <VL53L0X_decode_timeout>
 800a00e:	4603      	mov	r3, r0
 800a010:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800a012:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a014:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a016:	1ad3      	subs	r3, r2, r3
 800a018:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a01a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800a01e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a020:	4619      	mov	r1, r3
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f7ff ff00 	bl	8009e28 <VL53L0X_calc_timeout_us>
 800a028:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a02e:	601a      	str	r2, [r3, #0]

	return Status;
 800a030:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800a034:	4618      	mov	r0, r3
 800a036:	3730      	adds	r7, #48	@ 0x30
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08a      	sub	sp, #40	@ 0x28
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	460b      	mov	r3, r1
 800a046:	607a      	str	r2, [r7, #4]
 800a048:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a04a:	2300      	movs	r3, #0
 800a04c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a050:	7afb      	ldrb	r3, [r7, #11]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d005      	beq.n	800a062 <set_sequence_step_timeout+0x26>
 800a056:	7afb      	ldrb	r3, [r7, #11]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d002      	beq.n	800a062 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a05c:	7afb      	ldrb	r3, [r7, #11]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d138      	bne.n	800a0d4 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a062:	f107 031b 	add.w	r3, r7, #27
 800a066:	461a      	mov	r2, r3
 800a068:	2100      	movs	r1, #0
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f7fd f9b6 	bl	80073dc <VL53L0X_GetVcselPulsePeriod>
 800a070:	4603      	mov	r3, r0
 800a072:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800a076:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d11a      	bne.n	800a0b4 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800a07e:	7efb      	ldrb	r3, [r7, #27]
 800a080:	461a      	mov	r2, r3
 800a082:	6879      	ldr	r1, [r7, #4]
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f7ff fea5 	bl	8009dd4 <VL53L0X_calc_timeout_mclks>
 800a08a:	4603      	mov	r3, r0
 800a08c:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800a08e:	8bbb      	ldrh	r3, [r7, #28]
 800a090:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a094:	d903      	bls.n	800a09e <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800a096:	23ff      	movs	r3, #255	@ 0xff
 800a098:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a09c:	e004      	b.n	800a0a8 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800a09e:	8bbb      	ldrh	r3, [r7, #28]
 800a0a0:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a0a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a0b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f040 80ab 	bne.w	800a214 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800a0be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	2146      	movs	r1, #70	@ 0x46
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f001 fc10 	bl	800b8ec <VL53L0X_WrByte>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800a0d2:	e09f      	b.n	800a214 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a0d4:	7afb      	ldrb	r3, [r7, #11]
 800a0d6:	2b03      	cmp	r3, #3
 800a0d8:	d135      	bne.n	800a146 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800a0da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d11b      	bne.n	800a11a <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a0e2:	f107 031b 	add.w	r3, r7, #27
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f7fd f976 	bl	80073dc <VL53L0X_GetVcselPulsePeriod>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a0f6:	7efb      	ldrb	r3, [r7, #27]
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	6879      	ldr	r1, [r7, #4]
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f7ff fe69 	bl	8009dd4 <VL53L0X_calc_timeout_mclks>
 800a102:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800a104:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800a106:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a108:	4618      	mov	r0, r3
 800a10a:	f7ff fe23 	bl	8009d54 <VL53L0X_encode_timeout>
 800a10e:	4603      	mov	r3, r0
 800a110:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a112:	8b3a      	ldrh	r2, [r7, #24]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a11a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d108      	bne.n	800a134 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800a122:	8b3b      	ldrh	r3, [r7, #24]
 800a124:	461a      	mov	r2, r3
 800a126:	2151      	movs	r1, #81	@ 0x51
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f001 fc03 	bl	800b934 <VL53L0X_WrWord>
 800a12e:	4603      	mov	r3, r0
 800a130:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a134:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d16b      	bne.n	800a214 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800a144:	e066      	b.n	800a214 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a146:	7afb      	ldrb	r3, [r7, #11]
 800a148:	2b04      	cmp	r3, #4
 800a14a:	d160      	bne.n	800a20e <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800a14c:	f107 0310 	add.w	r3, r7, #16
 800a150:	4619      	mov	r1, r3
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f7fd fa4c 	bl	80075f0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800a158:	2300      	movs	r3, #0
 800a15a:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800a15c:	7cfb      	ldrb	r3, [r7, #19]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d01d      	beq.n	800a19e <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a162:	f107 031b 	add.w	r3, r7, #27
 800a166:	461a      	mov	r2, r3
 800a168:	2100      	movs	r1, #0
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f7fd f936 	bl	80073dc <VL53L0X_GetVcselPulsePeriod>
 800a170:	4603      	mov	r3, r0
 800a172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800a176:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10f      	bne.n	800a19e <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800a17e:	f107 0318 	add.w	r3, r7, #24
 800a182:	461a      	mov	r2, r3
 800a184:	2151      	movs	r1, #81	@ 0x51
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f001 fc5c 	bl	800ba44 <VL53L0X_RdWord>
 800a18c:	4603      	mov	r3, r0
 800a18e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800a192:	8b3b      	ldrh	r3, [r7, #24]
 800a194:	4618      	mov	r0, r3
 800a196:	f7ff fe07 	bl	8009da8 <VL53L0X_decode_timeout>
 800a19a:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800a19c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a19e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d109      	bne.n	800a1ba <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a1a6:	f107 031b 	add.w	r3, r7, #27
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f7fd f914 	bl	80073dc <VL53L0X_GetVcselPulsePeriod>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a1ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d128      	bne.n	800a214 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a1c2:	7efb      	ldrb	r3, [r7, #27]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	6879      	ldr	r1, [r7, #4]
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f7ff fe03 	bl	8009dd4 <VL53L0X_calc_timeout_mclks>
 800a1ce:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800a1d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a1d2:	6a3a      	ldr	r2, [r7, #32]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800a1d8:	6a38      	ldr	r0, [r7, #32]
 800a1da:	f7ff fdbb 	bl	8009d54 <VL53L0X_encode_timeout>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800a1e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d108      	bne.n	800a1fc <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800a1ea:	8bfb      	ldrh	r3, [r7, #30]
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	2171      	movs	r1, #113	@ 0x71
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f001 fb9f 	bl	800b934 <VL53L0X_WrWord>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800a1fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a200:	2b00      	cmp	r3, #0
 800a202:	d107      	bne.n	800a214 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 800a20c:	e002      	b.n	800a214 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a20e:	23fc      	movs	r3, #252	@ 0xfc
 800a210:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 800a214:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3728      	adds	r7, #40	@ 0x28
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b08a      	sub	sp, #40	@ 0x28
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	460b      	mov	r3, r1
 800a22a:	70fb      	strb	r3, [r7, #3]
 800a22c:	4613      	mov	r3, r2
 800a22e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a230:	2300      	movs	r3, #0
 800a232:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800a236:	230c      	movs	r3, #12
 800a238:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800a23c:	2312      	movs	r3, #18
 800a23e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800a242:	2308      	movs	r3, #8
 800a244:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800a248:	230e      	movs	r3, #14
 800a24a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800a24e:	2300      	movs	r3, #0
 800a250:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800a252:	78bb      	ldrb	r3, [r7, #2]
 800a254:	f003 0301 	and.w	r3, r3, #1
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d003      	beq.n	800a266 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a25e:	23fc      	movs	r3, #252	@ 0xfc
 800a260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a264:	e020      	b.n	800a2a8 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800a266:	78fb      	ldrb	r3, [r7, #3]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10d      	bne.n	800a288 <VL53L0X_set_vcsel_pulse_period+0x68>
 800a26c:	78ba      	ldrb	r2, [r7, #2]
 800a26e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a272:	429a      	cmp	r2, r3
 800a274:	d304      	bcc.n	800a280 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800a276:	78ba      	ldrb	r2, [r7, #2]
 800a278:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d903      	bls.n	800a288 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a280:	23fc      	movs	r3, #252	@ 0xfc
 800a282:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a286:	e00f      	b.n	800a2a8 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d10c      	bne.n	800a2a8 <VL53L0X_set_vcsel_pulse_period+0x88>
 800a28e:	78ba      	ldrb	r2, [r7, #2]
 800a290:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a294:	429a      	cmp	r2, r3
 800a296:	d304      	bcc.n	800a2a2 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800a298:	78ba      	ldrb	r2, [r7, #2]
 800a29a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d902      	bls.n	800a2a8 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a2a2:	23fc      	movs	r3, #252	@ 0xfc
 800a2a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800a2a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d002      	beq.n	800a2b6 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800a2b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a2b4:	e237      	b.n	800a726 <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800a2b6:	78fb      	ldrb	r3, [r7, #3]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d150      	bne.n	800a35e <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800a2bc:	78bb      	ldrb	r3, [r7, #2]
 800a2be:	2b0c      	cmp	r3, #12
 800a2c0:	d110      	bne.n	800a2e4 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800a2c2:	2218      	movs	r2, #24
 800a2c4:	2157      	movs	r1, #87	@ 0x57
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f001 fb10 	bl	800b8ec <VL53L0X_WrByte>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800a2d2:	2208      	movs	r2, #8
 800a2d4:	2156      	movs	r1, #86	@ 0x56
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f001 fb08 	bl	800b8ec <VL53L0X_WrByte>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a2e2:	e17f      	b.n	800a5e4 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a2e4:	78bb      	ldrb	r3, [r7, #2]
 800a2e6:	2b0e      	cmp	r3, #14
 800a2e8:	d110      	bne.n	800a30c <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800a2ea:	2230      	movs	r2, #48	@ 0x30
 800a2ec:	2157      	movs	r1, #87	@ 0x57
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f001 fafc 	bl	800b8ec <VL53L0X_WrByte>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800a2fa:	2208      	movs	r2, #8
 800a2fc:	2156      	movs	r1, #86	@ 0x56
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f001 faf4 	bl	800b8ec <VL53L0X_WrByte>
 800a304:	4603      	mov	r3, r0
 800a306:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a30a:	e16b      	b.n	800a5e4 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800a30c:	78bb      	ldrb	r3, [r7, #2]
 800a30e:	2b10      	cmp	r3, #16
 800a310:	d110      	bne.n	800a334 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800a312:	2240      	movs	r2, #64	@ 0x40
 800a314:	2157      	movs	r1, #87	@ 0x57
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f001 fae8 	bl	800b8ec <VL53L0X_WrByte>
 800a31c:	4603      	mov	r3, r0
 800a31e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800a322:	2208      	movs	r2, #8
 800a324:	2156      	movs	r1, #86	@ 0x56
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f001 fae0 	bl	800b8ec <VL53L0X_WrByte>
 800a32c:	4603      	mov	r3, r0
 800a32e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a332:	e157      	b.n	800a5e4 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800a334:	78bb      	ldrb	r3, [r7, #2]
 800a336:	2b12      	cmp	r3, #18
 800a338:	f040 8154 	bne.w	800a5e4 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a33c:	2250      	movs	r2, #80	@ 0x50
 800a33e:	2157      	movs	r1, #87	@ 0x57
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f001 fad3 	bl	800b8ec <VL53L0X_WrByte>
 800a346:	4603      	mov	r3, r0
 800a348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800a34c:	2208      	movs	r2, #8
 800a34e:	2156      	movs	r1, #86	@ 0x56
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f001 facb 	bl	800b8ec <VL53L0X_WrByte>
 800a356:	4603      	mov	r3, r0
 800a358:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a35c:	e142      	b.n	800a5e4 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800a35e:	78fb      	ldrb	r3, [r7, #3]
 800a360:	2b01      	cmp	r3, #1
 800a362:	f040 813f 	bne.w	800a5e4 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800a366:	78bb      	ldrb	r3, [r7, #2]
 800a368:	2b08      	cmp	r3, #8
 800a36a:	d14c      	bne.n	800a406 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800a36c:	2210      	movs	r2, #16
 800a36e:	2148      	movs	r1, #72	@ 0x48
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f001 fabb 	bl	800b8ec <VL53L0X_WrByte>
 800a376:	4603      	mov	r3, r0
 800a378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800a37c:	2208      	movs	r2, #8
 800a37e:	2147      	movs	r1, #71	@ 0x47
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f001 fab3 	bl	800b8ec <VL53L0X_WrByte>
 800a386:	4603      	mov	r3, r0
 800a388:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a38c:	2202      	movs	r2, #2
 800a38e:	2132      	movs	r1, #50	@ 0x32
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f001 faab 	bl	800b8ec <VL53L0X_WrByte>
 800a396:	4603      	mov	r3, r0
 800a398:	461a      	mov	r2, r3
 800a39a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800a3a4:	220c      	movs	r2, #12
 800a3a6:	2130      	movs	r1, #48	@ 0x30
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f001 fa9f 	bl	800b8ec <VL53L0X_WrByte>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a3bc:	2201      	movs	r2, #1
 800a3be:	21ff      	movs	r1, #255	@ 0xff
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f001 fa93 	bl	800b8ec <VL53L0X_WrByte>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a3d4:	2230      	movs	r2, #48	@ 0x30
 800a3d6:	2130      	movs	r1, #48	@ 0x30
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f001 fa87 	bl	800b8ec <VL53L0X_WrByte>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	21ff      	movs	r1, #255	@ 0xff
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f001 fa7b 	bl	800b8ec <VL53L0X_WrByte>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3fe:	4313      	orrs	r3, r2
 800a400:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a404:	e0ee      	b.n	800a5e4 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800a406:	78bb      	ldrb	r3, [r7, #2]
 800a408:	2b0a      	cmp	r3, #10
 800a40a:	d14c      	bne.n	800a4a6 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800a40c:	2228      	movs	r2, #40	@ 0x28
 800a40e:	2148      	movs	r1, #72	@ 0x48
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f001 fa6b 	bl	800b8ec <VL53L0X_WrByte>
 800a416:	4603      	mov	r3, r0
 800a418:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800a41c:	2208      	movs	r2, #8
 800a41e:	2147      	movs	r1, #71	@ 0x47
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f001 fa63 	bl	800b8ec <VL53L0X_WrByte>
 800a426:	4603      	mov	r3, r0
 800a428:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a42c:	2203      	movs	r2, #3
 800a42e:	2132      	movs	r1, #50	@ 0x32
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f001 fa5b 	bl	800b8ec <VL53L0X_WrByte>
 800a436:	4603      	mov	r3, r0
 800a438:	461a      	mov	r2, r3
 800a43a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a43e:	4313      	orrs	r3, r2
 800a440:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a444:	2209      	movs	r2, #9
 800a446:	2130      	movs	r1, #48	@ 0x30
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f001 fa4f 	bl	800b8ec <VL53L0X_WrByte>
 800a44e:	4603      	mov	r3, r0
 800a450:	461a      	mov	r2, r3
 800a452:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a456:	4313      	orrs	r3, r2
 800a458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a45c:	2201      	movs	r2, #1
 800a45e:	21ff      	movs	r1, #255	@ 0xff
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f001 fa43 	bl	800b8ec <VL53L0X_WrByte>
 800a466:	4603      	mov	r3, r0
 800a468:	461a      	mov	r2, r3
 800a46a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a46e:	4313      	orrs	r3, r2
 800a470:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a474:	2220      	movs	r2, #32
 800a476:	2130      	movs	r1, #48	@ 0x30
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f001 fa37 	bl	800b8ec <VL53L0X_WrByte>
 800a47e:	4603      	mov	r3, r0
 800a480:	461a      	mov	r2, r3
 800a482:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a486:	4313      	orrs	r3, r2
 800a488:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a48c:	2200      	movs	r2, #0
 800a48e:	21ff      	movs	r1, #255	@ 0xff
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f001 fa2b 	bl	800b8ec <VL53L0X_WrByte>
 800a496:	4603      	mov	r3, r0
 800a498:	461a      	mov	r2, r3
 800a49a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a4a4:	e09e      	b.n	800a5e4 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800a4a6:	78bb      	ldrb	r3, [r7, #2]
 800a4a8:	2b0c      	cmp	r3, #12
 800a4aa:	d14c      	bne.n	800a546 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800a4ac:	2238      	movs	r2, #56	@ 0x38
 800a4ae:	2148      	movs	r1, #72	@ 0x48
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f001 fa1b 	bl	800b8ec <VL53L0X_WrByte>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800a4bc:	2208      	movs	r2, #8
 800a4be:	2147      	movs	r1, #71	@ 0x47
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f001 fa13 	bl	800b8ec <VL53L0X_WrByte>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a4cc:	2203      	movs	r2, #3
 800a4ce:	2132      	movs	r1, #50	@ 0x32
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f001 fa0b 	bl	800b8ec <VL53L0X_WrByte>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	461a      	mov	r2, r3
 800a4da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a4e4:	2208      	movs	r2, #8
 800a4e6:	2130      	movs	r1, #48	@ 0x30
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f001 f9ff 	bl	800b8ec <VL53L0X_WrByte>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	21ff      	movs	r1, #255	@ 0xff
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f001 f9f3 	bl	800b8ec <VL53L0X_WrByte>
 800a506:	4603      	mov	r3, r0
 800a508:	461a      	mov	r2, r3
 800a50a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a50e:	4313      	orrs	r3, r2
 800a510:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a514:	2220      	movs	r2, #32
 800a516:	2130      	movs	r1, #48	@ 0x30
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f001 f9e7 	bl	800b8ec <VL53L0X_WrByte>
 800a51e:	4603      	mov	r3, r0
 800a520:	461a      	mov	r2, r3
 800a522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a526:	4313      	orrs	r3, r2
 800a528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a52c:	2200      	movs	r2, #0
 800a52e:	21ff      	movs	r1, #255	@ 0xff
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f001 f9db 	bl	800b8ec <VL53L0X_WrByte>
 800a536:	4603      	mov	r3, r0
 800a538:	461a      	mov	r2, r3
 800a53a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a53e:	4313      	orrs	r3, r2
 800a540:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a544:	e04e      	b.n	800a5e4 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a546:	78bb      	ldrb	r3, [r7, #2]
 800a548:	2b0e      	cmp	r3, #14
 800a54a:	d14b      	bne.n	800a5e4 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a54c:	2248      	movs	r2, #72	@ 0x48
 800a54e:	2148      	movs	r1, #72	@ 0x48
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f001 f9cb 	bl	800b8ec <VL53L0X_WrByte>
 800a556:	4603      	mov	r3, r0
 800a558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800a55c:	2208      	movs	r2, #8
 800a55e:	2147      	movs	r1, #71	@ 0x47
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f001 f9c3 	bl	800b8ec <VL53L0X_WrByte>
 800a566:	4603      	mov	r3, r0
 800a568:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a56c:	2203      	movs	r2, #3
 800a56e:	2132      	movs	r1, #50	@ 0x32
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f001 f9bb 	bl	800b8ec <VL53L0X_WrByte>
 800a576:	4603      	mov	r3, r0
 800a578:	461a      	mov	r2, r3
 800a57a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a57e:	4313      	orrs	r3, r2
 800a580:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a584:	2207      	movs	r2, #7
 800a586:	2130      	movs	r1, #48	@ 0x30
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f001 f9af 	bl	800b8ec <VL53L0X_WrByte>
 800a58e:	4603      	mov	r3, r0
 800a590:	461a      	mov	r2, r3
 800a592:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a596:	4313      	orrs	r3, r2
 800a598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a59c:	2201      	movs	r2, #1
 800a59e:	21ff      	movs	r1, #255	@ 0xff
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f001 f9a3 	bl	800b8ec <VL53L0X_WrByte>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a5b4:	2220      	movs	r2, #32
 800a5b6:	2130      	movs	r1, #48	@ 0x30
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f001 f997 	bl	800b8ec <VL53L0X_WrByte>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	21ff      	movs	r1, #255	@ 0xff
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f001 f98b 	bl	800b8ec <VL53L0X_WrByte>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	461a      	mov	r2, r3
 800a5da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800a5e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d17e      	bne.n	800a6ea <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800a5ec:	78bb      	ldrb	r3, [r7, #2]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fe fe3b 	bl	800926a <VL53L0X_encode_vcsel_period>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800a5fa:	78fb      	ldrb	r3, [r7, #3]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d002      	beq.n	800a606 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800a600:	2b01      	cmp	r3, #1
 800a602:	d045      	beq.n	800a690 <VL53L0X_set_vcsel_pulse_period+0x470>
 800a604:	e06e      	b.n	800a6e4 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a606:	f107 0314 	add.w	r3, r7, #20
 800a60a:	461a      	mov	r2, r3
 800a60c:	2103      	movs	r1, #3
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f7ff fc34 	bl	8009e7c <get_sequence_step_timeout>
 800a614:	4603      	mov	r3, r0
 800a616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a61a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d109      	bne.n	800a636 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800a622:	f107 0310 	add.w	r3, r7, #16
 800a626:	461a      	mov	r2, r3
 800a628:	2102      	movs	r1, #2
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f7ff fc26 	bl	8009e7c <get_sequence_step_timeout>
 800a630:	4603      	mov	r3, r0
 800a632:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a636:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d109      	bne.n	800a652 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800a63e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a642:	461a      	mov	r2, r3
 800a644:	2150      	movs	r1, #80	@ 0x50
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f001 f950 	bl	800b8ec <VL53L0X_WrByte>
 800a64c:	4603      	mov	r3, r0
 800a64e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a652:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a656:	2b00      	cmp	r3, #0
 800a658:	d108      	bne.n	800a66c <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	461a      	mov	r2, r3
 800a65e:	2103      	movs	r1, #3
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7ff fceb 	bl	800a03c <set_sequence_step_timeout>
 800a666:	4603      	mov	r3, r0
 800a668:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800a66c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a670:	2b00      	cmp	r3, #0
 800a672:	d108      	bne.n	800a686 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	461a      	mov	r2, r3
 800a678:	2102      	movs	r1, #2
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7ff fcde 	bl	800a03c <set_sequence_step_timeout>
 800a680:	4603      	mov	r3, r0
 800a682:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	78ba      	ldrb	r2, [r7, #2]
 800a68a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a68e:	e02c      	b.n	800a6ea <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a690:	f107 0318 	add.w	r3, r7, #24
 800a694:	461a      	mov	r2, r3
 800a696:	2104      	movs	r1, #4
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f7ff fbef 	bl	8009e7c <get_sequence_step_timeout>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a6a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d109      	bne.n	800a6c0 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800a6ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	2170      	movs	r1, #112	@ 0x70
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f001 f919 	bl	800b8ec <VL53L0X_WrByte>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a6c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d108      	bne.n	800a6da <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	2104      	movs	r1, #4
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f7ff fcb4 	bl	800a03c <set_sequence_step_timeout>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	78ba      	ldrb	r2, [r7, #2]
 800a6de:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a6e2:	e002      	b.n	800a6ea <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a6e4:	23fc      	movs	r3, #252	@ 0xfc
 800a6e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800a6ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d109      	bne.n	800a706 <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a6f8:	69f9      	ldr	r1, [r7, #28]
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f7fc fe30 	bl	8007360 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800a700:	4603      	mov	r3, r0
 800a702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800a706:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d109      	bne.n	800a722 <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 800a70e:	f107 010f 	add.w	r1, r7, #15
 800a712:	2301      	movs	r3, #1
 800a714:	2200      	movs	r2, #0
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7fe fcc2 	bl	80090a0 <VL53L0X_perform_phase_calibration>
 800a71c:	4603      	mov	r3, r0
 800a71e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800a722:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800a726:	4618      	mov	r0, r3
 800a728:	3728      	adds	r7, #40	@ 0x28
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b086      	sub	sp, #24
 800a732:	af00      	add	r7, sp, #0
 800a734:	60f8      	str	r0, [r7, #12]
 800a736:	460b      	mov	r3, r1
 800a738:	607a      	str	r2, [r7, #4]
 800a73a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a73c:	2300      	movs	r3, #0
 800a73e:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800a740:	7afb      	ldrb	r3, [r7, #11]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d002      	beq.n	800a74c <VL53L0X_get_vcsel_pulse_period+0x1e>
 800a746:	2b01      	cmp	r3, #1
 800a748:	d00a      	beq.n	800a760 <VL53L0X_get_vcsel_pulse_period+0x32>
 800a74a:	e013      	b.n	800a774 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a74c:	f107 0316 	add.w	r3, r7, #22
 800a750:	461a      	mov	r2, r3
 800a752:	2150      	movs	r1, #80	@ 0x50
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f001 f94b 	bl	800b9f0 <VL53L0X_RdByte>
 800a75a:	4603      	mov	r3, r0
 800a75c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a75e:	e00b      	b.n	800a778 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a760:	f107 0316 	add.w	r3, r7, #22
 800a764:	461a      	mov	r2, r3
 800a766:	2170      	movs	r1, #112	@ 0x70
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f001 f941 	bl	800b9f0 <VL53L0X_RdByte>
 800a76e:	4603      	mov	r3, r0
 800a770:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a772:	e001      	b.n	800a778 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a774:	23fc      	movs	r3, #252	@ 0xfc
 800a776:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a778:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d107      	bne.n	800a790 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800a780:	7dbb      	ldrb	r3, [r7, #22]
 800a782:	4618      	mov	r0, r3
 800a784:	f7fe fd5e 	bl	8009244 <VL53L0X_decode_vcsel_period>
 800a788:	4603      	mov	r3, r0
 800a78a:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	701a      	strb	r2, [r3, #0]

	return Status;
 800a790:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a794:	4618      	mov	r0, r3
 800a796:	3718      	adds	r7, #24
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b092      	sub	sp, #72	@ 0x48
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a7ac:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800a7b0:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a7b2:	f240 7376 	movw	r3, #1910	@ 0x776
 800a7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800a7b8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800a7bc:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a7be:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800a7c2:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800a7c4:	f240 234e 	movw	r3, #590	@ 0x24e
 800a7c8:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800a7ca:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800a7ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a7d0:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800a7d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a7d6:	f240 2326 	movw	r3, #550	@ 0x226
 800a7da:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800a7e0:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800a7e4:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	6a3b      	ldr	r3, [r7, #32]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d205      	bcs.n	800a7fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a7f2:	23fc      	movs	r3, #252	@ 0xfc
 800a7f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		return Status;
 800a7f8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800a7fc:	e0aa      	b.n	800a954 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800a7fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a802:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800a804:	683a      	ldr	r2, [r7, #0]
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	643b      	str	r3, [r7, #64]	@ 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a80a:	f107 0314 	add.w	r3, r7, #20
 800a80e:	4619      	mov	r1, r3
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7fc feed 	bl	80075f0 <VL53L0X_GetSequenceStepEnables>
 800a816:	4603      	mov	r3, r0
 800a818:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800a81c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800a820:	2b00      	cmp	r3, #0
 800a822:	d15b      	bne.n	800a8dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800a824:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800a826:	2b00      	cmp	r3, #0
 800a828:	d105      	bne.n	800a836 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800a82a:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d102      	bne.n	800a836 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800a830:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800a832:	2b00      	cmp	r3, #0
 800a834:	d052      	beq.n	800a8dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800a836:	f107 0310 	add.w	r3, r7, #16
 800a83a:	461a      	mov	r2, r3
 800a83c:	2102      	movs	r1, #2
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f7ff fb1c 	bl	8009e7c <get_sequence_step_timeout>
 800a844:	4603      	mov	r3, r0
 800a846:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800a84a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d002      	beq.n	800a858 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800a852:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800a856:	e07d      	b.n	800a954 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800a858:	7d3b      	ldrb	r3, [r7, #20]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00f      	beq.n	800a87e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800a85e:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800a860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a862:	4413      	add	r3, r2
 800a864:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800a866:	69fa      	ldr	r2, [r7, #28]
 800a868:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d204      	bcs.n	800a878 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800a86e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	643b      	str	r3, [r7, #64]	@ 0x40
 800a876:	e002      	b.n	800a87e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a878:	23fc      	movs	r3, #252	@ 0xfc
 800a87a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800a87e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800a882:	2b00      	cmp	r3, #0
 800a884:	d002      	beq.n	800a88c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800a886:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800a88a:	e063      	b.n	800a954 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800a88c:	7dbb      	ldrb	r3, [r7, #22]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d011      	beq.n	800a8b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800a892:	693a      	ldr	r2, [r7, #16]
 800a894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a896:	4413      	add	r3, r2
 800a898:	005b      	lsls	r3, r3, #1
 800a89a:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a89c:	69fa      	ldr	r2, [r7, #28]
 800a89e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d204      	bcs.n	800a8ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a8a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8ac:	e016      	b.n	800a8dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a8ae:	23fc      	movs	r3, #252	@ 0xfc
 800a8b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a8b4:	e012      	b.n	800a8dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800a8b6:	7d7b      	ldrb	r3, [r7, #21]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00f      	beq.n	800a8dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8c0:	4413      	add	r3, r2
 800a8c2:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a8c4:	69fa      	ldr	r2, [r7, #28]
 800a8c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d204      	bcs.n	800a8d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a8cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8d4:	e002      	b.n	800a8dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a8d6:	23fc      	movs	r3, #252	@ 0xfc
 800a8d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a8dc:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a8e4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800a8e8:	e034      	b.n	800a954 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800a8ea:	7dfb      	ldrb	r3, [r7, #23]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d019      	beq.n	800a924 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800a8f0:	f107 030c 	add.w	r3, r7, #12
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	2103      	movs	r1, #3
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f7ff fabf 	bl	8009e7c <get_sequence_step_timeout>
 800a8fe:	4603      	mov	r3, r0
 800a900:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a908:	4413      	add	r3, r2
 800a90a:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a90c:	69fa      	ldr	r2, [r7, #28]
 800a90e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a910:	429a      	cmp	r2, r3
 800a912:	d204      	bcs.n	800a91e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800a914:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a91c:	e002      	b.n	800a924 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a91e:	23fc      	movs	r3, #252	@ 0xfc
 800a920:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800a924:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d111      	bne.n	800a950 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800a92c:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00e      	beq.n	800a950 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800a932:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	643b      	str	r3, [r7, #64]	@ 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800a93a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a93c:	2104      	movs	r1, #4
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7ff fb7c 	bl	800a03c <set_sequence_step_timeout>
 800a944:	4603      	mov	r3, r0
 800a946:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a950:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800a954:	4618      	mov	r0, r3
 800a956:	3748      	adds	r7, #72	@ 0x48
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b090      	sub	sp, #64	@ 0x40
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a966:	2300      	movs	r3, #0
 800a968:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a96c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800a970:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a972:	f240 7376 	movw	r3, #1910	@ 0x776
 800a976:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800a978:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800a97c:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a97e:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800a982:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800a984:	f240 234e 	movw	r3, #590	@ 0x24e
 800a988:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800a98a:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800a98e:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a990:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800a994:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a996:	f240 2326 	movw	r3, #550	@ 0x226
 800a99a:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a99c:	2300      	movs	r3, #0
 800a99e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800a9a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9a4:	441a      	add	r2, r3
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a9aa:	f107 0318 	add.w	r3, r7, #24
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f7fc fe1d 	bl	80075f0 <VL53L0X_GetSequenceStepEnables>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800a9bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d002      	beq.n	800a9ca <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a9c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a9c8:	e075      	b.n	800aab6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800a9ca:	7e3b      	ldrb	r3, [r7, #24]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d105      	bne.n	800a9dc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800a9d0:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d102      	bne.n	800a9dc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800a9d6:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d030      	beq.n	800aa3e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800a9dc:	f107 0310 	add.w	r3, r7, #16
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	2102      	movs	r1, #2
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f7ff fa49 	bl	8009e7c <get_sequence_step_timeout>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800a9f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d122      	bne.n	800aa3e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800a9f8:	7e3b      	ldrb	r3, [r7, #24]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d007      	beq.n	800aa0e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800aa02:	6939      	ldr	r1, [r7, #16]
 800aa04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa06:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800aa08:	441a      	add	r2, r3
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800aa0e:	7ebb      	ldrb	r3, [r7, #26]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d009      	beq.n	800aa28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800aa18:	6939      	ldr	r1, [r7, #16]
 800aa1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa1c:	440b      	add	r3, r1
 800aa1e:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800aa20:	441a      	add	r2, r3
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	601a      	str	r2, [r3, #0]
 800aa26:	e00a      	b.n	800aa3e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800aa28:	7e7b      	ldrb	r3, [r7, #25]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d007      	beq.n	800aa3e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800aa32:	6939      	ldr	r1, [r7, #16]
 800aa34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa36:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800aa38:	441a      	add	r2, r3
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aa3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d114      	bne.n	800aa70 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800aa46:	7efb      	ldrb	r3, [r7, #27]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d011      	beq.n	800aa70 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800aa4c:	f107 030c 	add.w	r3, r7, #12
 800aa50:	461a      	mov	r2, r3
 800aa52:	2103      	movs	r1, #3
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f7ff fa11 	bl	8009e7c <get_sequence_step_timeout>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800aa64:	68f9      	ldr	r1, [r7, #12]
 800aa66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa68:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800aa6a:	441a      	add	r2, r3
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aa70:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d114      	bne.n	800aaa2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800aa78:	7f3b      	ldrb	r3, [r7, #28]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d011      	beq.n	800aaa2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800aa7e:	f107 0314 	add.w	r3, r7, #20
 800aa82:	461a      	mov	r2, r3
 800aa84:	2104      	movs	r1, #4
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7ff f9f8 	bl	8009e7c <get_sequence_step_timeout>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800aa96:	6979      	ldr	r1, [r7, #20]
 800aa98:	6a3b      	ldr	r3, [r7, #32]
 800aa9a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800aa9c:	441a      	add	r2, r3
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aaa2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d103      	bne.n	800aab2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aab2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3740      	adds	r7, #64	@ 0x40
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
	...

0800aac0 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b088      	sub	sp, #32
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aaca:	2300      	movs	r3, #0
 800aacc:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800aace:	2300      	movs	r3, #0
 800aad0:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800aad2:	e0c6      	b.n	800ac62 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	683a      	ldr	r2, [r7, #0]
 800aad8:	4413      	add	r3, r2
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	74fb      	strb	r3, [r7, #19]
		Index++;
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	3301      	adds	r3, #1
 800aae2:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800aae4:	7cfb      	ldrb	r3, [r7, #19]
 800aae6:	2bff      	cmp	r3, #255	@ 0xff
 800aae8:	f040 808d 	bne.w	800ac06 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	747b      	strb	r3, [r7, #17]
			Index++;
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800aafc:	7c7b      	ldrb	r3, [r7, #17]
 800aafe:	2b03      	cmp	r3, #3
 800ab00:	d87e      	bhi.n	800ac00 <VL53L0X_load_tuning_settings+0x140>
 800ab02:	a201      	add	r2, pc, #4	@ (adr r2, 800ab08 <VL53L0X_load_tuning_settings+0x48>)
 800ab04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab08:	0800ab19 	.word	0x0800ab19
 800ab0c:	0800ab53 	.word	0x0800ab53
 800ab10:	0800ab8d 	.word	0x0800ab8d
 800ab14:	0800abc7 	.word	0x0800abc7
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	743b      	strb	r3, [r7, #16]
				Index++;
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	3301      	adds	r3, #1
 800ab26:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	3301      	adds	r3, #1
 800ab36:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ab38:	7c3b      	ldrb	r3, [r7, #16]
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	021b      	lsls	r3, r3, #8
 800ab3e:	b29a      	uxth	r2, r3
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	4413      	add	r3, r2
 800ab46:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	89ba      	ldrh	r2, [r7, #12]
 800ab4c:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
				break;
 800ab50:	e087      	b.n	800ac62 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	683a      	ldr	r2, [r7, #0]
 800ab56:	4413      	add	r3, r2
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	743b      	strb	r3, [r7, #16]
				Index++;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	683a      	ldr	r2, [r7, #0]
 800ab66:	4413      	add	r3, r2
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ab72:	7c3b      	ldrb	r3, [r7, #16]
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	021b      	lsls	r3, r3, #8
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	7bfb      	ldrb	r3, [r7, #15]
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	4413      	add	r3, r2
 800ab80:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	89ba      	ldrh	r2, [r7, #12]
 800ab86:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
					Temp16);
				break;
 800ab8a:	e06a      	b.n	800ac62 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	4413      	add	r3, r2
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	743b      	strb	r3, [r7, #16]
				Index++;
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	4413      	add	r3, r2
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	3301      	adds	r3, #1
 800abaa:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800abac:	7c3b      	ldrb	r3, [r7, #16]
 800abae:	b29b      	uxth	r3, r3
 800abb0:	021b      	lsls	r3, r3, #8
 800abb2:	b29a      	uxth	r2, r3
 800abb4:	7bfb      	ldrb	r3, [r7, #15]
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	4413      	add	r3, r2
 800abba:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	89ba      	ldrh	r2, [r7, #12]
 800abc0:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
				break;
 800abc4:	e04d      	b.n	800ac62 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	683a      	ldr	r2, [r7, #0]
 800abca:	4413      	add	r3, r2
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	743b      	strb	r3, [r7, #16]
				Index++;
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	3301      	adds	r3, #1
 800abd4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	683a      	ldr	r2, [r7, #0]
 800abda:	4413      	add	r3, r2
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	73fb      	strb	r3, [r7, #15]
				Index++;
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	3301      	adds	r3, #1
 800abe4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800abe6:	7c3b      	ldrb	r3, [r7, #16]
 800abe8:	b29b      	uxth	r3, r3
 800abea:	021b      	lsls	r3, r3, #8
 800abec:	b29a      	uxth	r2, r3
 800abee:	7bfb      	ldrb	r3, [r7, #15]
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	4413      	add	r3, r2
 800abf4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	89ba      	ldrh	r2, [r7, #12]
 800abfa:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
				break;
 800abfe:	e030      	b.n	800ac62 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ac00:	23fc      	movs	r3, #252	@ 0xfc
 800ac02:	77fb      	strb	r3, [r7, #31]
 800ac04:	e02d      	b.n	800ac62 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800ac06:	7cfb      	ldrb	r3, [r7, #19]
 800ac08:	2b04      	cmp	r3, #4
 800ac0a:	d828      	bhi.n	800ac5e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	683a      	ldr	r2, [r7, #0]
 800ac10:	4413      	add	r3, r2
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	74bb      	strb	r3, [r7, #18]
			Index++;
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	61bb      	str	r3, [r7, #24]
 800ac20:	e00f      	b.n	800ac42 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	683a      	ldr	r2, [r7, #0]
 800ac26:	4413      	add	r3, r2
 800ac28:	7819      	ldrb	r1, [r3, #0]
 800ac2a:	f107 0208 	add.w	r2, r7, #8
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	4413      	add	r3, r2
 800ac32:	460a      	mov	r2, r1
 800ac34:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	61bb      	str	r3, [r7, #24]
 800ac42:	7cfb      	ldrb	r3, [r7, #19]
 800ac44:	69ba      	ldr	r2, [r7, #24]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	dbeb      	blt.n	800ac22 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800ac4a:	7cfb      	ldrb	r3, [r7, #19]
 800ac4c:	f107 0208 	add.w	r2, r7, #8
 800ac50:	7cb9      	ldrb	r1, [r7, #18]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fdee 	bl	800b834 <VL53L0X_WriteMulti>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	77fb      	strb	r3, [r7, #31]
 800ac5c:	e001      	b.n	800ac62 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ac5e:	23fc      	movs	r3, #252	@ 0xfc
 800ac60:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	4413      	add	r3, r2
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d004      	beq.n	800ac78 <VL53L0X_load_tuning_settings+0x1b8>
 800ac6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f43f af2e 	beq.w	800aad4 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ac78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3720      	adds	r7, #32
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b088      	sub	sp, #32
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac90:	2300      	movs	r3, #0
 800ac92:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800ac9a:	f107 0313 	add.w	r3, r7, #19
 800ac9e:	4619      	mov	r1, r3
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f7fc fd31 	bl	8007708 <VL53L0X_GetXTalkCompensationEnable>
 800aca6:	4603      	mov	r3, r0
 800aca8:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800acaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d111      	bne.n	800acd6 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800acb2:	7cfb      	ldrb	r3, [r7, #19]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00e      	beq.n	800acd6 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6a1b      	ldr	r3, [r3, #32]
 800acbc:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	8a9b      	ldrh	r3, [r3, #20]
 800acc2:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	fb02 f303 	mul.w	r3, r2, r3
 800acca:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	3380      	adds	r3, #128	@ 0x80
 800acd0:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800acd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3720      	adds	r7, #32
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b086      	sub	sp, #24
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	60f8      	str	r0, [r7, #12]
 800acea:	60b9      	str	r1, [r7, #8]
 800acec:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800acee:	2300      	movs	r3, #0
 800acf0:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800acfa:	f107 0310 	add.w	r3, r7, #16
 800acfe:	461a      	mov	r2, r3
 800ad00:	68b9      	ldr	r1, [r7, #8]
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	f7ff ffbe 	bl	800ac84 <VL53L0X_get_total_xtalk_rate>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800ad0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d105      	bne.n	800ad20 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	441a      	add	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	601a      	str	r2, [r3, #0]

	return Status;
 800ad20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3718      	adds	r7, #24
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b09a      	sub	sp, #104	@ 0x68
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
 800ad38:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800ad3a:	2312      	movs	r3, #18
 800ad3c:	657b      	str	r3, [r7, #84]	@ 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800ad3e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ad42:	653b      	str	r3, [r7, #80]	@ 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800ad44:	2342      	movs	r3, #66	@ 0x42
 800ad46:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800ad48:	2306      	movs	r3, #6
 800ad4a:	64bb      	str	r3, [r7, #72]	@ 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800ad4c:	2307      	movs	r3, #7
 800ad4e:	647b      	str	r3, [r7, #68]	@ 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad50:	2300      	movs	r3, #0
 800ad52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
	dmaxCalRange_mm =
 800ad5c:	63fb      	str	r3, [r7, #60]	@ 0x3c

	dmaxCalSignalRateRtn_mcps =
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800ad64:	63bb      	str	r3, [r7, #56]	@ 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800ad66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad6a:	fb02 f303 	mul.w	r3, r2, r3
 800ad6e:	637b      	str	r3, [r7, #52]	@ 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800ad70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad72:	3380      	adds	r3, #128	@ 0x80
 800ad74:	0a1b      	lsrs	r3, r3, #8
 800ad76:	637b      	str	r3, [r7, #52]	@ 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800ad78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ad7c:	fb02 f303 	mul.w	r3, r2, r3
 800ad80:	637b      	str	r3, [r7, #52]	@ 0x34

	minSignalNeeded_p1 = 0;
 800ad82:	2300      	movs	r3, #0
 800ad84:	667b      	str	r3, [r7, #100]	@ 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d01a      	beq.n	800adc2 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	029b      	lsls	r3, r3, #10
 800ad90:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800ad96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad98:	4413      	add	r3, r2
 800ad9a:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800ad9c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ada4:	667b      	str	r3, [r7, #100]	@ 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800ada6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ada8:	4613      	mov	r3, r2
 800adaa:	005b      	lsls	r3, r3, #1
 800adac:	4413      	add	r3, r2
 800adae:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800adb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adb2:	fb03 f303 	mul.w	r3, r3, r3
 800adb6:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800adb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adba:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800adbe:	0c1b      	lsrs	r3, r3, #16
 800adc0:	667b      	str	r3, [r7, #100]	@ 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800adc6:	fb02 f303 	mul.w	r3, r2, r3
 800adca:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800adcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adce:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800add2:	0c1b      	lsrs	r3, r3, #16
 800add4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800add6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add8:	fb03 f303 	mul.w	r3, r3, r3
 800addc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800adde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ade0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800ade4:	0c1b      	lsrs	r3, r3, #16
 800ade6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800ade8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adea:	085a      	lsrs	r2, r3, #1
 800adec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adee:	441a      	add	r2, r3
 800adf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800adf6:	62bb      	str	r3, [r7, #40]	@ 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800adf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800adfc:	fb02 f303 	mul.w	r3, r2, r3
 800ae00:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800ae02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae08:	d302      	bcc.n	800ae10 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800ae0a:	4b54      	ldr	r3, [pc, #336]	@ (800af5c <VL53L0X_calc_dmax+0x230>)
 800ae0c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae0e:	e015      	b.n	800ae3c <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800ae10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae12:	085a      	lsrs	r2, r3, #1
 800ae14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae16:	441a      	add	r2, r3
 800ae18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae1e:	677b      	str	r3, [r7, #116]	@ 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800ae20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae24:	fb02 f303 	mul.w	r3, r2, r3
 800ae28:	677b      	str	r3, [r7, #116]	@ 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800ae2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae2c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800ae30:	0c1b      	lsrs	r3, r3, #16
 800ae32:	663b      	str	r3, [r7, #96]	@ 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800ae34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae36:	fb03 f303 	mul.w	r3, r3, r3
 800ae3a:	663b      	str	r3, [r7, #96]	@ 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800ae3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae3e:	039b      	lsls	r3, r3, #14
 800ae40:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800ae44:	4a46      	ldr	r2, [pc, #280]	@ (800af60 <VL53L0X_calc_dmax+0x234>)
 800ae46:	fba2 2303 	umull	r2, r3, r2, r3
 800ae4a:	099b      	lsrs	r3, r3, #6
 800ae4c:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800ae4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae50:	fb03 f303 	mul.w	r3, r3, r3
 800ae54:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800ae56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae58:	fb03 f303 	mul.w	r3, r3, r3
 800ae5c:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800ae5e:	6a3b      	ldr	r3, [r7, #32]
 800ae60:	3308      	adds	r3, #8
 800ae62:	091b      	lsrs	r3, r3, #4
 800ae64:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800ae66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae68:	6a3b      	ldr	r3, [r7, #32]
 800ae6a:	1ad3      	subs	r3, r2, r3
 800ae6c:	627b      	str	r3, [r7, #36]	@ 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800ae6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae70:	4613      	mov	r3, r2
 800ae72:	005b      	lsls	r3, r3, #1
 800ae74:	4413      	add	r3, r2
 800ae76:	011b      	lsls	r3, r3, #4
 800ae78:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ae80:	0b9b      	lsrs	r3, r3, #14
 800ae82:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800ae84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae88:	4413      	add	r3, r2
 800ae8a:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800ae8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae8e:	085b      	lsrs	r3, r3, #1
 800ae90:	69ba      	ldr	r2, [r7, #24]
 800ae92:	4413      	add	r3, r2
 800ae94:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800ae96:	69ba      	ldr	r2, [r7, #24]
 800ae98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae9e:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	039b      	lsls	r3, r3, #14
 800aea4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	085b      	lsrs	r3, r3, #1
 800aeaa:	69ba      	ldr	r2, [r7, #24]
 800aeac:	4413      	add	r3, r2
 800aeae:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800aeb0:	69ba      	ldr	r2, [r7, #24]
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeb8:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aebe:	fb02 f303 	mul.w	r3, r2, r3
 800aec2:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800aeca:	4a25      	ldr	r2, [pc, #148]	@ (800af60 <VL53L0X_calc_dmax+0x234>)
 800aecc:	fba2 2303 	umull	r2, r3, r2, r3
 800aed0:	099b      	lsrs	r3, r3, #6
 800aed2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	011b      	lsls	r3, r3, #4
 800aed8:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800aee0:	4a1f      	ldr	r2, [pc, #124]	@ (800af60 <VL53L0X_calc_dmax+0x234>)
 800aee2:	fba2 2303 	umull	r2, r3, r2, r3
 800aee6:	099b      	lsrs	r3, r3, #6
 800aee8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800aeea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aeec:	3380      	adds	r3, #128	@ 0x80
 800aeee:	0a1b      	lsrs	r3, r3, #8
 800aef0:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d008      	beq.n	800af0a <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	085a      	lsrs	r2, r3, #1
 800aefc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aefe:	441a      	add	r2, r3
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	fbb2 f3f3 	udiv	r3, r2, r3
 800af06:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af08:	e001      	b.n	800af0e <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	65bb      	str	r3, [r7, #88]	@ 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800af0e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800af10:	f7fe f9be 	bl	8009290 <VL53L0X_isqrt>
 800af14:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d008      	beq.n	800af2e <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	085a      	lsrs	r2, r3, #1
 800af20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af22:	441a      	add	r2, r3
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	fbb2 f3f3 	udiv	r3, r2, r3
 800af2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af2c:	e001      	b.n	800af32 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	65fb      	str	r3, [r7, #92]	@ 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800af32:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800af34:	f7fe f9ac 	bl	8009290 <VL53L0X_isqrt>
 800af38:	65f8      	str	r0, [r7, #92]	@ 0x5c

	*pdmax_mm = dmaxDark;
 800af3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af3c:	693a      	ldr	r2, [r7, #16]
 800af3e:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af44:	429a      	cmp	r2, r3
 800af46:	d902      	bls.n	800af4e <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800af48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af4a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800af4c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800af4e:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
}
 800af52:	4618      	mov	r0, r3
 800af54:	3768      	adds	r7, #104	@ 0x68
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	fff00000 	.word	0xfff00000
 800af60:	10624dd3 	.word	0x10624dd3

0800af64 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b0b4      	sub	sp, #208	@ 0xd0
 800af68:	af04      	add	r7, sp, #16
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
 800af70:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800af72:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800af76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800af7a:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800af7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800af82:	f44f 13c8 	mov.w	r3, #1638400	@ 0x190000
 800af86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800af8a:	f241 235c 	movw	r3, #4700	@ 0x125c
 800af8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800af92:	4b9e      	ldr	r3, [pc, #632]	@ (800b20c <VL53L0X_calc_sigma_estimate+0x2a8>)
 800af94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800af98:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800af9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800af9e:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 800afa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800afa6:	fbb2 f3f3 	udiv	r3, r2, r3
 800afaa:	67bb      	str	r3, [r7, #120]	@ 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800afac:	4b98      	ldr	r3, [pc, #608]	@ (800b210 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800afae:	677b      	str	r3, [r7, #116]	@ 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800afb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afb4:	673b      	str	r3, [r7, #112]	@ 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800afb6:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 800afba:	66fb      	str	r3, [r7, #108]	@ 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800afbc:	f240 6377 	movw	r3, #1655	@ 0x677
 800afc0:	66bb      	str	r3, [r7, #104]	@ 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afc2:	2300      	movs	r3, #0
 800afc4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6a1b      	ldr	r3, [r3, #32]
 800afcc:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	691b      	ldr	r3, [r3, #16]
 800afd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800afd6:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800afda:	0c1b      	lsrs	r3, r3, #16
 800afdc:	667b      	str	r3, [r7, #100]	@ 0x64

	correctedSignalRate_mcps =
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	663b      	str	r3, [r7, #96]	@ 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800afe4:	f107 0310 	add.w	r3, r7, #16
 800afe8:	461a      	mov	r2, r3
 800afea:	68b9      	ldr	r1, [r7, #8]
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	f7ff fe78 	bl	800ace2 <VL53L0X_get_total_signal_rate>
 800aff2:	4603      	mov	r3, r0
 800aff4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800aff8:	f107 0314 	add.w	r3, r7, #20
 800affc:	461a      	mov	r2, r3
 800affe:	68b9      	ldr	r1, [r7, #8]
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f7ff fe3f 	bl	800ac84 <VL53L0X_get_total_xtalk_rate>
 800b006:	4603      	mov	r3, r0
 800b008:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b012:	fb02 f303 	mul.w	r3, r2, r3
 800b016:	65fb      	str	r3, [r7, #92]	@ 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800b018:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b01a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800b01e:	0c1b      	lsrs	r3, r3, #16
 800b020:	65fb      	str	r3, [r7, #92]	@ 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b028:	fb02 f303 	mul.w	r3, r2, r3
 800b02c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800b030:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800b034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b036:	429a      	cmp	r2, r3
 800b038:	d902      	bls.n	800b040 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800b03a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b03c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800b040:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800b044:	2b00      	cmp	r3, #0
 800b046:	d168      	bne.n	800b11a <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b04e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800b058:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b05c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b060:	461a      	mov	r2, r3
 800b062:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f7fe feb4 	bl	8009dd4 <VL53L0X_calc_timeout_mclks>
 800b06c:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b074:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800b07e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b082:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800b086:	461a      	mov	r2, r3
 800b088:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f7fe fea1 	bl	8009dd4 <VL53L0X_calc_timeout_mclks>
 800b092:	64f8      	str	r0, [r7, #76]	@ 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b094:	2303      	movs	r3, #3
 800b096:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if (finalRangeVcselPCLKS == 8)
 800b09a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b09e:	2b08      	cmp	r3, #8
 800b0a0:	d102      	bne.n	800b0a8 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800b0a2:	2302      	movs	r3, #2
 800b0a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b0a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b0aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0ac:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b0ae:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b0b2:	fb02 f303 	mul.w	r3, r2, r3
 800b0b6:	02db      	lsls	r3, r3, #11
 800b0b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b0bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b0c0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800b0c4:	4a53      	ldr	r2, [pc, #332]	@ (800b214 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b0c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ca:	099b      	lsrs	r3, r3, #6
 800b0cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800b0d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b0d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b0d6:	fb02 f303 	mul.w	r3, r2, r3
 800b0da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b0de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b0e2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800b0e6:	4a4b      	ldr	r2, [pc, #300]	@ (800b214 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b0e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ec:	099b      	lsrs	r3, r3, #6
 800b0ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	3380      	adds	r3, #128	@ 0x80
 800b0f6:	0a1b      	lsrs	r3, r3, #8
 800b0f8:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b0fa:	693a      	ldr	r2, [r7, #16]
 800b0fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b100:	fb02 f303 	mul.w	r3, r2, r3
 800b104:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b108:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b10c:	3380      	adds	r3, #128	@ 0x80
 800b10e:	0a1b      	lsrs	r3, r3, #8
 800b110:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	021b      	lsls	r3, r3, #8
 800b118:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b11a:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d002      	beq.n	800b128 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800b122:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800b126:	e15e      	b.n	800b3e6 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800b128:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d10c      	bne.n	800b148 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b134:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b13c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		*pDmax_mm = 0;
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	2200      	movs	r2, #0
 800b144:	601a      	str	r2, [r3, #0]
 800b146:	e14c      	b.n	800b3e2 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800b148:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d102      	bne.n	800b156 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800b150:	2301      	movs	r3, #1
 800b152:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b156:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b15a:	64bb      	str	r3, [r7, #72]	@ 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b15c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b15e:	041a      	lsls	r2, r3, #16
 800b160:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b162:	fbb2 f3f3 	udiv	r3, r2, r3
 800b166:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b16a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b16e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b170:	429a      	cmp	r2, r3
 800b172:	d902      	bls.n	800b17a <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b174:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b176:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b17a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b17e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800b182:	fb02 f303 	mul.w	r3, r2, r3
 800b186:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b18a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800b18e:	4613      	mov	r3, r2
 800b190:	005b      	lsls	r3, r3, #1
 800b192:	4413      	add	r3, r2
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	4618      	mov	r0, r3
 800b198:	f7fe f87a 	bl	8009290 <VL53L0X_isqrt>
 800b19c:	4603      	mov	r3, r0
 800b19e:	005b      	lsls	r3, r3, #1
 800b1a0:	647b      	str	r3, [r7, #68]	@ 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	891b      	ldrh	r3, [r3, #8]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b1aa:	fb02 f303 	mul.w	r3, r2, r3
 800b1ae:	643b      	str	r3, [r7, #64]	@ 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b1b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1b2:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b1b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b1b8:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b1ba:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b1bc:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b1c0:	4a14      	ldr	r2, [pc, #80]	@ (800b214 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b1c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1c6:	099b      	lsrs	r3, r3, #6
 800b1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800b1ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1cc:	041b      	lsls	r3, r3, #16
 800b1ce:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800b1d2:	4a10      	ldr	r2, [pc, #64]	@ (800b214 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b1d4:	fba2 2303 	umull	r2, r3, r2, r3
 800b1d8:	099b      	lsrs	r3, r3, #6
 800b1da:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800b1dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1de:	021b      	lsls	r3, r3, #8
 800b1e0:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800b1e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	bfb8      	it	lt
 800b1ee:	425b      	neglt	r3, r3
 800b1f0:	637b      	str	r3, [r7, #52]	@ 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800b1f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1f4:	021b      	lsls	r3, r3, #8
 800b1f6:	637b      	str	r3, [r7, #52]	@ 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	7e1b      	ldrb	r3, [r3, #24]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d00b      	beq.n	800b218 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800b200:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b204:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b208:	e033      	b.n	800b272 <VL53L0X_calc_sigma_estimate+0x30e>
 800b20a:	bf00      	nop
 800b20c:	028f87ae 	.word	0x028f87ae
 800b210:	0006999a 	.word	0x0006999a
 800b214:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800b218:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b21a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b21e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b222:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800b226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b228:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800b22c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b230:	fb02 f303 	mul.w	r3, r2, r3
 800b234:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b238:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b23c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b23e:	4413      	add	r3, r2
 800b240:	0c1b      	lsrs	r3, r3, #16
 800b242:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800b246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b24a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800b24e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800b252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b256:	085b      	lsrs	r3, r3, #1
 800b258:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800b25c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b260:	fb03 f303 	mul.w	r3, r3, r3
 800b264:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800b268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b26c:	0b9b      	lsrs	r3, r3, #14
 800b26e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b276:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b278:	fb02 f303 	mul.w	r3, r2, r3
 800b27c:	633b      	str	r3, [r7, #48]	@ 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b280:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800b284:	0c1b      	lsrs	r3, r3, #16
 800b286:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800b288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28a:	fb03 f303 	mul.w	r3, r3, r3
 800b28e:	633b      	str	r3, [r7, #48]	@ 0x30

		sqr2 = sigmaEstimateP2;
 800b290:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b294:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800b296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b298:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800b29c:	0c1b      	lsrs	r3, r3, #16
 800b29e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800b2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a2:	fb03 f303 	mul.w	r3, r3, r3
 800b2a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800b2a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ac:	4413      	add	r3, r2
 800b2ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800b2b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2b2:	f7fd ffed 	bl	8009290 <VL53L0X_isqrt>
 800b2b6:	6278      	str	r0, [r7, #36]	@ 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800b2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ba:	041b      	lsls	r3, r3, #16
 800b2bc:	627b      	str	r3, [r7, #36]	@ 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800b2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c0:	3332      	adds	r3, #50	@ 0x32
 800b2c2:	4a4b      	ldr	r2, [pc, #300]	@ (800b3f0 <VL53L0X_calc_sigma_estimate+0x48c>)
 800b2c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c8:	095a      	lsrs	r2, r3, #5
 800b2ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800b2d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2d8:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 800b2dc:	fb02 f303 	mul.w	r3, r2, r3
 800b2e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800b2e4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b2e8:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b2ec:	4413      	add	r3, r2
 800b2ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		sigmaEstRtn		 /= 10000;
 800b2f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2f6:	4a3f      	ldr	r2, [pc, #252]	@ (800b3f4 <VL53L0X_calc_sigma_estimate+0x490>)
 800b2f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b2fc:	0b5b      	lsrs	r3, r3, #13
 800b2fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b302:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b306:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b308:	429a      	cmp	r2, r3
 800b30a:	d902      	bls.n	800b312 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800b30c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b30e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800b312:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b316:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b31a:	4413      	add	r3, r2
 800b31c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800b320:	4a35      	ldr	r2, [pc, #212]	@ (800b3f8 <VL53L0X_calc_sigma_estimate+0x494>)
 800b322:	fba2 2303 	umull	r2, r3, r2, r3
 800b326:	099b      	lsrs	r3, r3, #6
 800b328:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800b32a:	6a3b      	ldr	r3, [r7, #32]
 800b32c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800b32e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b332:	441a      	add	r2, r3
 800b334:	6a3b      	ldr	r3, [r7, #32]
 800b336:	fbb2 f3f3 	udiv	r3, r2, r3
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7fd ffa8 	bl	8009290 <VL53L0X_isqrt>
 800b340:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800b342:	69fb      	ldr	r3, [r7, #28]
 800b344:	021b      	lsls	r3, r3, #8
 800b346:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800b34e:	4a2a      	ldr	r2, [pc, #168]	@ (800b3f8 <VL53L0X_calc_sigma_estimate+0x494>)
 800b350:	fba2 2303 	umull	r2, r3, r2, r3
 800b354:	099b      	lsrs	r3, r3, #6
 800b356:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b358:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b35c:	fb03 f303 	mul.w	r3, r3, r3
 800b360:	633b      	str	r3, [r7, #48]	@ 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	fb03 f303 	mul.w	r3, r3, r3
 800b368:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b36a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36e:	4413      	add	r3, r2
 800b370:	4618      	mov	r0, r3
 800b372:	f7fd ff8d 	bl	8009290 <VL53L0X_isqrt>
 800b376:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b37e:	fb02 f303 	mul.w	r3, r2, r3
 800b382:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b386:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d009      	beq.n	800b3a0 <VL53L0X_calc_sigma_estimate+0x43c>
 800b38c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b390:	2b00      	cmp	r3, #0
 800b392:	d005      	beq.n	800b3a0 <VL53L0X_calc_sigma_estimate+0x43c>
 800b394:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800b398:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d903      	bls.n	800b3a8 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800b3a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b3a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800b3ae:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		Status = VL53L0X_calc_dmax(
 800b3ba:	6939      	ldr	r1, [r7, #16]
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	9303      	str	r3, [sp, #12]
 800b3c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b3c4:	9302      	str	r3, [sp, #8]
 800b3c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b3ca:	9301      	str	r3, [sp, #4]
 800b3cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f7ff fca8 	bl	800ad2c <VL53L0X_calc_dmax>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b3e2:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	37c0      	adds	r7, #192	@ 0xc0
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	51eb851f 	.word	0x51eb851f
 800b3f4:	d1b71759 	.word	0xd1b71759
 800b3f8:	10624dd3 	.word	0x10624dd3

0800b3fc <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b090      	sub	sp, #64	@ 0x40
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	607a      	str	r2, [r7, #4]
 800b406:	461a      	mov	r2, r3
 800b408:	460b      	mov	r3, r1
 800b40a:	72fb      	strb	r3, [r7, #11]
 800b40c:	4613      	mov	r3, r2
 800b40e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b410:	2300      	movs	r3, #0
 800b412:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800b416:	2300      	movs	r3, #0
 800b418:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 800b41c:	2300      	movs	r3, #0
 800b41e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800b422:	2300      	movs	r3, #0
 800b424:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800b428:	2300      	movs	r3, #0
 800b42a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800b42e:	2300      	movs	r3, #0
 800b430:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800b434:	2300      	movs	r3, #0
 800b436:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800b440:	2300      	movs	r3, #0
 800b442:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 800b446:	2300      	movs	r3, #0
 800b448:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800b44e:	7afb      	ldrb	r3, [r7, #11]
 800b450:	10db      	asrs	r3, r3, #3
 800b452:	b2db      	uxtb	r3, r3
 800b454:	f003 030f 	and.w	r3, r3, #15
 800b458:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800b45c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b460:	2b00      	cmp	r3, #0
 800b462:	d017      	beq.n	800b494 <VL53L0X_get_pal_range_status+0x98>
 800b464:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b468:	2b05      	cmp	r3, #5
 800b46a:	d013      	beq.n	800b494 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800b46c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b470:	2b07      	cmp	r3, #7
 800b472:	d00f      	beq.n	800b494 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800b474:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b478:	2b0c      	cmp	r3, #12
 800b47a:	d00b      	beq.n	800b494 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800b47c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b480:	2b0d      	cmp	r3, #13
 800b482:	d007      	beq.n	800b494 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800b484:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b488:	2b0e      	cmp	r3, #14
 800b48a:	d003      	beq.n	800b494 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800b48c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b490:	2b0f      	cmp	r3, #15
 800b492:	d103      	bne.n	800b49c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800b494:	2301      	movs	r3, #1
 800b496:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800b49a:	e002      	b.n	800b4a2 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800b49c:	2300      	movs	r3, #0
 800b49e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b4a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d109      	bne.n	800b4be <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b4aa:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	f7fc f9fc 	bl	80078b0 <VL53L0X_GetLimitCheckEnable>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800b4be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d02e      	beq.n	800b524 <VL53L0X_get_pal_range_status+0x128>
 800b4c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d12a      	bne.n	800b524 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800b4ce:	f107 0310 	add.w	r3, r7, #16
 800b4d2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800b4d6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	f7ff fd43 	bl	800af64 <VL53L0X_calc_sigma_estimate>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800b4e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d103      	bne.n	800b4f4 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4f2:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800b4f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d113      	bne.n	800b524 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800b4fc:	f107 0320 	add.w	r3, r7, #32
 800b500:	461a      	mov	r2, r3
 800b502:	2100      	movs	r1, #0
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f7fc fa59 	bl	80079bc <VL53L0X_GetLimitCheckValue>
 800b50a:	4603      	mov	r3, r0
 800b50c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800b510:	6a3b      	ldr	r3, [r7, #32]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d006      	beq.n	800b524 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800b516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b518:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d902      	bls.n	800b524 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800b51e:	2301      	movs	r3, #1
 800b520:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b524:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d109      	bne.n	800b540 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b52c:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 800b530:	461a      	mov	r2, r3
 800b532:	2102      	movs	r1, #2
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f7fc f9bb 	bl	80078b0 <VL53L0X_GetLimitCheckEnable>
 800b53a:	4603      	mov	r3, r0
 800b53c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800b540:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b544:	2b00      	cmp	r3, #0
 800b546:	d044      	beq.n	800b5d2 <VL53L0X_get_pal_range_status+0x1d6>
 800b548:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d140      	bne.n	800b5d2 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b550:	f107 031c 	add.w	r3, r7, #28
 800b554:	461a      	mov	r2, r3
 800b556:	2102      	movs	r1, #2
 800b558:	68f8      	ldr	r0, [r7, #12]
 800b55a:	f7fc fa2f 	bl	80079bc <VL53L0X_GetLimitCheckValue>
 800b55e:	4603      	mov	r3, r0
 800b560:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800b564:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d107      	bne.n	800b57c <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b56c:	2201      	movs	r2, #1
 800b56e:	21ff      	movs	r1, #255	@ 0xff
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f000 f9bb 	bl	800b8ec <VL53L0X_WrByte>
 800b576:	4603      	mov	r3, r0
 800b578:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800b57c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b580:	2b00      	cmp	r3, #0
 800b582:	d109      	bne.n	800b598 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800b584:	f107 0316 	add.w	r3, r7, #22
 800b588:	461a      	mov	r2, r3
 800b58a:	21b6      	movs	r1, #182	@ 0xb6
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f000 fa59 	bl	800ba44 <VL53L0X_RdWord>
 800b592:	4603      	mov	r3, r0
 800b594:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800b598:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d107      	bne.n	800b5b0 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	21ff      	movs	r1, #255	@ 0xff
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f000 f9a1 	bl	800b8ec <VL53L0X_WrByte>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800b5b0:	8afb      	ldrh	r3, [r7, #22]
 800b5b2:	025b      	lsls	r3, r3, #9
 800b5b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5ba:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148

		if ((SignalRefClipValue > 0) &&
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d006      	beq.n	800b5d2 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800b5c4:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800b5c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d902      	bls.n	800b5d2 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b5d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d109      	bne.n	800b5ee <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b5da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b5de:	461a      	mov	r2, r3
 800b5e0:	2103      	movs	r1, #3
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f7fc f964 	bl	80078b0 <VL53L0X_GetLimitCheckEnable>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800b5ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d023      	beq.n	800b63e <VL53L0X_get_pal_range_status+0x242>
 800b5f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d11f      	bne.n	800b63e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800b5fe:	893b      	ldrh	r3, [r7, #8]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d102      	bne.n	800b60a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800b604:	2300      	movs	r3, #0
 800b606:	637b      	str	r3, [r7, #52]	@ 0x34
 800b608:	e005      	b.n	800b616 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	021a      	lsls	r2, r3, #8
 800b60e:	893b      	ldrh	r3, [r7, #8]
 800b610:	fbb2 f3f3 	udiv	r3, r2, r3
 800b614:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b616:	f107 0318 	add.w	r3, r7, #24
 800b61a:	461a      	mov	r2, r3
 800b61c:	2103      	movs	r1, #3
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f7fc f9cc 	bl	80079bc <VL53L0X_GetLimitCheckValue>
 800b624:	4603      	mov	r3, r0
 800b626:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d006      	beq.n	800b63e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800b630:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800b632:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b634:	429a      	cmp	r2, r3
 800b636:	d202      	bcs.n	800b63e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800b638:	2301      	movs	r3, #1
 800b63a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b63e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b642:	2b00      	cmp	r3, #0
 800b644:	d14a      	bne.n	800b6dc <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800b646:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d103      	bne.n	800b656 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800b64e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b650:	22ff      	movs	r2, #255	@ 0xff
 800b652:	701a      	strb	r2, [r3, #0]
 800b654:	e042      	b.n	800b6dc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800b656:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d007      	beq.n	800b66e <VL53L0X_get_pal_range_status+0x272>
 800b65e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b662:	2b02      	cmp	r3, #2
 800b664:	d003      	beq.n	800b66e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800b666:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b66a:	2b03      	cmp	r3, #3
 800b66c:	d103      	bne.n	800b676 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800b66e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b670:	2205      	movs	r2, #5
 800b672:	701a      	strb	r2, [r3, #0]
 800b674:	e032      	b.n	800b6dc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800b676:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b67a:	2b06      	cmp	r3, #6
 800b67c:	d003      	beq.n	800b686 <VL53L0X_get_pal_range_status+0x28a>
 800b67e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b682:	2b09      	cmp	r3, #9
 800b684:	d103      	bne.n	800b68e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800b686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b688:	2204      	movs	r2, #4
 800b68a:	701a      	strb	r2, [r3, #0]
 800b68c:	e026      	b.n	800b6dc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800b68e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b692:	2b08      	cmp	r3, #8
 800b694:	d007      	beq.n	800b6a6 <VL53L0X_get_pal_range_status+0x2aa>
 800b696:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b69a:	2b0a      	cmp	r3, #10
 800b69c:	d003      	beq.n	800b6a6 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800b69e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d103      	bne.n	800b6ae <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800b6a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6a8:	2203      	movs	r2, #3
 800b6aa:	701a      	strb	r2, [r3, #0]
 800b6ac:	e016      	b.n	800b6dc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800b6ae:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b6b2:	2b04      	cmp	r3, #4
 800b6b4:	d003      	beq.n	800b6be <VL53L0X_get_pal_range_status+0x2c2>
 800b6b6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d103      	bne.n	800b6c6 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800b6be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6c0:	2202      	movs	r2, #2
 800b6c2:	701a      	strb	r2, [r3, #0]
 800b6c4:	e00a      	b.n	800b6dc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800b6c6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d103      	bne.n	800b6d6 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800b6ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	701a      	strb	r2, [r3, #0]
 800b6d4:	e002      	b.n	800b6dc <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800b6d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6d8:	2200      	movs	r2, #0
 800b6da:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800b6dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d102      	bne.n	800b6ea <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800b6e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b6ea:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	2101      	movs	r1, #1
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f7fc f8dc 	bl	80078b0 <VL53L0X_GetLimitCheckEnable>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800b6fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b702:	2b00      	cmp	r3, #0
 800b704:	d14f      	bne.n	800b7a6 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800b706:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d003      	beq.n	800b716 <VL53L0X_get_pal_range_status+0x31a>
 800b70e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800b712:	2b01      	cmp	r3, #1
 800b714:	d103      	bne.n	800b71e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800b716:	2301      	movs	r3, #1
 800b718:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800b71c:	e002      	b.n	800b724 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800b71e:	2300      	movs	r3, #0
 800b720:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800b72a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800b72e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b732:	2b04      	cmp	r3, #4
 800b734:	d003      	beq.n	800b73e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800b736:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d103      	bne.n	800b746 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800b73e:	2301      	movs	r3, #1
 800b740:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800b744:	e002      	b.n	800b74c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800b746:	2300      	movs	r3, #0
 800b748:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800b752:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800b756:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d003      	beq.n	800b766 <VL53L0X_get_pal_range_status+0x36a>
 800b75e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800b762:	2b01      	cmp	r3, #1
 800b764:	d103      	bne.n	800b76e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800b766:	2301      	movs	r3, #1
 800b768:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800b76c:	e002      	b.n	800b774 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800b76e:	2300      	movs	r3, #0
 800b770:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800b77a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800b77e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b782:	2b00      	cmp	r3, #0
 800b784:	d003      	beq.n	800b78e <VL53L0X_get_pal_range_status+0x392>
 800b786:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d103      	bne.n	800b796 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800b78e:	2301      	movs	r3, #1
 800b790:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800b794:	e002      	b.n	800b79c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800b796:	2300      	movs	r3, #0
 800b798:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800b7a2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b7a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3740      	adds	r7, #64	@ 0x40
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b088      	sub	sp, #32
 800b7b6:	af02      	add	r7, sp, #8
 800b7b8:	60f8      	str	r0, [r7, #12]
 800b7ba:	60b9      	str	r1, [r7, #8]
 800b7bc:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	330a      	adds	r3, #10
 800b7c2:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	b29a      	uxth	r2, r3
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	f7f6 f98d 	bl	8001afc <HAL_I2C_Master_Transmit>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b7e6:	693b      	ldr	r3, [r7, #16]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3718      	adds	r7, #24
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b088      	sub	sp, #32
 800b7f4:	af02      	add	r7, sp, #8
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	330a      	adds	r3, #10
 800b800:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800b80e:	f043 0301 	orr.w	r3, r3, #1
 800b812:	b2db      	uxtb	r3, r3
 800b814:	4619      	mov	r1, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	b29a      	uxth	r2, r3
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	4613      	mov	r3, r2
 800b820:	68ba      	ldr	r2, [r7, #8]
 800b822:	f7f6 fa83 	bl	8001d2c <HAL_I2C_Master_Receive>
 800b826:	4603      	mov	r3, r0
 800b828:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b82a:	693b      	ldr	r3, [r7, #16]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3718      	adds	r7, #24
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	607a      	str	r2, [r7, #4]
 800b83e:	603b      	str	r3, [r7, #0]
 800b840:	460b      	mov	r3, r1
 800b842:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b844:	2300      	movs	r3, #0
 800b846:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	2b3f      	cmp	r3, #63	@ 0x3f
 800b84c:	d902      	bls.n	800b854 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800b84e:	f06f 0303 	mvn.w	r3, #3
 800b852:	e016      	b.n	800b882 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800b854:	4a0d      	ldr	r2, [pc, #52]	@ (800b88c <VL53L0X_WriteMulti+0x58>)
 800b856:	7afb      	ldrb	r3, [r7, #11]
 800b858:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800b85a:	683a      	ldr	r2, [r7, #0]
 800b85c:	6879      	ldr	r1, [r7, #4]
 800b85e:	480c      	ldr	r0, [pc, #48]	@ (800b890 <VL53L0X_WriteMulti+0x5c>)
 800b860:	f000 f9ce 	bl	800bc00 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	3301      	adds	r3, #1
 800b868:	461a      	mov	r2, r3
 800b86a:	4908      	ldr	r1, [pc, #32]	@ (800b88c <VL53L0X_WriteMulti+0x58>)
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f7ff ffa0 	bl	800b7b2 <_I2CWrite>
 800b872:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d001      	beq.n	800b87e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b87a:	23ec      	movs	r3, #236	@ 0xec
 800b87c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b87e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b882:	4618      	mov	r0, r3
 800b884:	3718      	adds	r7, #24
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	24000668 	.word	0x24000668
 800b890:	24000669 	.word	0x24000669

0800b894 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	607a      	str	r2, [r7, #4]
 800b89e:	603b      	str	r3, [r7, #0]
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b8a8:	f107 030b 	add.w	r3, r7, #11
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	68f8      	ldr	r0, [r7, #12]
 800b8b2:	f7ff ff7e 	bl	800b7b2 <_I2CWrite>
 800b8b6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b8be:	23ec      	movs	r3, #236	@ 0xec
 800b8c0:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b8c2:	e00c      	b.n	800b8de <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800b8c4:	683a      	ldr	r2, [r7, #0]
 800b8c6:	6879      	ldr	r1, [r7, #4]
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	f7ff ff91 	bl	800b7f0 <_I2CRead>
 800b8ce:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d002      	beq.n	800b8dc <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b8d6:	23ec      	movs	r3, #236	@ 0xec
 800b8d8:	75fb      	strb	r3, [r7, #23]
 800b8da:	e000      	b.n	800b8de <VL53L0X_ReadMulti+0x4a>
    }
done:
 800b8dc:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b8de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3718      	adds	r7, #24
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
	...

0800b8ec <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	70fb      	strb	r3, [r7, #3]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b900:	4a0b      	ldr	r2, [pc, #44]	@ (800b930 <VL53L0X_WrByte+0x44>)
 800b902:	78fb      	ldrb	r3, [r7, #3]
 800b904:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800b906:	4a0a      	ldr	r2, [pc, #40]	@ (800b930 <VL53L0X_WrByte+0x44>)
 800b908:	78bb      	ldrb	r3, [r7, #2]
 800b90a:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800b90c:	2202      	movs	r2, #2
 800b90e:	4908      	ldr	r1, [pc, #32]	@ (800b930 <VL53L0X_WrByte+0x44>)
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f7ff ff4e 	bl	800b7b2 <_I2CWrite>
 800b916:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d001      	beq.n	800b922 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b91e:	23ec      	movs	r3, #236	@ 0xec
 800b920:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b922:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b926:	4618      	mov	r0, r3
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	24000668 	.word	0x24000668

0800b934 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	460b      	mov	r3, r1
 800b93e:	70fb      	strb	r3, [r7, #3]
 800b940:	4613      	mov	r3, r2
 800b942:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b944:	2300      	movs	r3, #0
 800b946:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b948:	4a0e      	ldr	r2, [pc, #56]	@ (800b984 <VL53L0X_WrWord+0x50>)
 800b94a:	78fb      	ldrb	r3, [r7, #3]
 800b94c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800b94e:	883b      	ldrh	r3, [r7, #0]
 800b950:	0a1b      	lsrs	r3, r3, #8
 800b952:	b29b      	uxth	r3, r3
 800b954:	b2da      	uxtb	r2, r3
 800b956:	4b0b      	ldr	r3, [pc, #44]	@ (800b984 <VL53L0X_WrWord+0x50>)
 800b958:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800b95a:	883b      	ldrh	r3, [r7, #0]
 800b95c:	b2da      	uxtb	r2, r3
 800b95e:	4b09      	ldr	r3, [pc, #36]	@ (800b984 <VL53L0X_WrWord+0x50>)
 800b960:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800b962:	2203      	movs	r2, #3
 800b964:	4907      	ldr	r1, [pc, #28]	@ (800b984 <VL53L0X_WrWord+0x50>)
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f7ff ff23 	bl	800b7b2 <_I2CWrite>
 800b96c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d001      	beq.n	800b978 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b974:	23ec      	movs	r3, #236	@ 0xec
 800b976:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b978:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	24000668 	.word	0x24000668

0800b988 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	4608      	mov	r0, r1
 800b992:	4611      	mov	r1, r2
 800b994:	461a      	mov	r2, r3
 800b996:	4603      	mov	r3, r0
 800b998:	70fb      	strb	r3, [r7, #3]
 800b99a:	460b      	mov	r3, r1
 800b99c:	70bb      	strb	r3, [r7, #2]
 800b99e:	4613      	mov	r3, r2
 800b9a0:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800b9a6:	f107 020e 	add.w	r2, r7, #14
 800b9aa:	78fb      	ldrb	r3, [r7, #3]
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f81e 	bl	800b9f0 <VL53L0X_RdByte>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800b9b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d110      	bne.n	800b9e2 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800b9c0:	7bba      	ldrb	r2, [r7, #14]
 800b9c2:	78bb      	ldrb	r3, [r7, #2]
 800b9c4:	4013      	ands	r3, r2
 800b9c6:	b2da      	uxtb	r2, r3
 800b9c8:	787b      	ldrb	r3, [r7, #1]
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800b9d0:	7bba      	ldrb	r2, [r7, #14]
 800b9d2:	78fb      	ldrb	r3, [r7, #3]
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f7ff ff88 	bl	800b8ec <VL53L0X_WrByte>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	73fb      	strb	r3, [r7, #15]
 800b9e0:	e000      	b.n	800b9e4 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800b9e2:	bf00      	nop
done:
    return Status;
 800b9e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b086      	sub	sp, #24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	607a      	str	r2, [r7, #4]
 800b9fc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ba02:	f107 030b 	add.w	r3, r7, #11
 800ba06:	2201      	movs	r2, #1
 800ba08:	4619      	mov	r1, r3
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	f7ff fed1 	bl	800b7b2 <_I2CWrite>
 800ba10:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ba18:	23ec      	movs	r3, #236	@ 0xec
 800ba1a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ba1c:	e00c      	b.n	800ba38 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800ba1e:	2201      	movs	r2, #1
 800ba20:	6879      	ldr	r1, [r7, #4]
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f7ff fee4 	bl	800b7f0 <_I2CRead>
 800ba28:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d002      	beq.n	800ba36 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ba30:	23ec      	movs	r3, #236	@ 0xec
 800ba32:	75fb      	strb	r3, [r7, #23]
 800ba34:	e000      	b.n	800ba38 <VL53L0X_RdByte+0x48>
    }
done:
 800ba36:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ba38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3718      	adds	r7, #24
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b086      	sub	sp, #24
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	607a      	str	r2, [r7, #4]
 800ba50:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba52:	2300      	movs	r3, #0
 800ba54:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ba56:	f107 030b 	add.w	r3, r7, #11
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	f7ff fea7 	bl	800b7b2 <_I2CWrite>
 800ba64:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d002      	beq.n	800ba72 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ba6c:	23ec      	movs	r3, #236	@ 0xec
 800ba6e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ba70:	e015      	b.n	800ba9e <VL53L0X_RdWord+0x5a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ba72:	2202      	movs	r2, #2
 800ba74:	490d      	ldr	r1, [pc, #52]	@ (800baac <VL53L0X_RdWord+0x68>)
 800ba76:	68f8      	ldr	r0, [r7, #12]
 800ba78:	f7ff feba 	bl	800b7f0 <_I2CRead>
 800ba7c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d002      	beq.n	800ba8a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ba84:	23ec      	movs	r3, #236	@ 0xec
 800ba86:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ba88:	e009      	b.n	800ba9e <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800ba8a:	4b08      	ldr	r3, [pc, #32]	@ (800baac <VL53L0X_RdWord+0x68>)
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	021b      	lsls	r3, r3, #8
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	4a06      	ldr	r2, [pc, #24]	@ (800baac <VL53L0X_RdWord+0x68>)
 800ba94:	7852      	ldrb	r2, [r2, #1]
 800ba96:	4413      	add	r3, r2
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800ba9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3718      	adds	r7, #24
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	24000668 	.word	0x24000668

0800bab0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	460b      	mov	r3, r1
 800baba:	607a      	str	r2, [r7, #4]
 800babc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800babe:	2300      	movs	r3, #0
 800bac0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bac2:	f107 030b 	add.w	r3, r7, #11
 800bac6:	2201      	movs	r2, #1
 800bac8:	4619      	mov	r1, r3
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f7ff fe71 	bl	800b7b2 <_I2CWrite>
 800bad0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bad8:	23ec      	movs	r3, #236	@ 0xec
 800bada:	75fb      	strb	r3, [r7, #23]
        goto done;
 800badc:	e01b      	b.n	800bb16 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800bade:	2204      	movs	r2, #4
 800bae0:	4910      	ldr	r1, [pc, #64]	@ (800bb24 <VL53L0X_RdDWord+0x74>)
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f7ff fe84 	bl	800b7f0 <_I2CRead>
 800bae8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d002      	beq.n	800baf6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800baf0:	23ec      	movs	r3, #236	@ 0xec
 800baf2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800baf4:	e00f      	b.n	800bb16 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800baf6:	4b0b      	ldr	r3, [pc, #44]	@ (800bb24 <VL53L0X_RdDWord+0x74>)
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	061a      	lsls	r2, r3, #24
 800bafc:	4b09      	ldr	r3, [pc, #36]	@ (800bb24 <VL53L0X_RdDWord+0x74>)
 800bafe:	785b      	ldrb	r3, [r3, #1]
 800bb00:	041b      	lsls	r3, r3, #16
 800bb02:	441a      	add	r2, r3
 800bb04:	4b07      	ldr	r3, [pc, #28]	@ (800bb24 <VL53L0X_RdDWord+0x74>)
 800bb06:	789b      	ldrb	r3, [r3, #2]
 800bb08:	021b      	lsls	r3, r3, #8
 800bb0a:	4413      	add	r3, r2
 800bb0c:	4a05      	ldr	r2, [pc, #20]	@ (800bb24 <VL53L0X_RdDWord+0x74>)
 800bb0e:	78d2      	ldrb	r2, [r2, #3]
 800bb10:	441a      	add	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800bb16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3718      	adds	r7, #24
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	24000668 	.word	0x24000668

0800bb28 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bb30:	2300      	movs	r3, #0
 800bb32:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800bb34:	2002      	movs	r0, #2
 800bb36:	f7f5 fbc1 	bl	80012bc <HAL_Delay>
    return status;
 800bb3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
	...

0800bb48 <siprintf>:
 800bb48:	b40e      	push	{r1, r2, r3}
 800bb4a:	b500      	push	{lr}
 800bb4c:	b09c      	sub	sp, #112	@ 0x70
 800bb4e:	ab1d      	add	r3, sp, #116	@ 0x74
 800bb50:	9002      	str	r0, [sp, #8]
 800bb52:	9006      	str	r0, [sp, #24]
 800bb54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bb58:	4809      	ldr	r0, [pc, #36]	@ (800bb80 <siprintf+0x38>)
 800bb5a:	9107      	str	r1, [sp, #28]
 800bb5c:	9104      	str	r1, [sp, #16]
 800bb5e:	4909      	ldr	r1, [pc, #36]	@ (800bb84 <siprintf+0x3c>)
 800bb60:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb64:	9105      	str	r1, [sp, #20]
 800bb66:	6800      	ldr	r0, [r0, #0]
 800bb68:	9301      	str	r3, [sp, #4]
 800bb6a:	a902      	add	r1, sp, #8
 800bb6c:	f000 f9aa 	bl	800bec4 <_svfiprintf_r>
 800bb70:	9b02      	ldr	r3, [sp, #8]
 800bb72:	2200      	movs	r2, #0
 800bb74:	701a      	strb	r2, [r3, #0]
 800bb76:	b01c      	add	sp, #112	@ 0x70
 800bb78:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb7c:	b003      	add	sp, #12
 800bb7e:	4770      	bx	lr
 800bb80:	240002d0 	.word	0x240002d0
 800bb84:	ffff0208 	.word	0xffff0208

0800bb88 <memset>:
 800bb88:	4402      	add	r2, r0
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d100      	bne.n	800bb92 <memset+0xa>
 800bb90:	4770      	bx	lr
 800bb92:	f803 1b01 	strb.w	r1, [r3], #1
 800bb96:	e7f9      	b.n	800bb8c <memset+0x4>

0800bb98 <__errno>:
 800bb98:	4b01      	ldr	r3, [pc, #4]	@ (800bba0 <__errno+0x8>)
 800bb9a:	6818      	ldr	r0, [r3, #0]
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop
 800bba0:	240002d0 	.word	0x240002d0

0800bba4 <__libc_init_array>:
 800bba4:	b570      	push	{r4, r5, r6, lr}
 800bba6:	4d0d      	ldr	r5, [pc, #52]	@ (800bbdc <__libc_init_array+0x38>)
 800bba8:	4c0d      	ldr	r4, [pc, #52]	@ (800bbe0 <__libc_init_array+0x3c>)
 800bbaa:	1b64      	subs	r4, r4, r5
 800bbac:	10a4      	asrs	r4, r4, #2
 800bbae:	2600      	movs	r6, #0
 800bbb0:	42a6      	cmp	r6, r4
 800bbb2:	d109      	bne.n	800bbc8 <__libc_init_array+0x24>
 800bbb4:	4d0b      	ldr	r5, [pc, #44]	@ (800bbe4 <__libc_init_array+0x40>)
 800bbb6:	4c0c      	ldr	r4, [pc, #48]	@ (800bbe8 <__libc_init_array+0x44>)
 800bbb8:	f000 fc6e 	bl	800c498 <_init>
 800bbbc:	1b64      	subs	r4, r4, r5
 800bbbe:	10a4      	asrs	r4, r4, #2
 800bbc0:	2600      	movs	r6, #0
 800bbc2:	42a6      	cmp	r6, r4
 800bbc4:	d105      	bne.n	800bbd2 <__libc_init_array+0x2e>
 800bbc6:	bd70      	pop	{r4, r5, r6, pc}
 800bbc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbcc:	4798      	blx	r3
 800bbce:	3601      	adds	r6, #1
 800bbd0:	e7ee      	b.n	800bbb0 <__libc_init_array+0xc>
 800bbd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbd6:	4798      	blx	r3
 800bbd8:	3601      	adds	r6, #1
 800bbda:	e7f2      	b.n	800bbc2 <__libc_init_array+0x1e>
 800bbdc:	0800c54c 	.word	0x0800c54c
 800bbe0:	0800c54c 	.word	0x0800c54c
 800bbe4:	0800c54c 	.word	0x0800c54c
 800bbe8:	0800c550 	.word	0x0800c550

0800bbec <__retarget_lock_acquire_recursive>:
 800bbec:	4770      	bx	lr

0800bbee <__retarget_lock_release_recursive>:
 800bbee:	4770      	bx	lr

0800bbf0 <strcpy>:
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbf6:	f803 2b01 	strb.w	r2, [r3], #1
 800bbfa:	2a00      	cmp	r2, #0
 800bbfc:	d1f9      	bne.n	800bbf2 <strcpy+0x2>
 800bbfe:	4770      	bx	lr

0800bc00 <memcpy>:
 800bc00:	440a      	add	r2, r1
 800bc02:	4291      	cmp	r1, r2
 800bc04:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc08:	d100      	bne.n	800bc0c <memcpy+0xc>
 800bc0a:	4770      	bx	lr
 800bc0c:	b510      	push	{r4, lr}
 800bc0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc16:	4291      	cmp	r1, r2
 800bc18:	d1f9      	bne.n	800bc0e <memcpy+0xe>
 800bc1a:	bd10      	pop	{r4, pc}

0800bc1c <_free_r>:
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	4605      	mov	r5, r0
 800bc20:	2900      	cmp	r1, #0
 800bc22:	d041      	beq.n	800bca8 <_free_r+0x8c>
 800bc24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc28:	1f0c      	subs	r4, r1, #4
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	bfb8      	it	lt
 800bc2e:	18e4      	addlt	r4, r4, r3
 800bc30:	f000 f8e0 	bl	800bdf4 <__malloc_lock>
 800bc34:	4a1d      	ldr	r2, [pc, #116]	@ (800bcac <_free_r+0x90>)
 800bc36:	6813      	ldr	r3, [r2, #0]
 800bc38:	b933      	cbnz	r3, 800bc48 <_free_r+0x2c>
 800bc3a:	6063      	str	r3, [r4, #4]
 800bc3c:	6014      	str	r4, [r2, #0]
 800bc3e:	4628      	mov	r0, r5
 800bc40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc44:	f000 b8dc 	b.w	800be00 <__malloc_unlock>
 800bc48:	42a3      	cmp	r3, r4
 800bc4a:	d908      	bls.n	800bc5e <_free_r+0x42>
 800bc4c:	6820      	ldr	r0, [r4, #0]
 800bc4e:	1821      	adds	r1, r4, r0
 800bc50:	428b      	cmp	r3, r1
 800bc52:	bf01      	itttt	eq
 800bc54:	6819      	ldreq	r1, [r3, #0]
 800bc56:	685b      	ldreq	r3, [r3, #4]
 800bc58:	1809      	addeq	r1, r1, r0
 800bc5a:	6021      	streq	r1, [r4, #0]
 800bc5c:	e7ed      	b.n	800bc3a <_free_r+0x1e>
 800bc5e:	461a      	mov	r2, r3
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	b10b      	cbz	r3, 800bc68 <_free_r+0x4c>
 800bc64:	42a3      	cmp	r3, r4
 800bc66:	d9fa      	bls.n	800bc5e <_free_r+0x42>
 800bc68:	6811      	ldr	r1, [r2, #0]
 800bc6a:	1850      	adds	r0, r2, r1
 800bc6c:	42a0      	cmp	r0, r4
 800bc6e:	d10b      	bne.n	800bc88 <_free_r+0x6c>
 800bc70:	6820      	ldr	r0, [r4, #0]
 800bc72:	4401      	add	r1, r0
 800bc74:	1850      	adds	r0, r2, r1
 800bc76:	4283      	cmp	r3, r0
 800bc78:	6011      	str	r1, [r2, #0]
 800bc7a:	d1e0      	bne.n	800bc3e <_free_r+0x22>
 800bc7c:	6818      	ldr	r0, [r3, #0]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	6053      	str	r3, [r2, #4]
 800bc82:	4408      	add	r0, r1
 800bc84:	6010      	str	r0, [r2, #0]
 800bc86:	e7da      	b.n	800bc3e <_free_r+0x22>
 800bc88:	d902      	bls.n	800bc90 <_free_r+0x74>
 800bc8a:	230c      	movs	r3, #12
 800bc8c:	602b      	str	r3, [r5, #0]
 800bc8e:	e7d6      	b.n	800bc3e <_free_r+0x22>
 800bc90:	6820      	ldr	r0, [r4, #0]
 800bc92:	1821      	adds	r1, r4, r0
 800bc94:	428b      	cmp	r3, r1
 800bc96:	bf04      	itt	eq
 800bc98:	6819      	ldreq	r1, [r3, #0]
 800bc9a:	685b      	ldreq	r3, [r3, #4]
 800bc9c:	6063      	str	r3, [r4, #4]
 800bc9e:	bf04      	itt	eq
 800bca0:	1809      	addeq	r1, r1, r0
 800bca2:	6021      	streq	r1, [r4, #0]
 800bca4:	6054      	str	r4, [r2, #4]
 800bca6:	e7ca      	b.n	800bc3e <_free_r+0x22>
 800bca8:	bd38      	pop	{r3, r4, r5, pc}
 800bcaa:	bf00      	nop
 800bcac:	240007ec 	.word	0x240007ec

0800bcb0 <sbrk_aligned>:
 800bcb0:	b570      	push	{r4, r5, r6, lr}
 800bcb2:	4e0f      	ldr	r6, [pc, #60]	@ (800bcf0 <sbrk_aligned+0x40>)
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	6831      	ldr	r1, [r6, #0]
 800bcb8:	4605      	mov	r5, r0
 800bcba:	b911      	cbnz	r1, 800bcc2 <sbrk_aligned+0x12>
 800bcbc:	f000 fba6 	bl	800c40c <_sbrk_r>
 800bcc0:	6030      	str	r0, [r6, #0]
 800bcc2:	4621      	mov	r1, r4
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	f000 fba1 	bl	800c40c <_sbrk_r>
 800bcca:	1c43      	adds	r3, r0, #1
 800bccc:	d103      	bne.n	800bcd6 <sbrk_aligned+0x26>
 800bcce:	f04f 34ff 	mov.w	r4, #4294967295
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	bd70      	pop	{r4, r5, r6, pc}
 800bcd6:	1cc4      	adds	r4, r0, #3
 800bcd8:	f024 0403 	bic.w	r4, r4, #3
 800bcdc:	42a0      	cmp	r0, r4
 800bcde:	d0f8      	beq.n	800bcd2 <sbrk_aligned+0x22>
 800bce0:	1a21      	subs	r1, r4, r0
 800bce2:	4628      	mov	r0, r5
 800bce4:	f000 fb92 	bl	800c40c <_sbrk_r>
 800bce8:	3001      	adds	r0, #1
 800bcea:	d1f2      	bne.n	800bcd2 <sbrk_aligned+0x22>
 800bcec:	e7ef      	b.n	800bcce <sbrk_aligned+0x1e>
 800bcee:	bf00      	nop
 800bcf0:	240007e8 	.word	0x240007e8

0800bcf4 <_malloc_r>:
 800bcf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcf8:	1ccd      	adds	r5, r1, #3
 800bcfa:	f025 0503 	bic.w	r5, r5, #3
 800bcfe:	3508      	adds	r5, #8
 800bd00:	2d0c      	cmp	r5, #12
 800bd02:	bf38      	it	cc
 800bd04:	250c      	movcc	r5, #12
 800bd06:	2d00      	cmp	r5, #0
 800bd08:	4606      	mov	r6, r0
 800bd0a:	db01      	blt.n	800bd10 <_malloc_r+0x1c>
 800bd0c:	42a9      	cmp	r1, r5
 800bd0e:	d904      	bls.n	800bd1a <_malloc_r+0x26>
 800bd10:	230c      	movs	r3, #12
 800bd12:	6033      	str	r3, [r6, #0]
 800bd14:	2000      	movs	r0, #0
 800bd16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bdf0 <_malloc_r+0xfc>
 800bd1e:	f000 f869 	bl	800bdf4 <__malloc_lock>
 800bd22:	f8d8 3000 	ldr.w	r3, [r8]
 800bd26:	461c      	mov	r4, r3
 800bd28:	bb44      	cbnz	r4, 800bd7c <_malloc_r+0x88>
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	f7ff ffbf 	bl	800bcb0 <sbrk_aligned>
 800bd32:	1c43      	adds	r3, r0, #1
 800bd34:	4604      	mov	r4, r0
 800bd36:	d158      	bne.n	800bdea <_malloc_r+0xf6>
 800bd38:	f8d8 4000 	ldr.w	r4, [r8]
 800bd3c:	4627      	mov	r7, r4
 800bd3e:	2f00      	cmp	r7, #0
 800bd40:	d143      	bne.n	800bdca <_malloc_r+0xd6>
 800bd42:	2c00      	cmp	r4, #0
 800bd44:	d04b      	beq.n	800bdde <_malloc_r+0xea>
 800bd46:	6823      	ldr	r3, [r4, #0]
 800bd48:	4639      	mov	r1, r7
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	eb04 0903 	add.w	r9, r4, r3
 800bd50:	f000 fb5c 	bl	800c40c <_sbrk_r>
 800bd54:	4581      	cmp	r9, r0
 800bd56:	d142      	bne.n	800bdde <_malloc_r+0xea>
 800bd58:	6821      	ldr	r1, [r4, #0]
 800bd5a:	1a6d      	subs	r5, r5, r1
 800bd5c:	4629      	mov	r1, r5
 800bd5e:	4630      	mov	r0, r6
 800bd60:	f7ff ffa6 	bl	800bcb0 <sbrk_aligned>
 800bd64:	3001      	adds	r0, #1
 800bd66:	d03a      	beq.n	800bdde <_malloc_r+0xea>
 800bd68:	6823      	ldr	r3, [r4, #0]
 800bd6a:	442b      	add	r3, r5
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	f8d8 3000 	ldr.w	r3, [r8]
 800bd72:	685a      	ldr	r2, [r3, #4]
 800bd74:	bb62      	cbnz	r2, 800bdd0 <_malloc_r+0xdc>
 800bd76:	f8c8 7000 	str.w	r7, [r8]
 800bd7a:	e00f      	b.n	800bd9c <_malloc_r+0xa8>
 800bd7c:	6822      	ldr	r2, [r4, #0]
 800bd7e:	1b52      	subs	r2, r2, r5
 800bd80:	d420      	bmi.n	800bdc4 <_malloc_r+0xd0>
 800bd82:	2a0b      	cmp	r2, #11
 800bd84:	d917      	bls.n	800bdb6 <_malloc_r+0xc2>
 800bd86:	1961      	adds	r1, r4, r5
 800bd88:	42a3      	cmp	r3, r4
 800bd8a:	6025      	str	r5, [r4, #0]
 800bd8c:	bf18      	it	ne
 800bd8e:	6059      	strne	r1, [r3, #4]
 800bd90:	6863      	ldr	r3, [r4, #4]
 800bd92:	bf08      	it	eq
 800bd94:	f8c8 1000 	streq.w	r1, [r8]
 800bd98:	5162      	str	r2, [r4, r5]
 800bd9a:	604b      	str	r3, [r1, #4]
 800bd9c:	4630      	mov	r0, r6
 800bd9e:	f000 f82f 	bl	800be00 <__malloc_unlock>
 800bda2:	f104 000b 	add.w	r0, r4, #11
 800bda6:	1d23      	adds	r3, r4, #4
 800bda8:	f020 0007 	bic.w	r0, r0, #7
 800bdac:	1ac2      	subs	r2, r0, r3
 800bdae:	bf1c      	itt	ne
 800bdb0:	1a1b      	subne	r3, r3, r0
 800bdb2:	50a3      	strne	r3, [r4, r2]
 800bdb4:	e7af      	b.n	800bd16 <_malloc_r+0x22>
 800bdb6:	6862      	ldr	r2, [r4, #4]
 800bdb8:	42a3      	cmp	r3, r4
 800bdba:	bf0c      	ite	eq
 800bdbc:	f8c8 2000 	streq.w	r2, [r8]
 800bdc0:	605a      	strne	r2, [r3, #4]
 800bdc2:	e7eb      	b.n	800bd9c <_malloc_r+0xa8>
 800bdc4:	4623      	mov	r3, r4
 800bdc6:	6864      	ldr	r4, [r4, #4]
 800bdc8:	e7ae      	b.n	800bd28 <_malloc_r+0x34>
 800bdca:	463c      	mov	r4, r7
 800bdcc:	687f      	ldr	r7, [r7, #4]
 800bdce:	e7b6      	b.n	800bd3e <_malloc_r+0x4a>
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	42a3      	cmp	r3, r4
 800bdd6:	d1fb      	bne.n	800bdd0 <_malloc_r+0xdc>
 800bdd8:	2300      	movs	r3, #0
 800bdda:	6053      	str	r3, [r2, #4]
 800bddc:	e7de      	b.n	800bd9c <_malloc_r+0xa8>
 800bdde:	230c      	movs	r3, #12
 800bde0:	6033      	str	r3, [r6, #0]
 800bde2:	4630      	mov	r0, r6
 800bde4:	f000 f80c 	bl	800be00 <__malloc_unlock>
 800bde8:	e794      	b.n	800bd14 <_malloc_r+0x20>
 800bdea:	6005      	str	r5, [r0, #0]
 800bdec:	e7d6      	b.n	800bd9c <_malloc_r+0xa8>
 800bdee:	bf00      	nop
 800bdf0:	240007ec 	.word	0x240007ec

0800bdf4 <__malloc_lock>:
 800bdf4:	4801      	ldr	r0, [pc, #4]	@ (800bdfc <__malloc_lock+0x8>)
 800bdf6:	f7ff bef9 	b.w	800bbec <__retarget_lock_acquire_recursive>
 800bdfa:	bf00      	nop
 800bdfc:	240007e4 	.word	0x240007e4

0800be00 <__malloc_unlock>:
 800be00:	4801      	ldr	r0, [pc, #4]	@ (800be08 <__malloc_unlock+0x8>)
 800be02:	f7ff bef4 	b.w	800bbee <__retarget_lock_release_recursive>
 800be06:	bf00      	nop
 800be08:	240007e4 	.word	0x240007e4

0800be0c <__ssputs_r>:
 800be0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be10:	688e      	ldr	r6, [r1, #8]
 800be12:	461f      	mov	r7, r3
 800be14:	42be      	cmp	r6, r7
 800be16:	680b      	ldr	r3, [r1, #0]
 800be18:	4682      	mov	sl, r0
 800be1a:	460c      	mov	r4, r1
 800be1c:	4690      	mov	r8, r2
 800be1e:	d82d      	bhi.n	800be7c <__ssputs_r+0x70>
 800be20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800be28:	d026      	beq.n	800be78 <__ssputs_r+0x6c>
 800be2a:	6965      	ldr	r5, [r4, #20]
 800be2c:	6909      	ldr	r1, [r1, #16]
 800be2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be32:	eba3 0901 	sub.w	r9, r3, r1
 800be36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be3a:	1c7b      	adds	r3, r7, #1
 800be3c:	444b      	add	r3, r9
 800be3e:	106d      	asrs	r5, r5, #1
 800be40:	429d      	cmp	r5, r3
 800be42:	bf38      	it	cc
 800be44:	461d      	movcc	r5, r3
 800be46:	0553      	lsls	r3, r2, #21
 800be48:	d527      	bpl.n	800be9a <__ssputs_r+0x8e>
 800be4a:	4629      	mov	r1, r5
 800be4c:	f7ff ff52 	bl	800bcf4 <_malloc_r>
 800be50:	4606      	mov	r6, r0
 800be52:	b360      	cbz	r0, 800beae <__ssputs_r+0xa2>
 800be54:	6921      	ldr	r1, [r4, #16]
 800be56:	464a      	mov	r2, r9
 800be58:	f7ff fed2 	bl	800bc00 <memcpy>
 800be5c:	89a3      	ldrh	r3, [r4, #12]
 800be5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800be62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be66:	81a3      	strh	r3, [r4, #12]
 800be68:	6126      	str	r6, [r4, #16]
 800be6a:	6165      	str	r5, [r4, #20]
 800be6c:	444e      	add	r6, r9
 800be6e:	eba5 0509 	sub.w	r5, r5, r9
 800be72:	6026      	str	r6, [r4, #0]
 800be74:	60a5      	str	r5, [r4, #8]
 800be76:	463e      	mov	r6, r7
 800be78:	42be      	cmp	r6, r7
 800be7a:	d900      	bls.n	800be7e <__ssputs_r+0x72>
 800be7c:	463e      	mov	r6, r7
 800be7e:	6820      	ldr	r0, [r4, #0]
 800be80:	4632      	mov	r2, r6
 800be82:	4641      	mov	r1, r8
 800be84:	f000 faa8 	bl	800c3d8 <memmove>
 800be88:	68a3      	ldr	r3, [r4, #8]
 800be8a:	1b9b      	subs	r3, r3, r6
 800be8c:	60a3      	str	r3, [r4, #8]
 800be8e:	6823      	ldr	r3, [r4, #0]
 800be90:	4433      	add	r3, r6
 800be92:	6023      	str	r3, [r4, #0]
 800be94:	2000      	movs	r0, #0
 800be96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be9a:	462a      	mov	r2, r5
 800be9c:	f000 fac6 	bl	800c42c <_realloc_r>
 800bea0:	4606      	mov	r6, r0
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d1e0      	bne.n	800be68 <__ssputs_r+0x5c>
 800bea6:	6921      	ldr	r1, [r4, #16]
 800bea8:	4650      	mov	r0, sl
 800beaa:	f7ff feb7 	bl	800bc1c <_free_r>
 800beae:	230c      	movs	r3, #12
 800beb0:	f8ca 3000 	str.w	r3, [sl]
 800beb4:	89a3      	ldrh	r3, [r4, #12]
 800beb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beba:	81a3      	strh	r3, [r4, #12]
 800bebc:	f04f 30ff 	mov.w	r0, #4294967295
 800bec0:	e7e9      	b.n	800be96 <__ssputs_r+0x8a>
	...

0800bec4 <_svfiprintf_r>:
 800bec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec8:	4698      	mov	r8, r3
 800beca:	898b      	ldrh	r3, [r1, #12]
 800becc:	061b      	lsls	r3, r3, #24
 800bece:	b09d      	sub	sp, #116	@ 0x74
 800bed0:	4607      	mov	r7, r0
 800bed2:	460d      	mov	r5, r1
 800bed4:	4614      	mov	r4, r2
 800bed6:	d510      	bpl.n	800befa <_svfiprintf_r+0x36>
 800bed8:	690b      	ldr	r3, [r1, #16]
 800beda:	b973      	cbnz	r3, 800befa <_svfiprintf_r+0x36>
 800bedc:	2140      	movs	r1, #64	@ 0x40
 800bede:	f7ff ff09 	bl	800bcf4 <_malloc_r>
 800bee2:	6028      	str	r0, [r5, #0]
 800bee4:	6128      	str	r0, [r5, #16]
 800bee6:	b930      	cbnz	r0, 800bef6 <_svfiprintf_r+0x32>
 800bee8:	230c      	movs	r3, #12
 800beea:	603b      	str	r3, [r7, #0]
 800beec:	f04f 30ff 	mov.w	r0, #4294967295
 800bef0:	b01d      	add	sp, #116	@ 0x74
 800bef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef6:	2340      	movs	r3, #64	@ 0x40
 800bef8:	616b      	str	r3, [r5, #20]
 800befa:	2300      	movs	r3, #0
 800befc:	9309      	str	r3, [sp, #36]	@ 0x24
 800befe:	2320      	movs	r3, #32
 800bf00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf04:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf08:	2330      	movs	r3, #48	@ 0x30
 800bf0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c0a8 <_svfiprintf_r+0x1e4>
 800bf0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf12:	f04f 0901 	mov.w	r9, #1
 800bf16:	4623      	mov	r3, r4
 800bf18:	469a      	mov	sl, r3
 800bf1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf1e:	b10a      	cbz	r2, 800bf24 <_svfiprintf_r+0x60>
 800bf20:	2a25      	cmp	r2, #37	@ 0x25
 800bf22:	d1f9      	bne.n	800bf18 <_svfiprintf_r+0x54>
 800bf24:	ebba 0b04 	subs.w	fp, sl, r4
 800bf28:	d00b      	beq.n	800bf42 <_svfiprintf_r+0x7e>
 800bf2a:	465b      	mov	r3, fp
 800bf2c:	4622      	mov	r2, r4
 800bf2e:	4629      	mov	r1, r5
 800bf30:	4638      	mov	r0, r7
 800bf32:	f7ff ff6b 	bl	800be0c <__ssputs_r>
 800bf36:	3001      	adds	r0, #1
 800bf38:	f000 80a7 	beq.w	800c08a <_svfiprintf_r+0x1c6>
 800bf3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf3e:	445a      	add	r2, fp
 800bf40:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf42:	f89a 3000 	ldrb.w	r3, [sl]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	f000 809f 	beq.w	800c08a <_svfiprintf_r+0x1c6>
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf56:	f10a 0a01 	add.w	sl, sl, #1
 800bf5a:	9304      	str	r3, [sp, #16]
 800bf5c:	9307      	str	r3, [sp, #28]
 800bf5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf62:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf64:	4654      	mov	r4, sl
 800bf66:	2205      	movs	r2, #5
 800bf68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf6c:	484e      	ldr	r0, [pc, #312]	@ (800c0a8 <_svfiprintf_r+0x1e4>)
 800bf6e:	f7f4 f9b7 	bl	80002e0 <memchr>
 800bf72:	9a04      	ldr	r2, [sp, #16]
 800bf74:	b9d8      	cbnz	r0, 800bfae <_svfiprintf_r+0xea>
 800bf76:	06d0      	lsls	r0, r2, #27
 800bf78:	bf44      	itt	mi
 800bf7a:	2320      	movmi	r3, #32
 800bf7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf80:	0711      	lsls	r1, r2, #28
 800bf82:	bf44      	itt	mi
 800bf84:	232b      	movmi	r3, #43	@ 0x2b
 800bf86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf8a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf90:	d015      	beq.n	800bfbe <_svfiprintf_r+0xfa>
 800bf92:	9a07      	ldr	r2, [sp, #28]
 800bf94:	4654      	mov	r4, sl
 800bf96:	2000      	movs	r0, #0
 800bf98:	f04f 0c0a 	mov.w	ip, #10
 800bf9c:	4621      	mov	r1, r4
 800bf9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfa2:	3b30      	subs	r3, #48	@ 0x30
 800bfa4:	2b09      	cmp	r3, #9
 800bfa6:	d94b      	bls.n	800c040 <_svfiprintf_r+0x17c>
 800bfa8:	b1b0      	cbz	r0, 800bfd8 <_svfiprintf_r+0x114>
 800bfaa:	9207      	str	r2, [sp, #28]
 800bfac:	e014      	b.n	800bfd8 <_svfiprintf_r+0x114>
 800bfae:	eba0 0308 	sub.w	r3, r0, r8
 800bfb2:	fa09 f303 	lsl.w	r3, r9, r3
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	9304      	str	r3, [sp, #16]
 800bfba:	46a2      	mov	sl, r4
 800bfbc:	e7d2      	b.n	800bf64 <_svfiprintf_r+0xa0>
 800bfbe:	9b03      	ldr	r3, [sp, #12]
 800bfc0:	1d19      	adds	r1, r3, #4
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	9103      	str	r1, [sp, #12]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	bfbb      	ittet	lt
 800bfca:	425b      	neglt	r3, r3
 800bfcc:	f042 0202 	orrlt.w	r2, r2, #2
 800bfd0:	9307      	strge	r3, [sp, #28]
 800bfd2:	9307      	strlt	r3, [sp, #28]
 800bfd4:	bfb8      	it	lt
 800bfd6:	9204      	strlt	r2, [sp, #16]
 800bfd8:	7823      	ldrb	r3, [r4, #0]
 800bfda:	2b2e      	cmp	r3, #46	@ 0x2e
 800bfdc:	d10a      	bne.n	800bff4 <_svfiprintf_r+0x130>
 800bfde:	7863      	ldrb	r3, [r4, #1]
 800bfe0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfe2:	d132      	bne.n	800c04a <_svfiprintf_r+0x186>
 800bfe4:	9b03      	ldr	r3, [sp, #12]
 800bfe6:	1d1a      	adds	r2, r3, #4
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	9203      	str	r2, [sp, #12]
 800bfec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bff0:	3402      	adds	r4, #2
 800bff2:	9305      	str	r3, [sp, #20]
 800bff4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c0b8 <_svfiprintf_r+0x1f4>
 800bff8:	7821      	ldrb	r1, [r4, #0]
 800bffa:	2203      	movs	r2, #3
 800bffc:	4650      	mov	r0, sl
 800bffe:	f7f4 f96f 	bl	80002e0 <memchr>
 800c002:	b138      	cbz	r0, 800c014 <_svfiprintf_r+0x150>
 800c004:	9b04      	ldr	r3, [sp, #16]
 800c006:	eba0 000a 	sub.w	r0, r0, sl
 800c00a:	2240      	movs	r2, #64	@ 0x40
 800c00c:	4082      	lsls	r2, r0
 800c00e:	4313      	orrs	r3, r2
 800c010:	3401      	adds	r4, #1
 800c012:	9304      	str	r3, [sp, #16]
 800c014:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c018:	4824      	ldr	r0, [pc, #144]	@ (800c0ac <_svfiprintf_r+0x1e8>)
 800c01a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c01e:	2206      	movs	r2, #6
 800c020:	f7f4 f95e 	bl	80002e0 <memchr>
 800c024:	2800      	cmp	r0, #0
 800c026:	d036      	beq.n	800c096 <_svfiprintf_r+0x1d2>
 800c028:	4b21      	ldr	r3, [pc, #132]	@ (800c0b0 <_svfiprintf_r+0x1ec>)
 800c02a:	bb1b      	cbnz	r3, 800c074 <_svfiprintf_r+0x1b0>
 800c02c:	9b03      	ldr	r3, [sp, #12]
 800c02e:	3307      	adds	r3, #7
 800c030:	f023 0307 	bic.w	r3, r3, #7
 800c034:	3308      	adds	r3, #8
 800c036:	9303      	str	r3, [sp, #12]
 800c038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c03a:	4433      	add	r3, r6
 800c03c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c03e:	e76a      	b.n	800bf16 <_svfiprintf_r+0x52>
 800c040:	fb0c 3202 	mla	r2, ip, r2, r3
 800c044:	460c      	mov	r4, r1
 800c046:	2001      	movs	r0, #1
 800c048:	e7a8      	b.n	800bf9c <_svfiprintf_r+0xd8>
 800c04a:	2300      	movs	r3, #0
 800c04c:	3401      	adds	r4, #1
 800c04e:	9305      	str	r3, [sp, #20]
 800c050:	4619      	mov	r1, r3
 800c052:	f04f 0c0a 	mov.w	ip, #10
 800c056:	4620      	mov	r0, r4
 800c058:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c05c:	3a30      	subs	r2, #48	@ 0x30
 800c05e:	2a09      	cmp	r2, #9
 800c060:	d903      	bls.n	800c06a <_svfiprintf_r+0x1a6>
 800c062:	2b00      	cmp	r3, #0
 800c064:	d0c6      	beq.n	800bff4 <_svfiprintf_r+0x130>
 800c066:	9105      	str	r1, [sp, #20]
 800c068:	e7c4      	b.n	800bff4 <_svfiprintf_r+0x130>
 800c06a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c06e:	4604      	mov	r4, r0
 800c070:	2301      	movs	r3, #1
 800c072:	e7f0      	b.n	800c056 <_svfiprintf_r+0x192>
 800c074:	ab03      	add	r3, sp, #12
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	462a      	mov	r2, r5
 800c07a:	4b0e      	ldr	r3, [pc, #56]	@ (800c0b4 <_svfiprintf_r+0x1f0>)
 800c07c:	a904      	add	r1, sp, #16
 800c07e:	4638      	mov	r0, r7
 800c080:	f3af 8000 	nop.w
 800c084:	1c42      	adds	r2, r0, #1
 800c086:	4606      	mov	r6, r0
 800c088:	d1d6      	bne.n	800c038 <_svfiprintf_r+0x174>
 800c08a:	89ab      	ldrh	r3, [r5, #12]
 800c08c:	065b      	lsls	r3, r3, #25
 800c08e:	f53f af2d 	bmi.w	800beec <_svfiprintf_r+0x28>
 800c092:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c094:	e72c      	b.n	800bef0 <_svfiprintf_r+0x2c>
 800c096:	ab03      	add	r3, sp, #12
 800c098:	9300      	str	r3, [sp, #0]
 800c09a:	462a      	mov	r2, r5
 800c09c:	4b05      	ldr	r3, [pc, #20]	@ (800c0b4 <_svfiprintf_r+0x1f0>)
 800c09e:	a904      	add	r1, sp, #16
 800c0a0:	4638      	mov	r0, r7
 800c0a2:	f000 f879 	bl	800c198 <_printf_i>
 800c0a6:	e7ed      	b.n	800c084 <_svfiprintf_r+0x1c0>
 800c0a8:	0800c510 	.word	0x0800c510
 800c0ac:	0800c51a 	.word	0x0800c51a
 800c0b0:	00000000 	.word	0x00000000
 800c0b4:	0800be0d 	.word	0x0800be0d
 800c0b8:	0800c516 	.word	0x0800c516

0800c0bc <_printf_common>:
 800c0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0c0:	4616      	mov	r6, r2
 800c0c2:	4698      	mov	r8, r3
 800c0c4:	688a      	ldr	r2, [r1, #8]
 800c0c6:	690b      	ldr	r3, [r1, #16]
 800c0c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	bfb8      	it	lt
 800c0d0:	4613      	movlt	r3, r2
 800c0d2:	6033      	str	r3, [r6, #0]
 800c0d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c0d8:	4607      	mov	r7, r0
 800c0da:	460c      	mov	r4, r1
 800c0dc:	b10a      	cbz	r2, 800c0e2 <_printf_common+0x26>
 800c0de:	3301      	adds	r3, #1
 800c0e0:	6033      	str	r3, [r6, #0]
 800c0e2:	6823      	ldr	r3, [r4, #0]
 800c0e4:	0699      	lsls	r1, r3, #26
 800c0e6:	bf42      	ittt	mi
 800c0e8:	6833      	ldrmi	r3, [r6, #0]
 800c0ea:	3302      	addmi	r3, #2
 800c0ec:	6033      	strmi	r3, [r6, #0]
 800c0ee:	6825      	ldr	r5, [r4, #0]
 800c0f0:	f015 0506 	ands.w	r5, r5, #6
 800c0f4:	d106      	bne.n	800c104 <_printf_common+0x48>
 800c0f6:	f104 0a19 	add.w	sl, r4, #25
 800c0fa:	68e3      	ldr	r3, [r4, #12]
 800c0fc:	6832      	ldr	r2, [r6, #0]
 800c0fe:	1a9b      	subs	r3, r3, r2
 800c100:	42ab      	cmp	r3, r5
 800c102:	dc26      	bgt.n	800c152 <_printf_common+0x96>
 800c104:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c108:	6822      	ldr	r2, [r4, #0]
 800c10a:	3b00      	subs	r3, #0
 800c10c:	bf18      	it	ne
 800c10e:	2301      	movne	r3, #1
 800c110:	0692      	lsls	r2, r2, #26
 800c112:	d42b      	bmi.n	800c16c <_printf_common+0xb0>
 800c114:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c118:	4641      	mov	r1, r8
 800c11a:	4638      	mov	r0, r7
 800c11c:	47c8      	blx	r9
 800c11e:	3001      	adds	r0, #1
 800c120:	d01e      	beq.n	800c160 <_printf_common+0xa4>
 800c122:	6823      	ldr	r3, [r4, #0]
 800c124:	6922      	ldr	r2, [r4, #16]
 800c126:	f003 0306 	and.w	r3, r3, #6
 800c12a:	2b04      	cmp	r3, #4
 800c12c:	bf02      	ittt	eq
 800c12e:	68e5      	ldreq	r5, [r4, #12]
 800c130:	6833      	ldreq	r3, [r6, #0]
 800c132:	1aed      	subeq	r5, r5, r3
 800c134:	68a3      	ldr	r3, [r4, #8]
 800c136:	bf0c      	ite	eq
 800c138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c13c:	2500      	movne	r5, #0
 800c13e:	4293      	cmp	r3, r2
 800c140:	bfc4      	itt	gt
 800c142:	1a9b      	subgt	r3, r3, r2
 800c144:	18ed      	addgt	r5, r5, r3
 800c146:	2600      	movs	r6, #0
 800c148:	341a      	adds	r4, #26
 800c14a:	42b5      	cmp	r5, r6
 800c14c:	d11a      	bne.n	800c184 <_printf_common+0xc8>
 800c14e:	2000      	movs	r0, #0
 800c150:	e008      	b.n	800c164 <_printf_common+0xa8>
 800c152:	2301      	movs	r3, #1
 800c154:	4652      	mov	r2, sl
 800c156:	4641      	mov	r1, r8
 800c158:	4638      	mov	r0, r7
 800c15a:	47c8      	blx	r9
 800c15c:	3001      	adds	r0, #1
 800c15e:	d103      	bne.n	800c168 <_printf_common+0xac>
 800c160:	f04f 30ff 	mov.w	r0, #4294967295
 800c164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c168:	3501      	adds	r5, #1
 800c16a:	e7c6      	b.n	800c0fa <_printf_common+0x3e>
 800c16c:	18e1      	adds	r1, r4, r3
 800c16e:	1c5a      	adds	r2, r3, #1
 800c170:	2030      	movs	r0, #48	@ 0x30
 800c172:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c176:	4422      	add	r2, r4
 800c178:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c17c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c180:	3302      	adds	r3, #2
 800c182:	e7c7      	b.n	800c114 <_printf_common+0x58>
 800c184:	2301      	movs	r3, #1
 800c186:	4622      	mov	r2, r4
 800c188:	4641      	mov	r1, r8
 800c18a:	4638      	mov	r0, r7
 800c18c:	47c8      	blx	r9
 800c18e:	3001      	adds	r0, #1
 800c190:	d0e6      	beq.n	800c160 <_printf_common+0xa4>
 800c192:	3601      	adds	r6, #1
 800c194:	e7d9      	b.n	800c14a <_printf_common+0x8e>
	...

0800c198 <_printf_i>:
 800c198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c19c:	7e0f      	ldrb	r7, [r1, #24]
 800c19e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c1a0:	2f78      	cmp	r7, #120	@ 0x78
 800c1a2:	4691      	mov	r9, r2
 800c1a4:	4680      	mov	r8, r0
 800c1a6:	460c      	mov	r4, r1
 800c1a8:	469a      	mov	sl, r3
 800c1aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c1ae:	d807      	bhi.n	800c1c0 <_printf_i+0x28>
 800c1b0:	2f62      	cmp	r7, #98	@ 0x62
 800c1b2:	d80a      	bhi.n	800c1ca <_printf_i+0x32>
 800c1b4:	2f00      	cmp	r7, #0
 800c1b6:	f000 80d2 	beq.w	800c35e <_printf_i+0x1c6>
 800c1ba:	2f58      	cmp	r7, #88	@ 0x58
 800c1bc:	f000 80b9 	beq.w	800c332 <_printf_i+0x19a>
 800c1c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c1c8:	e03a      	b.n	800c240 <_printf_i+0xa8>
 800c1ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c1ce:	2b15      	cmp	r3, #21
 800c1d0:	d8f6      	bhi.n	800c1c0 <_printf_i+0x28>
 800c1d2:	a101      	add	r1, pc, #4	@ (adr r1, 800c1d8 <_printf_i+0x40>)
 800c1d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1d8:	0800c231 	.word	0x0800c231
 800c1dc:	0800c245 	.word	0x0800c245
 800c1e0:	0800c1c1 	.word	0x0800c1c1
 800c1e4:	0800c1c1 	.word	0x0800c1c1
 800c1e8:	0800c1c1 	.word	0x0800c1c1
 800c1ec:	0800c1c1 	.word	0x0800c1c1
 800c1f0:	0800c245 	.word	0x0800c245
 800c1f4:	0800c1c1 	.word	0x0800c1c1
 800c1f8:	0800c1c1 	.word	0x0800c1c1
 800c1fc:	0800c1c1 	.word	0x0800c1c1
 800c200:	0800c1c1 	.word	0x0800c1c1
 800c204:	0800c345 	.word	0x0800c345
 800c208:	0800c26f 	.word	0x0800c26f
 800c20c:	0800c2ff 	.word	0x0800c2ff
 800c210:	0800c1c1 	.word	0x0800c1c1
 800c214:	0800c1c1 	.word	0x0800c1c1
 800c218:	0800c367 	.word	0x0800c367
 800c21c:	0800c1c1 	.word	0x0800c1c1
 800c220:	0800c26f 	.word	0x0800c26f
 800c224:	0800c1c1 	.word	0x0800c1c1
 800c228:	0800c1c1 	.word	0x0800c1c1
 800c22c:	0800c307 	.word	0x0800c307
 800c230:	6833      	ldr	r3, [r6, #0]
 800c232:	1d1a      	adds	r2, r3, #4
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	6032      	str	r2, [r6, #0]
 800c238:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c23c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c240:	2301      	movs	r3, #1
 800c242:	e09d      	b.n	800c380 <_printf_i+0x1e8>
 800c244:	6833      	ldr	r3, [r6, #0]
 800c246:	6820      	ldr	r0, [r4, #0]
 800c248:	1d19      	adds	r1, r3, #4
 800c24a:	6031      	str	r1, [r6, #0]
 800c24c:	0606      	lsls	r6, r0, #24
 800c24e:	d501      	bpl.n	800c254 <_printf_i+0xbc>
 800c250:	681d      	ldr	r5, [r3, #0]
 800c252:	e003      	b.n	800c25c <_printf_i+0xc4>
 800c254:	0645      	lsls	r5, r0, #25
 800c256:	d5fb      	bpl.n	800c250 <_printf_i+0xb8>
 800c258:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c25c:	2d00      	cmp	r5, #0
 800c25e:	da03      	bge.n	800c268 <_printf_i+0xd0>
 800c260:	232d      	movs	r3, #45	@ 0x2d
 800c262:	426d      	negs	r5, r5
 800c264:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c268:	4859      	ldr	r0, [pc, #356]	@ (800c3d0 <_printf_i+0x238>)
 800c26a:	230a      	movs	r3, #10
 800c26c:	e011      	b.n	800c292 <_printf_i+0xfa>
 800c26e:	6821      	ldr	r1, [r4, #0]
 800c270:	6833      	ldr	r3, [r6, #0]
 800c272:	0608      	lsls	r0, r1, #24
 800c274:	f853 5b04 	ldr.w	r5, [r3], #4
 800c278:	d402      	bmi.n	800c280 <_printf_i+0xe8>
 800c27a:	0649      	lsls	r1, r1, #25
 800c27c:	bf48      	it	mi
 800c27e:	b2ad      	uxthmi	r5, r5
 800c280:	2f6f      	cmp	r7, #111	@ 0x6f
 800c282:	4853      	ldr	r0, [pc, #332]	@ (800c3d0 <_printf_i+0x238>)
 800c284:	6033      	str	r3, [r6, #0]
 800c286:	bf14      	ite	ne
 800c288:	230a      	movne	r3, #10
 800c28a:	2308      	moveq	r3, #8
 800c28c:	2100      	movs	r1, #0
 800c28e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c292:	6866      	ldr	r6, [r4, #4]
 800c294:	60a6      	str	r6, [r4, #8]
 800c296:	2e00      	cmp	r6, #0
 800c298:	bfa2      	ittt	ge
 800c29a:	6821      	ldrge	r1, [r4, #0]
 800c29c:	f021 0104 	bicge.w	r1, r1, #4
 800c2a0:	6021      	strge	r1, [r4, #0]
 800c2a2:	b90d      	cbnz	r5, 800c2a8 <_printf_i+0x110>
 800c2a4:	2e00      	cmp	r6, #0
 800c2a6:	d04b      	beq.n	800c340 <_printf_i+0x1a8>
 800c2a8:	4616      	mov	r6, r2
 800c2aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800c2ae:	fb03 5711 	mls	r7, r3, r1, r5
 800c2b2:	5dc7      	ldrb	r7, [r0, r7]
 800c2b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c2b8:	462f      	mov	r7, r5
 800c2ba:	42bb      	cmp	r3, r7
 800c2bc:	460d      	mov	r5, r1
 800c2be:	d9f4      	bls.n	800c2aa <_printf_i+0x112>
 800c2c0:	2b08      	cmp	r3, #8
 800c2c2:	d10b      	bne.n	800c2dc <_printf_i+0x144>
 800c2c4:	6823      	ldr	r3, [r4, #0]
 800c2c6:	07df      	lsls	r7, r3, #31
 800c2c8:	d508      	bpl.n	800c2dc <_printf_i+0x144>
 800c2ca:	6923      	ldr	r3, [r4, #16]
 800c2cc:	6861      	ldr	r1, [r4, #4]
 800c2ce:	4299      	cmp	r1, r3
 800c2d0:	bfde      	ittt	le
 800c2d2:	2330      	movle	r3, #48	@ 0x30
 800c2d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c2d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c2dc:	1b92      	subs	r2, r2, r6
 800c2de:	6122      	str	r2, [r4, #16]
 800c2e0:	f8cd a000 	str.w	sl, [sp]
 800c2e4:	464b      	mov	r3, r9
 800c2e6:	aa03      	add	r2, sp, #12
 800c2e8:	4621      	mov	r1, r4
 800c2ea:	4640      	mov	r0, r8
 800c2ec:	f7ff fee6 	bl	800c0bc <_printf_common>
 800c2f0:	3001      	adds	r0, #1
 800c2f2:	d14a      	bne.n	800c38a <_printf_i+0x1f2>
 800c2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f8:	b004      	add	sp, #16
 800c2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2fe:	6823      	ldr	r3, [r4, #0]
 800c300:	f043 0320 	orr.w	r3, r3, #32
 800c304:	6023      	str	r3, [r4, #0]
 800c306:	4833      	ldr	r0, [pc, #204]	@ (800c3d4 <_printf_i+0x23c>)
 800c308:	2778      	movs	r7, #120	@ 0x78
 800c30a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c30e:	6823      	ldr	r3, [r4, #0]
 800c310:	6831      	ldr	r1, [r6, #0]
 800c312:	061f      	lsls	r7, r3, #24
 800c314:	f851 5b04 	ldr.w	r5, [r1], #4
 800c318:	d402      	bmi.n	800c320 <_printf_i+0x188>
 800c31a:	065f      	lsls	r7, r3, #25
 800c31c:	bf48      	it	mi
 800c31e:	b2ad      	uxthmi	r5, r5
 800c320:	6031      	str	r1, [r6, #0]
 800c322:	07d9      	lsls	r1, r3, #31
 800c324:	bf44      	itt	mi
 800c326:	f043 0320 	orrmi.w	r3, r3, #32
 800c32a:	6023      	strmi	r3, [r4, #0]
 800c32c:	b11d      	cbz	r5, 800c336 <_printf_i+0x19e>
 800c32e:	2310      	movs	r3, #16
 800c330:	e7ac      	b.n	800c28c <_printf_i+0xf4>
 800c332:	4827      	ldr	r0, [pc, #156]	@ (800c3d0 <_printf_i+0x238>)
 800c334:	e7e9      	b.n	800c30a <_printf_i+0x172>
 800c336:	6823      	ldr	r3, [r4, #0]
 800c338:	f023 0320 	bic.w	r3, r3, #32
 800c33c:	6023      	str	r3, [r4, #0]
 800c33e:	e7f6      	b.n	800c32e <_printf_i+0x196>
 800c340:	4616      	mov	r6, r2
 800c342:	e7bd      	b.n	800c2c0 <_printf_i+0x128>
 800c344:	6833      	ldr	r3, [r6, #0]
 800c346:	6825      	ldr	r5, [r4, #0]
 800c348:	6961      	ldr	r1, [r4, #20]
 800c34a:	1d18      	adds	r0, r3, #4
 800c34c:	6030      	str	r0, [r6, #0]
 800c34e:	062e      	lsls	r6, r5, #24
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	d501      	bpl.n	800c358 <_printf_i+0x1c0>
 800c354:	6019      	str	r1, [r3, #0]
 800c356:	e002      	b.n	800c35e <_printf_i+0x1c6>
 800c358:	0668      	lsls	r0, r5, #25
 800c35a:	d5fb      	bpl.n	800c354 <_printf_i+0x1bc>
 800c35c:	8019      	strh	r1, [r3, #0]
 800c35e:	2300      	movs	r3, #0
 800c360:	6123      	str	r3, [r4, #16]
 800c362:	4616      	mov	r6, r2
 800c364:	e7bc      	b.n	800c2e0 <_printf_i+0x148>
 800c366:	6833      	ldr	r3, [r6, #0]
 800c368:	1d1a      	adds	r2, r3, #4
 800c36a:	6032      	str	r2, [r6, #0]
 800c36c:	681e      	ldr	r6, [r3, #0]
 800c36e:	6862      	ldr	r2, [r4, #4]
 800c370:	2100      	movs	r1, #0
 800c372:	4630      	mov	r0, r6
 800c374:	f7f3 ffb4 	bl	80002e0 <memchr>
 800c378:	b108      	cbz	r0, 800c37e <_printf_i+0x1e6>
 800c37a:	1b80      	subs	r0, r0, r6
 800c37c:	6060      	str	r0, [r4, #4]
 800c37e:	6863      	ldr	r3, [r4, #4]
 800c380:	6123      	str	r3, [r4, #16]
 800c382:	2300      	movs	r3, #0
 800c384:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c388:	e7aa      	b.n	800c2e0 <_printf_i+0x148>
 800c38a:	6923      	ldr	r3, [r4, #16]
 800c38c:	4632      	mov	r2, r6
 800c38e:	4649      	mov	r1, r9
 800c390:	4640      	mov	r0, r8
 800c392:	47d0      	blx	sl
 800c394:	3001      	adds	r0, #1
 800c396:	d0ad      	beq.n	800c2f4 <_printf_i+0x15c>
 800c398:	6823      	ldr	r3, [r4, #0]
 800c39a:	079b      	lsls	r3, r3, #30
 800c39c:	d413      	bmi.n	800c3c6 <_printf_i+0x22e>
 800c39e:	68e0      	ldr	r0, [r4, #12]
 800c3a0:	9b03      	ldr	r3, [sp, #12]
 800c3a2:	4298      	cmp	r0, r3
 800c3a4:	bfb8      	it	lt
 800c3a6:	4618      	movlt	r0, r3
 800c3a8:	e7a6      	b.n	800c2f8 <_printf_i+0x160>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	4632      	mov	r2, r6
 800c3ae:	4649      	mov	r1, r9
 800c3b0:	4640      	mov	r0, r8
 800c3b2:	47d0      	blx	sl
 800c3b4:	3001      	adds	r0, #1
 800c3b6:	d09d      	beq.n	800c2f4 <_printf_i+0x15c>
 800c3b8:	3501      	adds	r5, #1
 800c3ba:	68e3      	ldr	r3, [r4, #12]
 800c3bc:	9903      	ldr	r1, [sp, #12]
 800c3be:	1a5b      	subs	r3, r3, r1
 800c3c0:	42ab      	cmp	r3, r5
 800c3c2:	dcf2      	bgt.n	800c3aa <_printf_i+0x212>
 800c3c4:	e7eb      	b.n	800c39e <_printf_i+0x206>
 800c3c6:	2500      	movs	r5, #0
 800c3c8:	f104 0619 	add.w	r6, r4, #25
 800c3cc:	e7f5      	b.n	800c3ba <_printf_i+0x222>
 800c3ce:	bf00      	nop
 800c3d0:	0800c521 	.word	0x0800c521
 800c3d4:	0800c532 	.word	0x0800c532

0800c3d8 <memmove>:
 800c3d8:	4288      	cmp	r0, r1
 800c3da:	b510      	push	{r4, lr}
 800c3dc:	eb01 0402 	add.w	r4, r1, r2
 800c3e0:	d902      	bls.n	800c3e8 <memmove+0x10>
 800c3e2:	4284      	cmp	r4, r0
 800c3e4:	4623      	mov	r3, r4
 800c3e6:	d807      	bhi.n	800c3f8 <memmove+0x20>
 800c3e8:	1e43      	subs	r3, r0, #1
 800c3ea:	42a1      	cmp	r1, r4
 800c3ec:	d008      	beq.n	800c400 <memmove+0x28>
 800c3ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3f6:	e7f8      	b.n	800c3ea <memmove+0x12>
 800c3f8:	4402      	add	r2, r0
 800c3fa:	4601      	mov	r1, r0
 800c3fc:	428a      	cmp	r2, r1
 800c3fe:	d100      	bne.n	800c402 <memmove+0x2a>
 800c400:	bd10      	pop	{r4, pc}
 800c402:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c406:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c40a:	e7f7      	b.n	800c3fc <memmove+0x24>

0800c40c <_sbrk_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	4d06      	ldr	r5, [pc, #24]	@ (800c428 <_sbrk_r+0x1c>)
 800c410:	2300      	movs	r3, #0
 800c412:	4604      	mov	r4, r0
 800c414:	4608      	mov	r0, r1
 800c416:	602b      	str	r3, [r5, #0]
 800c418:	f7f4 fd30 	bl	8000e7c <_sbrk>
 800c41c:	1c43      	adds	r3, r0, #1
 800c41e:	d102      	bne.n	800c426 <_sbrk_r+0x1a>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	b103      	cbz	r3, 800c426 <_sbrk_r+0x1a>
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	bd38      	pop	{r3, r4, r5, pc}
 800c428:	240007e0 	.word	0x240007e0

0800c42c <_realloc_r>:
 800c42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c430:	4680      	mov	r8, r0
 800c432:	4615      	mov	r5, r2
 800c434:	460c      	mov	r4, r1
 800c436:	b921      	cbnz	r1, 800c442 <_realloc_r+0x16>
 800c438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c43c:	4611      	mov	r1, r2
 800c43e:	f7ff bc59 	b.w	800bcf4 <_malloc_r>
 800c442:	b92a      	cbnz	r2, 800c450 <_realloc_r+0x24>
 800c444:	f7ff fbea 	bl	800bc1c <_free_r>
 800c448:	2400      	movs	r4, #0
 800c44a:	4620      	mov	r0, r4
 800c44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c450:	f000 f81a 	bl	800c488 <_malloc_usable_size_r>
 800c454:	4285      	cmp	r5, r0
 800c456:	4606      	mov	r6, r0
 800c458:	d802      	bhi.n	800c460 <_realloc_r+0x34>
 800c45a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c45e:	d8f4      	bhi.n	800c44a <_realloc_r+0x1e>
 800c460:	4629      	mov	r1, r5
 800c462:	4640      	mov	r0, r8
 800c464:	f7ff fc46 	bl	800bcf4 <_malloc_r>
 800c468:	4607      	mov	r7, r0
 800c46a:	2800      	cmp	r0, #0
 800c46c:	d0ec      	beq.n	800c448 <_realloc_r+0x1c>
 800c46e:	42b5      	cmp	r5, r6
 800c470:	462a      	mov	r2, r5
 800c472:	4621      	mov	r1, r4
 800c474:	bf28      	it	cs
 800c476:	4632      	movcs	r2, r6
 800c478:	f7ff fbc2 	bl	800bc00 <memcpy>
 800c47c:	4621      	mov	r1, r4
 800c47e:	4640      	mov	r0, r8
 800c480:	f7ff fbcc 	bl	800bc1c <_free_r>
 800c484:	463c      	mov	r4, r7
 800c486:	e7e0      	b.n	800c44a <_realloc_r+0x1e>

0800c488 <_malloc_usable_size_r>:
 800c488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c48c:	1f18      	subs	r0, r3, #4
 800c48e:	2b00      	cmp	r3, #0
 800c490:	bfbc      	itt	lt
 800c492:	580b      	ldrlt	r3, [r1, r0]
 800c494:	18c0      	addlt	r0, r0, r3
 800c496:	4770      	bx	lr

0800c498 <_init>:
 800c498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49a:	bf00      	nop
 800c49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c49e:	bc08      	pop	{r3}
 800c4a0:	469e      	mov	lr, r3
 800c4a2:	4770      	bx	lr

0800c4a4 <_fini>:
 800c4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4a6:	bf00      	nop
 800c4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4aa:	bc08      	pop	{r3}
 800c4ac:	469e      	mov	lr, r3
 800c4ae:	4770      	bx	lr
